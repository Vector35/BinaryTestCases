(dp0
S'test_function_can_return'
p1
(lp2
S'function name: _start type: SymbolType.FunctionSymbol address: 0x8040094L can_return: True'
p3
asS'test_function_stack'
p4
(lp5
S'Stack position 0: __return_addr'
p6
aS'Stack position 1: testautovar'
p7
aS'Stack content sample: <return address>'
p8
aS'Stack content range sample: <return address>'
p9
aS'Sample stack var: None'
p10
asS'test_strings'
p11
(lp12
S'String: /bin/bash type: StringType.AsciiString at: 0x80410e9L'
p13
aS'String: /bin/sh type: StringType.AsciiString at: 0x80410f3L'
p14
asS'test_function_low_il_basic_blocks'
p15
(lp16
S'LLIL basic block <block: x86@0x0-0x2> start: 0x0L end: 0x2L outgoing edges: 2'
p17
aS'LLIL basic block <block: x86@0x2-0x3> start: 0x2L end: 0x3L outgoing edges: 0'
p18
aS'LLIL basic block <block: x86@0x3-0x5> start: 0x3L end: 0x5L outgoing edges: 2'
p19
aS'LLIL basic block <block: x86@0x5-0x8> start: 0x5L end: 0x8L outgoing edges: 1'
p20
aS'LLIL basic block <block: x86@0x8-0xb> start: 0x8L end: 0xbL outgoing edges: 1'
p21
asS'test_functions_attributes'
p22
(lp23
S'Function _start var: testautovar'
p24
aS'Function _start var: arg1'
p25
aS'Function _start var: eax'
p26
aS'Function _start var: ecx'
p27
aS'Function _start var: ecx_1'
p28
aS'Function _start var: ecx_2'
p29
aS'Function _start var: ecx_3'
p30
aS'Function _start var: arg2'
p31
aS'Function _start var: arg3'
p32
aS'Function _start indirect branch: <branch x86:0x804009d -> x86:0x80400a4>'
p33
aS'Function _start indirect branch: <branch x86:0x804009d -> x86:0x80400ad>'
p34
aS'Function _start session data: {}'
p35
aS'Function _start analysis perf length: 1'
p36
aS'Function _start clobbered reg: eax'
p37
aS'Function _start explicitly defined type: False'
p38
aS'Function _start needs update: True'
p39
aS'Function _start global pointer value: <undetermined>'
p40
aS'Function _start comment: testcomment _start'
p41
aS'Function _start too large: False'
p42
aS'Function _start analysis skipped: False'
p43
aS'Function _start first ins LLIL: eax = [esi].d'
p44
aS'Function _start LLIL exit test: []'
p45
aS"Function _start regs read test: ['esi']"
p46
aS"Function _start regs written test: ['eax']"
p47
aS'Function _start stack var test: []'
p48
aS'Function _start constant reference test: []'
p49
aS'Function _start first ins lifted IL: eax = [esi].d'
p50
aS'Function _start flags read by lifted IL ins: []'
p51
aS'Function _start flags written by lifted IL ins: []'
p52
aS'Function _start create graph: <graph of <func: x86@0x8040094>>'
p53
aS'Function _start indirect branches test: []'
p54
aS'Function _start test instr highlight: <color: #ff00ff>'
p55
aS'Function _start type token: int32_t __fastcall _start(int32_t arg1, int32_t arg2, int32_t* arg3 @ esi)'
p56
asS'test_function_starts'
p57
(lp58
S'Function start: 0x8040094L'
p59
asS'test_function_llil'
p60
(lp61
S'LLIL basic block: <block: x86@0x0-0x2>'
p62
aS'LLIL basic block: <block: x86@0x2-0x3>'
p63
aS'LLIL basic block: <block: x86@0x3-0x5>'
p64
aS'LLIL basic block: <block: x86@0x5-0x8>'
p65
aS'LLIL basic block: <block: x86@0x8-0xb>'
p66
aS'LLIL instruction: eax = [esi].d'
p67
aS'LLIL instruction: if (al u> 5) then 2 @ 0x80400b6 else 3 @ 0x804009a'
p68
aS'LLIL instruction: <return> jump(pop)'
p69
aS'LLIL instruction: ecx = zx.d(al)'
p70
aS'LLIL instruction: jump([(ecx << 2) + 0x80400b7].d => 5 @ 0x80400a4, 8 @ 0x80400ad)'
p71
aS'LLIL instruction: eax = edx'
p72
aS'LLIL instruction: ecx = 1'
p73
aS'LLIL instruction: goto 3 @ 0x804009a'
p74
aS'LLIL instruction: eax = edx'
p75
aS'LLIL instruction: ecx = 2'
p76
aS'LLIL instruction: goto 3'
p77
aS'MLIL basic block: <block: x86@0x0-0x2>'
p78
aS'MLIL basic block: <block: x86@0x2-0x3>'
p79
aS'MLIL basic block: <block: x86@0x3-0x5>'
p80
aS'MLIL basic block: <block: x86@0x5-0x8>'
p81
aS'MLIL basic block: <block: x86@0x8-0xb>'
p82
aS'MLIL instruction: eax = [arg3].d'
p83
aS'MLIL instruction: if (eax.al u> 5) then 2 @ 0x80400b6 else 3 @ 0x804009a'
p84
aS'MLIL instruction: return eax'
p85
aS'MLIL instruction: ecx_1 = zx.d(eax.al)'
p86
aS'MLIL instruction: jump([(ecx_1 << 2) + 0x80400b7].d => 5 @ 0x80400a4, 8 @ 0x80400ad)'
p87
aS'MLIL instruction: eax = arg2'
p88
aS'MLIL instruction: ecx_2 = 1'
p89
aS'MLIL instruction: goto 3 @ 0x804009a'
p90
aS'MLIL instruction: eax = arg2'
p91
aS'MLIL instruction: ecx_3 = 2'
p92
aS'MLIL instruction: goto 3 @ 0x804009a'
p93
aS'Instructiin: 0x8040094L: mov     eax, dword [esi]'
p94
aS'Instructiin: 0x8040096L: cmp     al, 0x5'
p95
aS'Instructiin: 0x8040098L: ja      0x80400b6'
p96
aS'Instructiin: 0x80400b6L: retn    '
p97
aS'Instructiin: 0x804009aL: movzx   ecx, al'
p98
aS'Instructiin: 0x804009dL: jmp     dword [ecx*4+0x80400b7]'
p99
aS'Instructiin: 0x80400a4L: mov     eax, edx'
p100
aS'Instructiin: 0x80400a6L: mov     ecx, 0x1'
p101
aS'Instructiin: 0x80400abL: jmp     0x804009a'
p102
aS'Instructiin: 0x80400adL: mov     eax, edx'
p103
aS'Instructiin: 0x80400afL: mov     ecx, 0x2'
p104
aS'Instructiin: 0x80400b4L: jmp     0x804009a'
p105
asS'test_low_il_ssa'
p106
(lp107
S'Reg ch SSA definition: None'
p108
aS'Reg ch SSA uses: []'
p109
aS'Reg ch SSA value: <undetermined>'
p110
aS'Reg gs SSA definition: None'
p111
aS'Reg gs SSA uses: []'
p112
aS'Reg gs SSA value: <undetermined>'
p113
aS'Reg xmm4 SSA definition: None'
p114
aS'Reg xmm4 SSA uses: []'
p115
aS'Reg xmm4 SSA value: <undetermined>'
p116
aS'Reg x87_r3 SSA definition: None'
p117
aS'Reg x87_r3 SSA uses: []'
p118
aS'Reg x87_r3 SSA value: <undetermined>'
p119
aS'Reg cl SSA definition: None'
p120
aS'Reg cl SSA uses: []'
p121
aS'Reg cl SSA value: <undetermined>'
p122
aS'Reg mm5 SSA definition: None'
p123
aS'Reg mm5 SSA uses: []'
p124
aS'Reg mm5 SSA value: <undetermined>'
p125
aS'Reg ah SSA definition: None'
p126
aS'Reg ah SSA uses: []'
p127
aS'Reg ah SSA value: <undetermined>'
p128
aS'Reg mm7 SSA definition: None'
p129
aS'Reg mm7 SSA uses: []'
p130
aS'Reg mm7 SSA value: <undetermined>'
p131
aS'Reg edi SSA definition: None'
p132
aS'Reg edi SSA uses: []'
p133
aS'Reg edi SSA value: <undetermined>'
p134
aS'Reg mm1 SSA definition: None'
p135
aS'Reg mm1 SSA uses: []'
p136
aS'Reg mm1 SSA value: <undetermined>'
p137
aS'Reg al SSA definition: None'
p138
aS'Reg al SSA uses: []'
p139
aS'Reg al SSA value: <undetermined>'
p140
aS'Reg mm3 SSA definition: None'
p141
aS'Reg mm3 SSA uses: []'
p142
aS'Reg mm3 SSA value: <undetermined>'
p143
aS'Reg mm2 SSA definition: None'
p144
aS'Reg mm2 SSA uses: []'
p145
aS'Reg mm2 SSA value: <undetermined>'
p146
aS'Reg gsbase SSA definition: None'
p147
aS'Reg gsbase SSA uses: []'
p148
aS'Reg gsbase SSA value: <undetermined>'
p149
aS'Reg cx SSA definition: None'
p150
aS'Reg cx SSA uses: []'
p151
aS'Reg cx SSA value: <undetermined>'
p152
aS'Reg ebp SSA definition: None'
p153
aS'Reg ebp SSA uses: []'
p154
aS'Reg ebp SSA value: <undetermined>'
p155
aS'Reg cs SSA definition: None'
p156
aS'Reg cs SSA uses: []'
p157
aS'Reg cs SSA value: <undetermined>'
p158
aS'Reg ax SSA definition: None'
p159
aS'Reg ax SSA uses: []'
p160
aS'Reg ax SSA value: <undetermined>'
p161
aS'Reg edx SSA definition: None'
p162
aS'Reg edx SSA uses: []'
p163
aS'Reg edx SSA value: <undetermined>'
p164
aS'Reg ebx SSA definition: None'
p165
aS'Reg ebx SSA uses: []'
p166
aS'Reg ebx SSA value: <undetermined>'
p167
aS'Reg es SSA definition: None'
p168
aS'Reg es SSA uses: []'
p169
aS'Reg es SSA value: <undetermined>'
p170
aS'Reg x87_r2 SSA definition: None'
p171
aS'Reg x87_r2 SSA uses: []'
p172
aS'Reg x87_r2 SSA value: <undetermined>'
p173
aS'Reg esp SSA definition: None'
p174
aS'Reg esp SSA uses: []'
p175
aS'Reg esp SSA value: <undetermined>'
p176
aS'Reg mm4 SSA definition: None'
p177
aS'Reg mm4 SSA uses: []'
p178
aS'Reg mm4 SSA value: <undetermined>'
p179
aS'Reg top SSA definition: None'
p180
aS'Reg top SSA uses: []'
p181
aS'Reg top SSA value: <undetermined>'
p182
aS'Reg x87_r0 SSA definition: None'
p183
aS'Reg x87_r0 SSA uses: []'
p184
aS'Reg x87_r0 SSA value: <undetermined>'
p185
aS'Reg st4 SSA definition: None'
p186
aS'Reg st4 SSA uses: []'
p187
aS'Reg st4 SSA value: <undetermined>'
p188
aS'Reg st5 SSA definition: None'
p189
aS'Reg st5 SSA uses: []'
p190
aS'Reg st5 SSA value: <undetermined>'
p191
aS'Reg st6 SSA definition: None'
p192
aS'Reg st6 SSA uses: []'
p193
aS'Reg st6 SSA value: <undetermined>'
p194
aS'Reg st7 SSA definition: None'
p195
aS'Reg st7 SSA uses: []'
p196
aS'Reg st7 SSA value: <undetermined>'
p197
aS'Reg st0 SSA definition: None'
p198
aS'Reg st0 SSA uses: []'
p199
aS'Reg st0 SSA value: <undetermined>'
p200
aS'Reg st1 SSA definition: None'
p201
aS'Reg st1 SSA uses: []'
p202
aS'Reg st1 SSA value: <undetermined>'
p203
aS'Reg st2 SSA definition: None'
p204
aS'Reg st2 SSA uses: []'
p205
aS'Reg st2 SSA value: <undetermined>'
p206
aS'Reg st3 SSA definition: None'
p207
aS'Reg st3 SSA uses: []'
p208
aS'Reg st3 SSA value: <undetermined>'
p209
aS'Reg x87_r6 SSA definition: None'
p210
aS'Reg x87_r6 SSA uses: []'
p211
aS'Reg x87_r6 SSA value: <undetermined>'
p212
aS'Reg esi SSA definition: None'
p213
aS'Reg esi SSA uses: []'
p214
aS'Reg esi SSA value: <undetermined>'
p215
aS'Reg x87_r7 SSA definition: None'
p216
aS'Reg x87_r7 SSA uses: []'
p217
aS'Reg x87_r7 SSA value: <undetermined>'
p218
aS'Reg dl SSA definition: None'
p219
aS'Reg dl SSA uses: []'
p220
aS'Reg dl SSA value: <undetermined>'
p221
aS'Reg mm6 SSA definition: None'
p222
aS'Reg mm6 SSA uses: []'
p223
aS'Reg mm6 SSA value: <undetermined>'
p224
aS'Reg x87_r4 SSA definition: None'
p225
aS'Reg x87_r4 SSA uses: []'
p226
aS'Reg x87_r4 SSA value: <undetermined>'
p227
aS'Reg dh SSA definition: None'
p228
aS'Reg dh SSA uses: []'
p229
aS'Reg dh SSA value: <undetermined>'
p230
aS'Reg di SSA definition: None'
p231
aS'Reg di SSA uses: []'
p232
aS'Reg di SSA value: <undetermined>'
p233
aS'Reg bl SSA definition: None'
p234
aS'Reg bl SSA uses: []'
p235
aS'Reg bl SSA value: <undetermined>'
p236
aS'Reg x87_r5 SSA definition: None'
p237
aS'Reg x87_r5 SSA uses: []'
p238
aS'Reg x87_r5 SSA value: <undetermined>'
p239
aS'Reg bh SSA definition: None'
p240
aS'Reg bh SSA uses: []'
p241
aS'Reg bh SSA value: <undetermined>'
p242
aS'Reg mm0 SSA definition: None'
p243
aS'Reg mm0 SSA uses: []'
p244
aS'Reg mm0 SSA value: <undetermined>'
p245
aS'Reg xmm2 SSA definition: None'
p246
aS'Reg xmm2 SSA uses: []'
p247
aS'Reg xmm2 SSA value: <undetermined>'
p248
aS'Reg eax SSA definition: 0'
p249
aS'Reg eax SSA uses: [1L, 3L]'
p250
aS'Reg eax SSA value: <undetermined>'
p251
aS'Reg xmm0 SSA definition: None'
p252
aS'Reg xmm0 SSA uses: []'
p253
aS'Reg xmm0 SSA value: <undetermined>'
p254
aS'Reg xmm1 SSA definition: None'
p255
aS'Reg xmm1 SSA uses: []'
p256
aS'Reg xmm1 SSA value: <undetermined>'
p257
aS'Reg bp SSA definition: None'
p258
aS'Reg bp SSA uses: []'
p259
aS'Reg bp SSA value: <undetermined>'
p260
aS'Reg xmm7 SSA definition: None'
p261
aS'Reg xmm7 SSA uses: []'
p262
aS'Reg xmm7 SSA value: <undetermined>'
p263
aS'Reg dx SSA definition: None'
p264
aS'Reg dx SSA uses: []'
p265
aS'Reg dx SSA value: <undetermined>'
p266
aS'Reg xmm5 SSA definition: None'
p267
aS'Reg xmm5 SSA uses: []'
p268
aS'Reg xmm5 SSA value: <undetermined>'
p269
aS'Reg bx SSA definition: None'
p270
aS'Reg bx SSA uses: []'
p271
aS'Reg bx SSA value: <undetermined>'
p272
aS'Reg ds SSA definition: None'
p273
aS'Reg ds SSA uses: []'
p274
aS'Reg ds SSA value: <undetermined>'
p275
aS'Reg ecx SSA definition: 3'
p276
aS'Reg ecx SSA uses: []'
p277
aS'Reg ecx SSA value: <undetermined>'
p278
aS'Reg xmm3 SSA definition: None'
p279
aS'Reg xmm3 SSA uses: []'
p280
aS'Reg xmm3 SSA value: <undetermined>'
p281
aS'Reg ss SSA definition: None'
p282
aS'Reg ss SSA uses: []'
p283
aS'Reg ss SSA value: <undetermined>'
p284
aS'Reg sp SSA definition: None'
p285
aS'Reg sp SSA uses: []'
p286
aS'Reg sp SSA value: <undetermined>'
p287
aS'Reg fs SSA definition: None'
p288
aS'Reg fs SSA uses: []'
p289
aS'Reg fs SSA value: <undetermined>'
p290
aS'Reg si SSA definition: None'
p291
aS'Reg si SSA uses: []'
p292
aS'Reg si SSA value: <undetermined>'
p293
aS'Reg x87_r1 SSA definition: None'
p294
aS'Reg x87_r1 SSA uses: []'
p295
aS'Reg x87_r1 SSA value: <undetermined>'
p296
aS'Reg xmm6 SSA definition: None'
p297
aS'Reg xmm6 SSA uses: []'
p298
aS'Reg xmm6 SSA value: <undetermined>'
p299
aS'Reg fsbase SSA definition: None'
p300
aS'Reg fsbase SSA uses: []'
p301
aS'Reg fsbase SSA value: <undetermined>'
p302
aS'Flag c SSA uses: []'
p303
aS'Flag c SSA value: <undetermined>'
p304
aS'Flag p SSA uses: []'
p305
aS'Flag p SSA value: <undetermined>'
p306
aS'Flag a SSA uses: []'
p307
aS'Flag a SSA value: <undetermined>'
p308
aS'Flag z SSA uses: []'
p309
aS'Flag z SSA value: <undetermined>'
p310
aS'Flag s SSA uses: []'
p311
aS'Flag s SSA value: <undetermined>'
p312
aS'Flag d SSA uses: []'
p313
aS'Flag d SSA value: <undetermined>'
p314
aS'Flag o SSA uses: []'
p315
aS'Flag o SSA value: <undetermined>'
p316
aS'Flag c0 SSA uses: []'
p317
aS'Flag c0 SSA value: <undetermined>'
p318
aS'Flag c1 SSA uses: []'
p319
aS'Flag c1 SSA value: <undetermined>'
p320
aS'Flag c2 SSA uses: []'
p321
aS'Flag c2 SSA value: <undetermined>'
p322
aS'Flag c3 SSA uses: []'
p323
aS'Flag c3 SSA value: <undetermined>'
p324
aS'Non-SSA instruction index: 0'
p325
aS'SSA instruction index: 0'
p326
aS'MLIL instruction index: 0'
p327
aS'Mapped MLIL instruction index: 0'
p328
aS'Non-SSA instruction index: 1'
p329
aS'SSA instruction index: 1'
p330
aS'MLIL instruction index: 1'
p331
aS'Mapped MLIL instruction index: 1'
p332
aS'Non-SSA instruction index: 2'
p333
aS'SSA instruction index: 2'
p334
aS'MLIL instruction index: 2'
p335
aS'Mapped MLIL instruction index: 2'
p336
aS'Non-SSA instruction index: 3'
p337
aS'SSA instruction index: 5'
p338
aS'MLIL instruction index: 3'
p339
aS'Mapped MLIL instruction index: 3'
p340
aS'Non-SSA instruction index: 4'
p341
aS'SSA instruction index: 6'
p342
aS'MLIL instruction index: 4'
p343
aS'Mapped MLIL instruction index: 4'
p344
aS'Non-SSA instruction index: 5'
p345
aS'SSA instruction index: 7'
p346
aS'MLIL instruction index: 5'
p347
aS'Mapped MLIL instruction index: 5'
p348
aS'Non-SSA instruction index: 6'
p349
aS'SSA instruction index: 8'
p350
aS'MLIL instruction index: 6'
p351
aS'Mapped MLIL instruction index: 6'
p352
aS'Non-SSA instruction index: 7'
p353
aS'SSA instruction index: 9'
p354
aS'MLIL instruction index: 7'
p355
aS'Mapped MLIL instruction index: 7'
p356
aS'Non-SSA instruction index: 8'
p357
aS'SSA instruction index: 10'
p358
aS'MLIL instruction index: 8'
p359
aS'Mapped MLIL instruction index: 8'
p360
aS'Non-SSA instruction index: 9'
p361
aS'SSA instruction index: 11'
p362
aS'MLIL instruction index: 9'
p363
aS'Mapped MLIL instruction index: 9'
p364
aS'Non-SSA instruction index: 10'
p365
aS'SSA instruction index: 12'
p366
aS'MLIL instruction index: 10'
p367
aS'Mapped MLIL instruction index: 10'
p368
asS'test_med_il_instructions'
p369
(lp370
S'Expression type: None'
p371
aS'LLIL: eax#1 = [esi#0].d @ mem#0'
p372
aS'Value: <undetermined>'
p373
aS'Possible values: <undetermined>'
p374
aS'Branch dependence: {}'
p375
aS"Prefix operands: ['<MLIL_LOAD 4>', '<MLIL_SET_VAR 4>', '<MLIL_VAR 4>', 'arg3', 'eax']"
p376
aS"Postfix operands: ['<MLIL_LOAD 4>', '<MLIL_SET_VAR 4>', '<MLIL_VAR 4>', 'arg3', 'eax']"
p377
aS'SSA form: eax#1 = [arg3#0].d @ mem#0'
p378
aS'Non-SSA formeax = [arg3].d'
p379
aS'Expression type: None'
p380
aS'LLIL: if (eax#1.al u> 5) then 2 @ 0x80400b6 else 3 @ 0x804009a'
p381
aS'Value: <undetermined>'
p382
aS'Possible values: <undetermined>'
p383
aS'Branch dependence: {}'
p384
aS"Prefix operands: ['0', '2', '3', '5', '<MLIL_CMP_UGT 1>', '<MLIL_CONST 1>', '<MLIL_IF>', '<MLIL_VAR_FIELD 1>', 'eax']"
p385
aS"Postfix operands: ['0', '2', '3', '5', '<MLIL_CMP_UGT 1>', '<MLIL_CONST 1>', '<MLIL_IF>', '<MLIL_VAR_FIELD 1>', 'eax']"
p386
aS'SSA form: if (eax#1.al u> 5) then 2 @ 0x80400b6 else 3 @ 0x0'
p387
aS'Non-SSA formif (eax.al u> 5) then 2 @ 0x80400b6 else 3 @ 0x804009a'
p388
aS'Expression type: None'
p389
aS'LLIL: <return> jump([esp#0].d @ mem#0)'
p390
aS'Value: <undetermined>'
p391
aS'Possible values: <undetermined>'
p392
aS'Branch dependence: {1L: <ILBranchDependence.TrueBranchDependent: 1>}'
p393
aS"Prefix operands: ['<MLIL_RET>', '[<il: eax>]']"
p394
aS"Postfix operands: ['<MLIL_RET>', '[<il: eax>]']"
p395
aS'SSA form: return eax#1'
p396
aS'Non-SSA formreturn eax'
p397
aS'Expression type: None'
p398
aS'LLIL: ecx#2 = zx.d(eax#2.al)'
p399
aS'Value: <undetermined>'
p400
aS'Possible values: <undetermined>'
p401
aS'Branch dependence: {1L: <ILBranchDependence.FalseBranchDependent: 2>}'
p402
aS"Prefix operands: ['0', '<MLIL_SET_VAR 4>', '<MLIL_VAR_FIELD 1>', '<MLIL_ZX 4>', 'eax', 'ecx_1']"
p403
aS"Postfix operands: ['0', '<MLIL_SET_VAR 4>', '<MLIL_VAR_FIELD 1>', '<MLIL_ZX 4>', 'eax', 'ecx_1']"
p404
aS'SSA form: ecx_1#2 = zx.d(eax#2.al)'
p405
aS'Non-SSA formecx_1 = zx.d(eax.al)'
p406
aS'Expression type: None'
p407
aS'LLIL: jump([(ecx#2 << 2) + 0x80400b7].d @ mem#0 => 7 @ 0x80400a4, 10 @ 0x80400ad)'
p408
aS'Value: <undetermined>'
p409
aS'Possible values: <undetermined>'
p410
aS'Branch dependence: {1L: <ILBranchDependence.FalseBranchDependent: 2>}'
p411
aS"Prefix operands: ['134480055', '2', '<MLIL_ADD 4>', '<MLIL_CONST 1>', '<MLIL_CONST 4>', '<MLIL_JUMP_TO>', '<MLIL_LOAD 4>', '<MLIL_LSL 4>', '<MLIL_VAR 4>', '[5L, 8L]', 'ecx_1']"
p412
aS"Postfix operands: ['134480055', '2', '<MLIL_ADD 4>', '<MLIL_CONST 1>', '<MLIL_CONST 4>', '<MLIL_JUMP_TO>', '<MLIL_LOAD 4>', '<MLIL_LSL 4>', '<MLIL_VAR 4>', '[5L, 8L]', 'ecx_1']"
p413
aS'SSA form: jump([(ecx_1#2 << 2) + 0x80400b7].d @ mem#0 => 8 @ 0x80400a4, 11 @ 0x80400ad)'
p414
aS'Non-SSA formjump([(ecx_1 << 2) + 0x80400b7].d => 5 @ 0x80400a4, 8 @ 0x80400ad)'
p415
aS'Expression type: None'
p416
aS'LLIL: eax#3 = edx#0'
p417
aS'Value: <undetermined>'
p418
aS'Possible values: <undetermined>'
p419
aS'Branch dependence: {1L: <ILBranchDependence.FalseBranchDependent: 2>}'
p420
aS"Prefix operands: ['<MLIL_SET_VAR 4>', '<MLIL_VAR 4>', 'arg2', 'eax']"
p421
aS"Postfix operands: ['<MLIL_SET_VAR 4>', '<MLIL_VAR 4>', 'arg2', 'eax']"
p422
aS'SSA form: eax#3 = arg2#0'
p423
aS'Non-SSA formeax = arg2'
p424
aS'Expression type: None'
p425
aS'LLIL: ecx#3 = 1'
p426
aS'Value: <undetermined>'
p427
aS'Possible values: <undetermined>'
p428
aS'Branch dependence: {1L: <ILBranchDependence.FalseBranchDependent: 2>}'
p429
aS"Prefix operands: ['1', '<MLIL_CONST 4>', '<MLIL_SET_VAR 4>', 'ecx_2']"
p430
aS"Postfix operands: ['1', '<MLIL_CONST 4>', '<MLIL_SET_VAR 4>', 'ecx_2']"
p431
aS'SSA form: ecx_2#3 = 1'
p432
aS'Non-SSA formecx_2 = 1'
p433
aS'Expression type: None'
p434
aS'LLIL: goto 3 @ 0x804009a'
p435
aS'Value: <undetermined>'
p436
aS'Possible values: <undetermined>'
p437
aS'Branch dependence: {1L: <ILBranchDependence.FalseBranchDependent: 2>}'
p438
aS"Prefix operands: ['3', '<MLIL_GOTO>']"
p439
aS"Postfix operands: ['3', '<MLIL_GOTO>']"
p440
aS'SSA form: goto 4 @ 0x804009a'
p441
aS'Non-SSA formgoto 3 @ 0x804009a'
p442
aS'Expression type: None'
p443
aS'LLIL: eax#4 = edx#0'
p444
aS'Value: <undetermined>'
p445
aS'Possible values: <undetermined>'
p446
aS'Branch dependence: {1L: <ILBranchDependence.FalseBranchDependent: 2>}'
p447
aS"Prefix operands: ['<MLIL_SET_VAR 4>', '<MLIL_VAR 4>', 'arg2', 'eax']"
p448
aS"Postfix operands: ['<MLIL_SET_VAR 4>', '<MLIL_VAR 4>', 'arg2', 'eax']"
p449
aS'SSA form: eax#4 = arg2#0'
p450
aS'Non-SSA formeax = arg2'
p451
aS'Expression type: None'
p452
aS'LLIL: ecx#4 = 2'
p453
aS'Value: <undetermined>'
p454
aS'Possible values: <undetermined>'
p455
aS'Branch dependence: {1L: <ILBranchDependence.FalseBranchDependent: 2>}'
p456
aS"Prefix operands: ['2', '<MLIL_CONST 4>', '<MLIL_SET_VAR 4>', 'ecx_3']"
p457
aS"Postfix operands: ['2', '<MLIL_CONST 4>', '<MLIL_SET_VAR 4>', 'ecx_3']"
p458
aS'SSA form: ecx_3#4 = 2'
p459
aS'Non-SSA formecx_3 = 2'
p460
aS'Expression type: None'
p461
aS'LLIL: goto 3'
p462
aS'Value: <undetermined>'
p463
aS'Possible values: <undetermined>'
p464
aS'Branch dependence: {1L: <ILBranchDependence.FalseBranchDependent: 2>}'
p465
aS"Prefix operands: ['3', '<MLIL_GOTO>']"
p466
aS"Postfix operands: ['3', '<MLIL_GOTO>']"
p467
aS'SSA form: goto 4 @ 0x804009a'
p468
aS'Non-SSA formgoto 3 @ 0x804009a'
p469
asS'test_function_symbol_names'
p470
(lp471
S'Symbol: _start SymbolType.FunctionSymbol 0x8040094L'
p472
asS'test_BinaryView'
p473
(lp474
S"BV Type: ('Elf32_SectionHeader', <type: struct>)"
p475
aS"BV Type: ('Elf32_Ident', <type: struct>)"
p476
aS"BV Type: ('Elf32_Header', <type: struct>)"
p477
aS"BV Type: ('Elf32_ProgramHeader', <type: struct>)"
p478
aS"BV Type: ('va_list', <type: void*>)"
p479
aS'BV segment: <segment: 0x8040000-0x80400e9, r-x>'
p480
aS'BV segment: <segment: 0x80410e9-0x80410fb, rw->'
p481
aS'BV allocated range: <0x8040000-0x80400e9>'
p482
aS'BV allocated range: <0x80410e9-0x80410fb>'
p483
aS'Session Data: {}'
p484
aS'BV data var: 134479872'
p485
aS'BV data var: 134479924'
p486
aS'BV data var: 134480055'
p487
aS'BV Entry function: <func: x86@0x8040094>'
p488
aS'BV function: <func: x86@0x8040094>'
p489
aS'BV entry point: 0x8040094L'
p490
aS'BV start: 0x8040000L'
p491
aS'BV length: 0x10fb'
p492
asS'test_available_types'
p493
(lp494
S'Available Type: Raw'
p495
aS'Available Type: ELF'
p496
asS'test_function_basic_blocks'
p497
(lp498
S'basic block <block: x86@0x8040094-0x804009a> start: 0x8040094L end: 0x804009aL undetermined outgoing edges: False'
p499
aS'basic block <block: x86@0x8040094-0x804009a> test get self: <block: x86@0x8040094-0x804009a>'
p500
aS'basic block <block: x86@0x80400b6-0x80400b7> start: 0x80400b6L end: 0x80400b7L undetermined outgoing edges: True'
p501
aS'basic block <block: x86@0x80400b6-0x80400b7> test get self: <block: x86@0x80400b6-0x80400b7>'
p502
aS'basic block <block: x86@0x804009a-0x80400a4> start: 0x804009aL end: 0x80400a4L undetermined outgoing edges: False'
p503
aS'basic block <block: x86@0x804009a-0x80400a4> test get self: <block: x86@0x804009a-0x80400a4>'
p504
aS'basic block <block: x86@0x80400a4-0x80400ad> start: 0x80400a4L end: 0x80400adL undetermined outgoing edges: False'
p505
aS"basic block <block: x86@0x80400a4-0x80400ad> function annotation: ['{Case ', '0x0', ', ', '0x2', ', ', '0x4', '}']"
p506
aS'basic block <block: x86@0x80400a4-0x80400ad> test get self: <block: x86@0x80400a4-0x80400ad>'
p507
aS'basic block <block: x86@0x80400ad-0x80400b6> start: 0x80400adL end: 0x80400b6L undetermined outgoing edges: False'
p508
aS"basic block <block: x86@0x80400ad-0x80400b6> function annotation: ['{Case ', '0x1', ', ', '0x3', ', ', '0x5', '}']"
p509
aS'basic block <block: x86@0x80400ad-0x80400b6> test get self: <block: x86@0x80400ad-0x80400b6>'
p510
asS'test_function_med_il_basic_blocks'
p511
(lp512
S'MLIL basic block <block: x86@0x0-0x2> start: 0x0L end: 0x2L outgoing_edges: 2'
p513
aS'MLIL basic block <block: x86@0x2-0x3> start: 0x2L end: 0x3L outgoing_edges: 0'
p514
aS'MLIL basic block <block: x86@0x3-0x5> start: 0x3L end: 0x5L outgoing_edges: 2'
p515
aS'MLIL basic block <block: x86@0x5-0x8> start: 0x5L end: 0x8L outgoing_edges: 1'
p516
aS'MLIL basic block <block: x86@0x8-0xb> start: 0x8L end: 0xbL outgoing_edges: 1'
p517
asS'test_symbols'
p518
(lp519
S'Symbol: __elf_header'
p520
aS'Symbol: __elf_program_headers'
p521
aS'Symbol: _start'
p522
aS'Symbol: jump_table_80400b7'
p523
asS'test_low_il_instructions'
p524
(lp525
S'MLIL: eax = [arg3].d'
p526
aS'Mapped MLIL: arg1 = [arg3].d'
p527
aS'Value: <undetermined>'
p528
aS'Possible Values: <undetermined>'
p529
aS'Prefix operands: [<LLIL_SET_REG 4>, eax, <LLIL_LOAD 4>, <LLIL_REG 4>, esi]'
p530
aS'Postfix operands: [eax, esi, <LLIL_REG 4>, <LLIL_LOAD 4>, <LLIL_SET_REG 4>]'
p531
aS'SSA form: eax#1 = [esi#0].d @ mem#0'
p532
aS'Non-SSA form: eax = [esi].d'
p533
aS'MLIL: None'
p534
aS'Mapped MLIL: if (arg1.al u> 5) then 2 @ 0x80400b6 else 3 @ 0x804009a'
p535
aS'Value: <undetermined>'
p536
aS'Possible Values: <undetermined>'
p537
aS'Prefix operands: [<LLIL_IF>, <LLIL_CMP_UGT 1>, <LLIL_REG 1>, al, <LLIL_CONST 1>, 5L, 2L, 3L]'
p538
aS'Postfix operands: [al, <LLIL_REG 1>, 5L, <LLIL_CONST 1>, <LLIL_CMP_UGT 1>, 2L, 3L, <LLIL_IF>]'
p539
aS'SSA form: if (eax#1.al u> 5) then 2 @ 0x80400b6 else 3 @ 0x804009a'
p540
aS'Non-SSA form: if (al u> 5) then 2 @ 0x80400b6 else 3 @ 0x804009a'
p541
aS'MLIL: None'
p542
aS'Mapped MLIL: return '
p543
aS'Value: <undetermined>'
p544
aS'Possible Values: <undetermined>'
p545
aS'Prefix operands: [<LLIL_RET>, <LLIL_POP 4>]'
p546
aS'Postfix operands: [<LLIL_POP 4>, <LLIL_RET>]'
p547
aS'SSA form: <return> jump([esp#0].d @ mem#0)'
p548
aS'Non-SSA form: <return> jump(pop)'
p549
aS'MLIL: ecx_1 = zx.d(eax.al)'
p550
aS'Mapped MLIL: ecx = zx.d(arg1.al)'
p551
aS'Value: <undetermined>'
p552
aS'Possible Values: <undetermined>'
p553
aS'Prefix operands: [<LLIL_SET_REG 4>, ecx, <LLIL_ZX 4>, <LLIL_REG 1>, al]'
p554
aS'Postfix operands: [ecx, al, <LLIL_REG 1>, <LLIL_ZX 4>, <LLIL_SET_REG 4>]'
p555
aS'SSA form: ecx#2 = zx.d(eax#2.al)'
p556
aS'Non-SSA form: ecx = zx.d(al)'
p557
aS'MLIL: None'
p558
aS'Mapped MLIL: jump([(ecx << 2) + 0x80400b7].d => 5 @ 0x80400a4, 8 @ 0x80400ad)'
p559
aS'Value: <undetermined>'
p560
aS'Possible Values: <undetermined>'
p561
aS'Prefix operands: [<LLIL_JUMP_TO>, <LLIL_LOAD 4>, <LLIL_ADD 4>, <LLIL_LSL 4>, <LLIL_REG 4>, ecx, <LLIL_CONST 1>, 2L, <LLIL_CONST 4>, 134480055L, [5L, 8L]]'
p562
aS'Postfix operands: [ecx, <LLIL_REG 4>, 2L, <LLIL_CONST 1>, <LLIL_LSL 4>, 134480055L, <LLIL_CONST 4>, <LLIL_ADD 4>, <LLIL_LOAD 4>, [5L, 8L], <LLIL_JUMP_TO>]'
p563
aS'SSA form: jump([(ecx#2 << 2) + 0x80400b7].d @ mem#0 => 7 @ 0x80400a4, 10 @ 0x80400ad)'
p564
aS'Non-SSA form: jump([(ecx << 2) + 0x80400b7].d => 5 @ 0x80400a4, 8 @ 0x80400ad)'
p565
aS'MLIL: eax = arg2'
p566
aS'Mapped MLIL: arg1 = arg2'
p567
aS'Value: <undetermined>'
p568
aS'Possible Values: <undetermined>'
p569
aS'Prefix operands: [<LLIL_SET_REG 4>, eax, <LLIL_REG 4>, edx]'
p570
aS'Postfix operands: [eax, edx, <LLIL_REG 4>, <LLIL_SET_REG 4>]'
p571
aS'SSA form: eax#3 = edx#0'
p572
aS'Non-SSA form: eax = edx'
p573
aS'MLIL: ecx_2 = 1'
p574
aS'Mapped MLIL: ecx = 1'
p575
aS'Value: <undetermined>'
p576
aS'Possible Values: <undetermined>'
p577
aS'Prefix operands: [<LLIL_SET_REG 4>, ecx, <LLIL_CONST 4>, 1L]'
p578
aS'Postfix operands: [ecx, 1L, <LLIL_CONST 4>, <LLIL_SET_REG 4>]'
p579
aS'SSA form: ecx#3 = 1'
p580
aS'Non-SSA form: ecx = 1'
p581
aS'MLIL: None'
p582
aS'Mapped MLIL: goto 3 @ 0x804009a'
p583
aS'Value: <undetermined>'
p584
aS'Possible Values: <undetermined>'
p585
aS'Prefix operands: [<LLIL_GOTO>, 3L]'
p586
aS'Postfix operands: [3L, <LLIL_GOTO>]'
p587
aS'SSA form: goto 3 @ 0x804009a'
p588
aS'Non-SSA form: goto 3 @ 0x804009a'
p589
aS'MLIL: eax = arg2'
p590
aS'Mapped MLIL: arg1 = arg2'
p591
aS'Value: <undetermined>'
p592
aS'Possible Values: <undetermined>'
p593
aS'Prefix operands: [<LLIL_SET_REG 4>, eax, <LLIL_REG 4>, edx]'
p594
aS'Postfix operands: [eax, edx, <LLIL_REG 4>, <LLIL_SET_REG 4>]'
p595
aS'SSA form: eax#4 = edx#0'
p596
aS'Non-SSA form: eax = edx'
p597
aS'MLIL: ecx_3 = 2'
p598
aS'Mapped MLIL: ecx = 2'
p599
aS'Value: <undetermined>'
p600
aS'Possible Values: <undetermined>'
p601
aS'Prefix operands: [<LLIL_SET_REG 4>, ecx, <LLIL_CONST 4>, 2L]'
p602
aS'Postfix operands: [ecx, 2L, <LLIL_CONST 4>, <LLIL_SET_REG 4>]'
p603
aS'SSA form: ecx#4 = 2'
p604
aS'Non-SSA form: ecx = 2'
p605
aS'MLIL: None'
p606
aS'Mapped MLIL: goto 3 @ 0x804009a'
p607
aS'Value: <undetermined>'
p608
aS'Possible Values: <undetermined>'
p609
aS'Prefix operands: [<LLIL_GOTO>, 3L]'
p610
aS'Postfix operands: [3L, <LLIL_GOTO>]'
p611
aS'SSA form: goto 3'
p612
aS'Non-SSA form: goto 3'
p613
asS'test_med_il_vars'
p614
(lp615
S'SSA var definition: None'
p616
aS'SSA var uses: [0L]'
p617
aS'SSA var value: <entry esi>'
p618
aS'SSA var possible values: <entry esi>'
p619
aS'SSA var version: <bound method MediumLevelILInstruction.get_ssa_var_version of <il: eax#1 = [arg3#0].d @ mem#0>>'
p620
aS'SSA var definition: 0'
p621
aS'SSA var uses: [1L, 2L, 3L]'
p622
aS'SSA var value: <undetermined>'
p623
aS'SSA var possible values: <undetermined>'
p624
aS'SSA var version: <bound method MediumLevelILInstruction.get_ssa_var_version of <il: eax#1 = [arg3#0].d @ mem#0>>'
p625
aS'SSA var definition: 0'
p626
aS'SSA var uses: [1L, 2L, 3L]'
p627
aS'SSA var value: <undetermined>'
p628
aS'SSA var possible values: <undetermined>'
p629
aS'SSA var version: <bound method MediumLevelILInstruction.get_ssa_var_version of <il: if (eax#1.al u> 5) then 2 @ 0x80400b6 else 3 @ 0x0>>'
p630
aS'SSA var definition: 3'
p631
aS'SSA var uses: [3L]'
p632
aS'SSA var value: <undetermined>'
p633
aS'SSA var possible values: <unsigned ranges: [<range: 0x0 to 0xff>]>'
p634
aS'SSA var version: <bound method MediumLevelILInstruction.get_ssa_var_version of <il: ecx_1#2 = zx.d(eax#2.al)>>'
p635
aS'SSA var definition: 3'
p636
aS'SSA var uses: [4L]'
p637
aS'SSA var value: <undetermined>'
p638
aS'SSA var possible values: <unsigned ranges: [<range: 0x0 to 0xff>]>'
p639
aS'SSA var version: <bound method MediumLevelILInstruction.get_ssa_var_version of <il: ecx_1#2 = zx.d(eax#2.al)>>'
p640
aS'SSA var definition: 3'
p641
aS'SSA var uses: [4L]'
p642
aS'SSA var value: <undetermined>'
p643
aS'SSA var possible values: <unsigned ranges: [<range: 0x0 to 0xff>]>'
p644
aS'SSA var version: <bound method MediumLevelILInstruction.get_ssa_var_version of <il: jump([(ecx_1#2 << 2) + 0x80400b7].d @ mem#0 => 8 @ 0x80400a4, 11 @ 0x80400ad)>>'
p645
aS'SSA var definition: None'
p646
aS'SSA var uses: [5L, 8L]'
p647
aS'SSA var value: <entry edx>'
p648
aS'SSA var possible values: <entry edx>'
p649
aS'SSA var version: <bound method MediumLevelILInstruction.get_ssa_var_version of <il: eax#3 = arg2#0>>'
p650
aS'SSA var definition: 5'
p651
aS'SSA var uses: [3L]'
p652
aS'SSA var value: <entry edx>'
p653
aS'SSA var possible values: <entry edx>'
p654
aS'SSA var version: <bound method MediumLevelILInstruction.get_ssa_var_version of <il: eax#3 = arg2#0>>'
p655
aS'SSA var definition: 6'
p656
aS'SSA var uses: [3L]'
p657
aS'SSA var value: <const 0x1>'
p658
aS'SSA var possible values: <const 0x1>'
p659
aS'SSA var version: <bound method MediumLevelILInstruction.get_ssa_var_version of <il: ecx_2#3 = 1>>'
p660
aS'SSA var definition: None'
p661
aS'SSA var uses: [5L, 8L]'
p662
aS'SSA var value: <entry edx>'
p663
aS'SSA var possible values: <entry edx>'
p664
aS'SSA var version: <bound method MediumLevelILInstruction.get_ssa_var_version of <il: eax#4 = arg2#0>>'
p665
aS'SSA var definition: 8'
p666
aS'SSA var uses: [3L]'
p667
aS'SSA var value: <entry edx>'
p668
aS'SSA var possible values: <entry edx>'
p669
aS'SSA var version: <bound method MediumLevelILInstruction.get_ssa_var_version of <il: eax#4 = arg2#0>>'
p670
aS'SSA var definition: 9'
p671
aS'SSA var uses: [3L]'
p672
aS'SSA var value: <const 0x2>'
p673
aS'SSA var possible values: <const 0x2>'
p674
aS'SSA var version: <bound method MediumLevelILInstruction.get_ssa_var_version of <il: ecx_3#4 = 2>>'
p675
as.