(dp0
S'test_function_can_return'
p1
(lp2
S'function name: _main type: SymbolType.DataSymbol address: 0x1e5bL can_return: True'
p3
aS'function name: hang type: SymbolType.DataSymbol address: 0x1ff4L can_return: False'
p4
aS'function name: addfunc type: SymbolType.DataSymbol address: 0x1ff7L can_return: True'
p5
asS'test_function_stack'
p6
(lp7
S'Stack position 0: var_8'
p8
aS'Stack position 1: var_4'
p9
aS'Stack position 2: var_4_1'
p10
aS'Stack position 3: var_4_2'
p11
aS'Stack position 4: __return_addr'
p12
aS'Stack position 5: testautovar'
p13
aS'Stack content sample: <undetermined>'
p14
aS'Stack content range sample: <undetermined>'
p15
aS'Sample stack var: None'
p16
aS'Stack position 0: __return_addr'
p17
aS'Stack position 1: testautovar'
p18
aS'Stack content sample: <undetermined>'
p19
aS'Stack content range sample: <undetermined>'
p20
aS'Sample stack var: None'
p21
aS'Stack position 0: __return_addr'
p22
aS'Stack position 1: testautovar'
p23
aS'Stack position 2: arg2'
p24
aS'Stack content sample: <undetermined>'
p25
aS'Stack content range sample: <undetermined>'
p26
aS'Sample stack var: None'
p27
asS'test_strings'
p28
(lp29
S'String: __PAGEZERO type: StringType.AsciiString at: 0x1024L'
p30
aS'String: __TEXT type: StringType.AsciiString at: 0x105cL'
p31
aS'String: __text type: StringType.AsciiString at: 0x108cL'
p32
aS'String: __TEXT type: StringType.AsciiString at: 0x109cL'
p33
aS'String: __DATA type: StringType.AsciiString at: 0x10d8L'
p34
aS'String: __data type: StringType.AsciiString at: 0x1108L'
p35
aS'String: __DATA type: StringType.AsciiString at: 0x1118L'
p36
aS'String: __LINKEDIT type: StringType.AsciiString at: 0x1154L'
p37
aS'String: /usr/lib/dyld type: StringType.AsciiString at: 0x1228L'
p38
aS'String: /usr/lib/libSystem.B.dylib type: StringType.AsciiString at: 0x12a0L'
p39
aS'String: _mh_execute_header type: StringType.AsciiString at: 0x3007L'
p40
aS'String: !main type: StringType.AsciiString at: 0x301aL'
p41
aS'String: __mh_execute_header type: StringType.AsciiString at: 0x30feL'
p42
aS'String: _main type: StringType.AsciiString at: 0x3112L'
p43
aS'String: dyld_stub_binder type: StringType.AsciiString at: 0x3118L'
p44
aS'String: geteip type: StringType.AsciiString at: 0x3129L'
p45
aS'String: jumptable type: StringType.AsciiString at: 0x3130L'
p46
aS'String: zerojump type: StringType.AsciiString at: 0x313aL'
p47
aS'String: onejump type: StringType.AsciiString at: 0x3143L'
p48
aS'String: cont type: StringType.AsciiString at: 0x314bL'
p49
aS'String: nohang type: StringType.AsciiString at: 0x3150L'
p50
aS'String: nextcheck type: StringType.AsciiString at: 0x3157L'
p51
aS'String: conddone type: StringType.AsciiString at: 0x3161L'
p52
aS'String: overflow type: StringType.AsciiString at: 0x316aL'
p53
aS'String: syscallexit type: StringType.AsciiString at: 0x3173L'
p54
aS'String: badjump type: StringType.AsciiString at: 0x317fL'
p55
aS'String: hang type: StringType.AsciiString at: 0x3187L'
p56
aS'String: addfunc type: StringType.AsciiString at: 0x318cL'
p57
aS'String: _data type: StringType.AsciiString at: 0x3194L'
p58
asS'test_function_low_il_basic_blocks'
p59
(lp60
S'LLIL basic block <block: x86@0x0-0x48> start: 0x0L end: 0x48L outgoing edges: 2'
p61
aS'LLIL basic block <block: x86@0x48-0x4a> start: 0x48L end: 0x4aL outgoing edges: 0'
p62
aS'LLIL basic block <block: x86@0x4a-0x4d> start: 0x4aL end: 0x4dL outgoing edges: 1'
p63
aS'LLIL basic block <block: x86@0x4d-0x4f> start: 0x4dL end: 0x4fL outgoing edges: 1'
p64
aS'LLIL basic block <block: x86@0x4f-0x57> start: 0x4fL end: 0x57L outgoing edges: 2'
p65
aS'LLIL basic block <block: x86@0x57-0x58> start: 0x57L end: 0x58L outgoing edges: 2'
p66
aS'LLIL basic block <block: x86@0x58-0x5a> start: 0x58L end: 0x5aL outgoing edges: 0'
p67
aS'LLIL basic block <block: x86@0x5a-0x5f> start: 0x5aL end: 0x5fL outgoing edges: 2'
p68
aS'LLIL basic block <block: x86@0x5f-0x60> start: 0x5fL end: 0x60L outgoing edges: 2'
p69
aS'LLIL basic block <block: x86@0x60-0x63> start: 0x60L end: 0x63L outgoing edges: 2'
p70
aS'LLIL basic block <block: x86@0x63-0x64> start: 0x63L end: 0x64L outgoing edges: 0'
p71
aS'LLIL basic block <block: x86@0x64-0x65> start: 0x64L end: 0x65L outgoing edges: 2'
p72
aS'LLIL basic block <block: x86@0x65-0x66> start: 0x65L end: 0x66L outgoing edges: 1'
p73
aS'LLIL basic block <block: x86@0x66-0x6b> start: 0x66L end: 0x6bL outgoing edges: 0'
p74
aS'LLIL basic block <block: x86@0x6b-0x6d> start: 0x6bL end: 0x6dL outgoing edges: 0'
p75
aS'LLIL basic block <block: x86@0x6d-0x6e> start: 0x6dL end: 0x6eL outgoing edges: 2'
p76
aS'LLIL basic block <block: x86@0x6e-0x6f> start: 0x6eL end: 0x6fL outgoing edges: 2'
p77
aS'LLIL basic block <block: x86@0x6f-0x70> start: 0x6fL end: 0x70L outgoing edges: 2'
p78
aS'LLIL basic block <block: x86@0x70-0x71> start: 0x70L end: 0x71L outgoing edges: 2'
p79
aS'LLIL basic block <block: x86@0x71-0x72> start: 0x71L end: 0x72L outgoing edges: 2'
p80
aS'LLIL basic block <block: x86@0x72-0x73> start: 0x72L end: 0x73L outgoing edges: 2'
p81
aS'LLIL basic block <block: x86@0x73-0x74> start: 0x73L end: 0x74L outgoing edges: 2'
p82
aS'LLIL basic block <block: x86@0x74-0x76> start: 0x74L end: 0x76L outgoing edges: 1'
p83
aS'LLIL basic block <block: x86@0x0-0x1> start: 0x0L end: 0x1L outgoing edges: 0'
p84
aS'LLIL basic block <block: x86@0x0-0x3> start: 0x0L end: 0x3L outgoing edges: 0'
p85
asS'test_functions_attributes'
p86
(lp87
S'Function _main var: var_8'
p88
aS'Function _main var: var_4'
p89
aS'Function _main var: var_4_1'
p90
aS'Function _main var: var_4_2'
p91
aS'Function _main var: testautovar'
p92
aS'Function _main var: eax'
p93
aS'Function _main var: eax_1'
p94
aS'Function _main var: eax_2'
p95
aS'Function _main var: eax_3'
p96
aS'Function _main var: eax_4'
p97
aS'Function _main var: eax_5'
p98
aS'Function _main var: eax_6'
p99
aS'Function _main var: eax_7'
p100
aS'Function _main var: eax_8'
p101
aS'Function _main var: eax_9'
p102
aS'Function _main var: eax_10'
p103
aS'Function _main var: eax_11'
p104
aS'Function _main var: eax_12'
p105
aS'Function _main var: eax_13'
p106
aS'Function _main var: eax_14'
p107
aS'Function _main var: eax_15'
p108
aS'Function _main var: eax_16'
p109
aS'Function _main var: eax_17'
p110
aS'Function _main var: eax_18'
p111
aS'Function _main var: eax_19'
p112
aS'Function _main var: eax_20'
p113
aS'Function _main var: eax_21'
p114
aS'Function _main var: eax_22'
p115
aS'Function _main var: eax_23'
p116
aS'Function _main var: eax_24'
p117
aS'Function _main var: eax_25'
p118
aS'Function _main var: eax_26'
p119
aS'Function _main var: eax_27'
p120
aS'Function _main var: eax_28'
p121
aS'Function _main var: eax_29'
p122
aS'Function _main var: eax_30'
p123
aS'Function _main var: eax_31'
p124
aS'Function _main var: eax_32'
p125
aS'Function _main var: eax_33'
p126
aS'Function _main var: eax_34'
p127
aS'Function _main var: eax_35'
p128
aS'Function _main var: eax_36'
p129
aS'Function _main var: eax_37'
p130
aS'Function _main var: eax_38'
p131
aS'Function _main var: eax_39'
p132
aS'Function _main var: eax_40'
p133
aS'Function _main var: ecx'
p134
aS'Function _main var: ecx_1'
p135
aS'Function _main var: ecx_2'
p136
aS'Function _main var: edx'
p137
aS'Function _main var: edx_1'
p138
aS'Function _main var: edx_2'
p139
aS'Function _main var: edx_3'
p140
aS'Function _main var: edx_4'
p141
aS'Function _main var: edx_5'
p142
aS'Function _main var: edx_6'
p143
aS'Function _main var: ebx'
p144
aS'Function _main var: temp0'
p145
aS'Function _main var: temp0_1'
p146
aS'Function _main var: temp1'
p147
aS'Function _main var: temp1_1'
p148
aS'Function _main var: temp2'
p149
aS'Function _main var: temp3'
p150
aS'Function _main var: o'
p151
aS'Function _main var: flag46'
p152
aS'Function _main var: flag48'
p153
aS'Function _main var: flag51'
p154
aS'Function _main var: flag54'
p155
aS'Function _main var: flag57'
p156
aS'Function _main var: flag60'
p157
aS'Function _main var: flag63'
p158
aS'Function _main indirect branch: <branch x86:0x1f39 -> x86:0x1f43>'
p159
aS'Function _main session data: {}'
p160
aS'Function _main analysis perf length: 1'
p161
aS'Function _main clobbered reg: eax'
p162
aS'Function _main clobbered reg: ecx'
p163
aS'Function _main clobbered reg: edx'
p164
aS'Function _main clobbered reg: ebx'
p165
aS'Function _main explicitly defined type: False'
p166
aS'Function _main needs update: True'
p167
aS'Function _main global pointer value: <undetermined>'
p168
aS'Function _main comment: testcomment _main'
p169
aS'Function _main too large: False'
p170
aS'Function _main analysis skipped: False'
p171
aS'Function _main first ins LLIL: eax = [esp + 4 {testautovar}].d'
p172
aS'Function _main LLIL exit test: []'
p173
aS"Function _main regs read test: ['esp']"
p174
aS"Function _main regs written test: ['eax']"
p175
aS'Function _main stack var test: [<operand 1 ref to testautovar>]'
p176
aS'Function _main constant reference test: [<constant 0x4 size 4>]'
p177
aS'Function _main first ins lifted IL: eax = [esp + 4].d'
p178
aS'Function _main flags read by lifted IL ins: []'
p179
aS'Function _main flags written by lifted IL ins: []'
p180
aS'Function _main create graph: <graph of <func: x86@0x1e5b>>'
p181
aS'Function _main indirect branches test: []'
p182
aS'Function _main test instr highlight: <color: #ff00ff>'
p183
aS'Function _main type token: _main(testautovar)'
p184
aS'Function hang var: testautovar'
p185
aS'Function hang session data: {}'
p186
aS'Function hang analysis perf length: 1'
p187
aS'Function hang explicitly defined type: False'
p188
aS'Function hang needs update: True'
p189
aS'Function hang global pointer value: <undetermined>'
p190
aS'Function hang comment: testcomment hang'
p191
aS'Function hang too large: False'
p192
aS'Function hang analysis skipped: False'
p193
aS'Function hang first ins LLIL: breakpoint'
p194
aS'Function hang LLIL exit test: []'
p195
aS'Function hang regs read test: []'
p196
aS'Function hang regs written test: []'
p197
aS'Function hang stack var test: []'
p198
aS'Function hang constant reference test: []'
p199
aS'Function hang first ins lifted IL: breakpoint'
p200
aS'Function hang flags read by lifted IL ins: []'
p201
aS'Function hang flags written by lifted IL ins: []'
p202
aS'Function hang create graph: <graph of <func: x86@0x1ff4>>'
p203
aS'Function hang indirect branches test: []'
p204
aS'Function hang test instr highlight: <color: #ff00ff>'
p205
aS'Function hang type token: hang() __noreturn'
p206
aS'Function addfunc var: testautovar'
p207
aS'Function addfunc var: arg2'
p208
aS'Function addfunc var: eax'
p209
aS'Function addfunc var: eax_1'
p210
aS'Function addfunc session data: {}'
p211
aS'Function addfunc analysis perf length: 1'
p212
aS'Function addfunc clobbered reg: eax'
p213
aS'Function addfunc explicitly defined type: False'
p214
aS'Function addfunc needs update: True'
p215
aS'Function addfunc global pointer value: <undetermined>'
p216
aS'Function addfunc comment: testcomment addfunc'
p217
aS'Function addfunc too large: False'
p218
aS'Function addfunc analysis skipped: False'
p219
aS'Function addfunc first ins LLIL: eax = [esp + 4 {testautovar}].d'
p220
aS'Function addfunc LLIL exit test: []'
p221
aS"Function addfunc regs read test: ['esp']"
p222
aS"Function addfunc regs written test: ['eax']"
p223
aS'Function addfunc stack var test: [<operand 1 ref to testautovar>]'
p224
aS'Function addfunc constant reference test: [<constant 0x4 size 4>]'
p225
aS'Function addfunc first ins lifted IL: eax = [esp + 4].d'
p226
aS'Function addfunc flags read by lifted IL ins: []'
p227
aS'Function addfunc flags written by lifted IL ins: []'
p228
aS'Function addfunc create graph: <graph of <func: x86@0x1ff7>>'
p229
aS'Function addfunc indirect branches test: []'
p230
aS'Function addfunc test instr highlight: <color: #ff00ff>'
p231
aS'Function addfunc type token: addfunc(testautovar, arg2)'
p232
asS'test_function_starts'
p233
(lp234
S'Function start: 0x1e5bL'
p235
aS'Function start: 0x1ff4L'
p236
aS'Function start: 0x1ff7L'
p237
asS'test_function_llil'
p238
(lp239
S'LLIL basic block: <block: x86@0x0-0x48>'
p240
aS'LLIL basic block: <block: x86@0x48-0x4a>'
p241
aS'LLIL basic block: <block: x86@0x4a-0x4d>'
p242
aS'LLIL basic block: <block: x86@0x4d-0x4f>'
p243
aS'LLIL basic block: <block: x86@0x4f-0x57>'
p244
aS'LLIL basic block: <block: x86@0x57-0x58>'
p245
aS'LLIL basic block: <block: x86@0x58-0x5a>'
p246
aS'LLIL basic block: <block: x86@0x5a-0x5f>'
p247
aS'LLIL basic block: <block: x86@0x5f-0x60>'
p248
aS'LLIL basic block: <block: x86@0x60-0x63>'
p249
aS'LLIL basic block: <block: x86@0x63-0x64>'
p250
aS'LLIL basic block: <block: x86@0x64-0x65>'
p251
aS'LLIL basic block: <block: x86@0x65-0x66>'
p252
aS'LLIL basic block: <block: x86@0x66-0x6b>'
p253
aS'LLIL basic block: <block: x86@0x6b-0x6d>'
p254
aS'LLIL basic block: <block: x86@0x6d-0x6e>'
p255
aS'LLIL basic block: <block: x86@0x6e-0x6f>'
p256
aS'LLIL basic block: <block: x86@0x6f-0x70>'
p257
aS'LLIL basic block: <block: x86@0x70-0x71>'
p258
aS'LLIL basic block: <block: x86@0x71-0x72>'
p259
aS'LLIL basic block: <block: x86@0x72-0x73>'
p260
aS'LLIL basic block: <block: x86@0x73-0x74>'
p261
aS'LLIL basic block: <block: x86@0x74-0x76>'
p262
aS'LLIL instruction: eax = [esp + 4 {arg1}].d'
p263
aS'LLIL instruction: edx:eax = sx.q(eax)'
p264
aS'LLIL instruction: flag:d = 1'
p265
aS'LLIL instruction: ecx = [0x2000].d'
p266
aS'LLIL instruction: ecx = ecx + 1'
p267
aS'LLIL instruction: [0x2000].d = ecx'
p268
aS'LLIL instruction: push(ecx)'
p269
aS'LLIL instruction: eax = pop'
p270
aS'LLIL instruction: eax = eax + 0xa'
p271
aS'LLIL instruction: [0x2000].d = [0x2000].d + eax'
p272
aS'LLIL instruction: push(0x1e80)'
p273
aS'LLIL instruction: ebx = pop'
p274
aS'LLIL instruction: temp2.d = eax'
p275
aS'LLIL instruction: eax = temp2.d + ebx'
p276
aS'LLIL instruction: flag:c = temp2.d + ebx u< temp2.d'
p277
aS'LLIL instruction: flag:c = flag:c ^ 0x1'
p278
aS'LLIL instruction: push(flagbit.d(flag:flag63, 0xb) | (flagbit.d(flag:flag60, 0xa) | (flagbit.d(flag:flag57, 7) | (flagbit.d(flag:flag54, 6) | (flagbit.d(flag:flag51, 4) | (flagbit.d(flag:flag48, 2) | flagbit.d(flag:flag46, 0)))))))'
p279
aS'LLIL instruction: eax = pop'
p280
aS'LLIL instruction: [0x2000].d = [0x2000].d + eax'
p281
aS'LLIL instruction: flag:c = 1'
p282
aS'LLIL instruction: eax = adc.d(eax, eax, flag:c)'
p283
aS'LLIL instruction: ebx = eax'
p284
aS'LLIL instruction: flag:c = 1'
p285
aS'LLIL instruction: eax = sbb.d(eax, eax, flag:c)'
p286
aS'LLIL instruction: eax = eax - ebx'
p287
aS'LLIL instruction: eax = eax & 0xffff'
p288
aS'LLIL instruction: eax = eax | 0x5555'
p289
aS'LLIL instruction: eax = eax ^ 0x8888'
p290
aS'LLIL instruction: eax = eax << 0x10'
p291
aS'LLIL instruction: [0x2000].d = [0x2000].d + eax'
p292
aS'LLIL instruction: eax = eax s>> 4'
p293
aS'LLIL instruction: eax = eax u>> 8'
p294
aS'LLIL instruction: eax = rol.d(eax, 0x10)'
p295
aS'LLIL instruction: [0x2000].d = [0x2000].d + eax'
p296
aS'LLIL instruction: eax = ror.d(eax, 8)'
p297
aS'LLIL instruction: flag:c = 0'
p298
aS'LLIL instruction: eax = rrc.d(eax, 1, flag:c)'
p299
aS'LLIL instruction: flag:c = 1'
p300
aS'LLIL instruction: eax = rlc.d(eax, 1, flag:c)'
p301
aS'LLIL instruction: [0x2000].d = [0x2000].d + eax'
p302
aS'LLIL instruction: al = 0x10'
p303
aS'LLIL instruction: al = al + ah'
p304
aS'LLIL instruction: [0x2000].d = [0x2000].d + eax'
p305
aS'LLIL instruction: eax = eax * eax'
p306
aS'LLIL instruction: ecx = 5'
p307
aS'LLIL instruction: edx:eax = mulu.dp.d(eax, ecx)'
p308
aS'LLIL instruction: ecx = edx'
p309
aS'LLIL instruction: edx:eax = muls.dp.d(eax, ecx)'
p310
aS'LLIL instruction: ecx = 9'
p311
aS'LLIL instruction: temp0.d = divs.dp.d(edx:eax, ecx)'
p312
aS'LLIL instruction: temp1.d = mods.dp.d(edx:eax, ecx)'
p313
aS'LLIL instruction: eax = temp0.d'
p314
aS'LLIL instruction: edx = temp1.d'
p315
aS'LLIL instruction: [0x2000].d = [0x2000].d + edx'
p316
aS'LLIL instruction: edx:eax = sx.q(eax)'
p317
aS'LLIL instruction: ecx = 3'
p318
aS'LLIL instruction: temp0.d = divu.dp.d(edx:eax, ecx)'
p319
aS'LLIL instruction: temp1.d = modu.dp.d(edx:eax, ecx)'
p320
aS'LLIL instruction: eax = temp0.d'
p321
aS'LLIL instruction: edx = temp1.d'
p322
aS'LLIL instruction: [0x2000].d = [0x2000].d + edx'
p323
aS'LLIL instruction: [0x2000].d = [0x2000].d + eax'
p324
aS'LLIL instruction: eax = neg.d(eax)'
p325
aS'LLIL instruction: eax = not.d(eax)'
p326
aS'LLIL instruction: [0x2000].d = [0x2000].d + eax'
p327
aS'LLIL instruction: eax = sx.d(ax)'
p328
aS'LLIL instruction: edx = zx.d(dx)'
p329
aS'LLIL instruction: eax = eax + edx'
p330
aS'LLIL instruction: [0x2000].d = [0x2000].d + eax'
p331
aS'LLIL instruction: eax = [0x2000].d'
p332
aS'LLIL instruction: eax = eax & 0x10'
p333
aS'LLIL instruction: if (eax == 0) then 72 @ 0x1fed else 74 @ 0x1f2d'
p334
aS'LLIL instruction: eax = [0x2000].d'
p335
aS'LLIL instruction: jump(eax)'
p336
aS'LLIL instruction: eax = eax & 0x1'
p337
aS'LLIL instruction: eax = [(eax << 2) + 0x1f3b].d'
p338
aS'LLIL instruction: jump(eax => 77 @ 0x1f43)'
p339
aS'LLIL instruction: eax = eax + 1'
p340
aS'LLIL instruction: goto 79 @ 0x1f4f'
p341
aS'LLIL instruction: [0x2000].d = eax'
p342
aS'LLIL instruction: push(eax)'
p343
aS'LLIL instruction: push(5)'
p344
aS'LLIL instruction: call(0x1ff7)'
p345
aS'LLIL instruction: esp = esp + 8'
p346
aS'LLIL instruction: [0x2000].d = eax'
p347
aS'LLIL instruction: eax = eax & 0x80'
p348
aS'LLIL instruction: if (eax != 0) then 87 @ 0x1f7b else 88 @ 0x1f71'
p349
aS'LLIL instruction: if (eax == 5) then 90 @ 0x1fc2 else 95 @ 0x1f82'
p350
aS'LLIL instruction: call(0x1ff4)'
p351
aS'LLIL instruction: noreturn'
p352
aS'LLIL instruction: [0x2000].d = eax'
p353
aS'LLIL instruction: temp3.d = eax'
p354
aS'LLIL instruction: eax = temp3.d + 8'
p355
aS'LLIL instruction: flag:o = add_overflow(temp3.d, 8)'
p356
aS'LLIL instruction: if (not(flag:o)) then 96 @ 0x1fd0 else 99 @ 0x1fce'
p357
aS'LLIL instruction: if (eax != 8) then 100 @ 0x1f8e else 101 @ 0x1f84'
p358
aS'LLIL instruction: [0x2000].d = eax'
p359
aS'LLIL instruction: eax = eax & 0x1'
p360
aS'LLIL instruction: if (eax == 0) then 102 @ 0x1fdf else 107 @ 0x1fdc'
p361
aS'LLIL instruction: trap(6)'
p362
aS'LLIL instruction: if (eax s< 0xc) then 90 @ 0x1fc2 else 109 @ 0x1f95'
p363
aS'LLIL instruction: goto 90 @ 0x1fc2'
p364
aS'LLIL instruction: eax = 1'
p365
aS'LLIL instruction: push(0)'
p366
aS'LLIL instruction: push(eax)'
p367
aS'LLIL instruction: syscall'
p368
aS'LLIL instruction: <return> jump(pop)'
p369
aS'LLIL instruction: eax = 0'
p370
aS'LLIL instruction: <return> jump(pop)'
p371
aS'LLIL instruction: if (eax u< 0xe) then 90 @ 0x1fc2 else 110 @ 0x1f9c'
p372
aS'LLIL instruction: if (eax s<= 0x12) then 90 @ 0x1fc2 else 111 @ 0x1fa3'
p373
aS'LLIL instruction: if (eax u<= 0x16) then 90 @ 0x1fc2 else 112 @ 0x1faa'
p374
aS'LLIL instruction: if (eax s>= 0x28) then 90 @ 0x1fc2 else 113 @ 0x1fb1'
p375
aS'LLIL instruction: if (eax u>= 0x24) then 90 @ 0x1fc2 else 114 @ 0x1fb8'
p376
aS'LLIL instruction: if (eax s> 0x20) then 90 @ 0x1fc2 else 115 @ 0x1fbf'
p377
aS'LLIL instruction: if (eax u> 0x1b) then 90 @ 0x1fc2 else 116 @ 0x1fc1'
p378
aS'LLIL instruction: eax = eax + 1'
p379
aS'LLIL instruction: goto 90 @ 0x1fc2'
p380
aS'MLIL basic block: <block: x86@0x0-0x3c>'
p381
aS'MLIL basic block: <block: x86@0x3c-0x3e>'
p382
aS'MLIL basic block: <block: x86@0x3e-0x41>'
p383
aS'MLIL basic block: <block: x86@0x41-0x43>'
p384
aS'MLIL basic block: <block: x86@0x43-0x49>'
p385
aS'MLIL basic block: <block: x86@0x49-0x4a>'
p386
aS'MLIL basic block: <block: x86@0x4a-0x4c>'
p387
aS'MLIL basic block: <block: x86@0x4c-0x51>'
p388
aS'MLIL basic block: <block: x86@0x51-0x52>'
p389
aS'MLIL basic block: <block: x86@0x52-0x55>'
p390
aS'MLIL basic block: <block: x86@0x55-0x56>'
p391
aS'MLIL basic block: <block: x86@0x56-0x57>'
p392
aS'MLIL basic block: <block: x86@0x57-0x58>'
p393
aS'MLIL basic block: <block: x86@0x58-0x5a>'
p394
aS'MLIL basic block: <block: x86@0x5a-0x5c>'
p395
aS'MLIL basic block: <block: x86@0x5c-0x5d>'
p396
aS'MLIL basic block: <block: x86@0x5d-0x5e>'
p397
aS'MLIL basic block: <block: x86@0x5e-0x5f>'
p398
aS'MLIL basic block: <block: x86@0x5f-0x60>'
p399
aS'MLIL basic block: <block: x86@0x60-0x61>'
p400
aS'MLIL basic block: <block: x86@0x61-0x62>'
p401
aS'MLIL basic block: <block: x86@0x62-0x63>'
p402
aS'MLIL basic block: <block: x86@0x63-0x65>'
p403
aS'MLIL instruction: eax_40 = arg1'
p404
aS'MLIL instruction: edx:eax = sx.q(eax_40)'
p405
aS'MLIL instruction: ecx = [0x2000].d'
p406
aS'MLIL instruction: ecx_1 = ecx + 1'
p407
aS'MLIL instruction: [0x2000].d = ecx_1'
p408
aS'MLIL instruction: var_4 = ecx_1'
p409
aS'MLIL instruction: eax_1 = var_4'
p410
aS'MLIL instruction: eax_2 = eax_1 + 0xa'
p411
aS'MLIL instruction: [0x2000].d = [0x2000].d + eax_2'
p412
aS'MLIL instruction: temp2 = eax_2'
p413
aS'MLIL instruction: eax_3 = temp2 + 0x1e80'
p414
aS'MLIL instruction: var_4_1 = (flag63 ? 1 : 0 << 0xb) | ((flag60 ? 1 : 0 << 0xa) | ((flag57 ? 1 : 0 << 7) | ((flag54 ? 1 : 0 << 6) | ((flag51 ? 1 : 0 << 4) | ((flag48 ? 1 : 0 << 2) | (flag46 ? 1 : 0 << 0))))))'
p415
aS'MLIL instruction: eax_4 = var_4_1'
p416
aS'MLIL instruction: [0x2000].d = [0x2000].d + eax_4'
p417
aS'MLIL instruction: eax_5 = adc.d(eax_4, eax_4, true)'
p418
aS'MLIL instruction: ebx = eax_5'
p419
aS'MLIL instruction: eax_6 = sbb.d(eax_5, eax_5, true)'
p420
aS'MLIL instruction: eax_7 = eax_6 - ebx'
p421
aS'MLIL instruction: eax_8 = eax_7 & 0xffff'
p422
aS'MLIL instruction: eax_9 = eax_8 | 0x5555'
p423
aS'MLIL instruction: eax_10 = eax_9 ^ 0x8888'
p424
aS'MLIL instruction: eax_11 = eax_10 << 0x10'
p425
aS'MLIL instruction: [0x2000].d = [0x2000].d + eax_11'
p426
aS'MLIL instruction: eax_12 = eax_11 s>> 4'
p427
aS'MLIL instruction: eax_13 = eax_12 u>> 8'
p428
aS'MLIL instruction: eax_14 = rol.d(eax_13, 0x10)'
p429
aS'MLIL instruction: [0x2000].d = [0x2000].d + eax_14'
p430
aS'MLIL instruction: eax_15 = ror.d(eax_14, 8)'
p431
aS'MLIL instruction: eax_16 = rrc.d(eax_15, 1, false)'
p432
aS'MLIL instruction: eax_17 = rrc.d(eax_16, 1, true)'
p433
aS'MLIL instruction: [0x2000].d = [0x2000].d + eax_17'
p434
aS'MLIL instruction: eax_17.al = 0x10'
p435
aS'MLIL instruction: eax_17.al = eax_17.al + eax_17.ah'
p436
aS'MLIL instruction: [0x2000].d = [0x2000].d + eax_17'
p437
aS'MLIL instruction: eax_18 = eax_17 * eax_17'
p438
aS'MLIL instruction: edx_1:eax_19 = mulu.dp.d(eax_18, 5)'
p439
aS'MLIL instruction: ecx_2 = edx_1'
p440
aS'MLIL instruction: edx_2:eax_20 = muls.dp.d(eax_19, ecx_2)'
p441
aS'MLIL instruction: temp0 = divs.dp.d(edx_2:eax_20, 9)'
p442
aS'MLIL instruction: temp1 = mods.dp.d(edx_2:eax_20, 9)'
p443
aS'MLIL instruction: eax_21 = temp0'
p444
aS'MLIL instruction: edx_3 = temp1'
p445
aS'MLIL instruction: [0x2000].d = [0x2000].d + edx_3'
p446
aS'MLIL instruction: edx_4:eax_22 = sx.q(eax_21)'
p447
aS'MLIL instruction: temp0_1 = divu.dp.d(edx_4:eax_22, 3)'
p448
aS'MLIL instruction: temp1_1 = modu.dp.d(edx_4:eax_22, 3)'
p449
aS'MLIL instruction: eax_23 = temp0_1'
p450
aS'MLIL instruction: edx_5 = temp1_1'
p451
aS'MLIL instruction: [0x2000].d = [0x2000].d + edx_5'
p452
aS'MLIL instruction: [0x2000].d = [0x2000].d + eax_23'
p453
aS'MLIL instruction: eax_24 = neg.d(eax_23)'
p454
aS'MLIL instruction: eax_25 = not.d(eax_24)'
p455
aS'MLIL instruction: [0x2000].d = [0x2000].d + eax_25'
p456
aS'MLIL instruction: eax_26 = sx.d(eax_25.ax)'
p457
aS'MLIL instruction: edx_6 = zx.d(edx_5.dx)'
p458
aS'MLIL instruction: eax_27 = eax_26 + edx_6'
p459
aS'MLIL instruction: [0x2000].d = [0x2000].d + eax_27'
p460
aS'MLIL instruction: eax_28 = [0x2000].d'
p461
aS'MLIL instruction: eax_29 = eax_28 & 0x10'
p462
aS'MLIL instruction: if (eax_29 == 0) then 60 @ 0x1fed else 62 @ 0x1f2d'
p463
aS'MLIL instruction: eax_39 = [0x2000].d'
p464
aS'MLIL instruction: jump(eax_39)'
p465
aS'MLIL instruction: eax_30 = eax_29 & 1'
p466
aS'MLIL instruction: eax_31 = [(eax_30 << 2) + 0x1f3b].d'
p467
aS'MLIL instruction: jump(eax_31 => 65 @ 0x1f43)'
p468
aS'MLIL instruction: eax_32 = eax_31 + 1'
p469
aS'MLIL instruction: goto 67 @ 0x1f4f'
p470
aS'MLIL instruction: [0x2000].d = eax_32'
p471
aS'MLIL instruction: var_4_2 = eax_32'
p472
aS'MLIL instruction: eax_33 = 0x1ff7(5, var_4_2)'
p473
aS'MLIL instruction: [0x2000].d = eax_33'
p474
aS'MLIL instruction: eax_34 = eax_33 & 0x80'
p475
aS'MLIL instruction: if (eax_34 != 0) then 73 @ 0x1f7b else 74 @ 0x1f71'
p476
aS'MLIL instruction: if (eax_34 == 5) then 76 @ 0x1fc2 else 81 @ 0x1f82'
p477
aS'MLIL instruction: 0x1ff4()'
p478
aS'MLIL instruction: noreturn'
p479
aS'MLIL instruction: [0x2000].d = eax_34'
p480
aS'MLIL instruction: temp3 = eax_34'
p481
aS'MLIL instruction: eax_35 = temp3 + 8'
p482
aS'MLIL instruction: o = add_overflow(temp3, 8)'
p483
aS'MLIL instruction: if (not(o)) then 82 @ 0x1fd0 else 85 @ 0x1fce'
p484
aS'MLIL instruction: if (eax_34 != 8) then 86 @ 0x1f8e else 87 @ 0x1f84'
p485
aS'MLIL instruction: [0x2000].d = eax_35'
p486
aS'MLIL instruction: eax_36 = eax_35 & 1'
p487
aS'MLIL instruction: if (eax_36 == 0) then 88 @ 0x1fea else 90 @ 0x1fdc'
p488
aS'MLIL instruction: trap(6)'
p489
aS'MLIL instruction: if (eax_34 s< 0xc) then 76 @ 0x1fc2 else 92 @ 0x1f95'
p490
aS'MLIL instruction: goto 76 @ 0x1fc2'
p491
aS'MLIL instruction: eax_38 = syscall(1, 0)'
p492
aS'MLIL instruction: return eax_38'
p493
aS'MLIL instruction: eax_37 = 0'
p494
aS'MLIL instruction: return 0'
p495
aS'MLIL instruction: if (eax_34 u< 0xe) then 76 @ 0x1fc2 else 93 @ 0x1f9c'
p496
aS'MLIL instruction: if (eax_34 s<= 0x12) then 76 @ 0x1fc2 else 94 @ 0x1fa3'
p497
aS'MLIL instruction: if (eax_34 u<= 0x16) then 76 @ 0x1fc2 else 95 @ 0x1faa'
p498
aS'MLIL instruction: if (eax_34 s>= 0x28) then 76 @ 0x1fc2 else 96 @ 0x1fb1'
p499
aS'MLIL instruction: if (eax_34 u>= 0x24) then 76 @ 0x1fc2 else 97 @ 0x1fb8'
p500
aS'MLIL instruction: if (eax_34 s> 0x20) then 76 @ 0x1fc2 else 98 @ 0x1fbf'
p501
aS'MLIL instruction: if (eax_34 u> 0x1b) then 76 @ 0x1fc2 else 99 @ 0x1fc1'
p502
aS'MLIL instruction: eax_34 = eax_34 + 1'
p503
aS'MLIL instruction: goto 76 @ 0x1fc2'
p504
aS'Instructiin: 0x1e5bL: mov     eax, dword [esp+0x4]'
p505
aS'Instructiin: 0x1e5fL: cdq     '
p506
aS'Instructiin: 0x1e60L: std     '
p507
aS'Instructiin: 0x1e61L: mov     ecx, dword [0x2000]'
p508
aS'Instructiin: 0x1e67L: inc     ecx'
p509
aS'Instructiin: 0x1e68L: mov     dword [0x2000], ecx'
p510
aS'Instructiin: 0x1e6eL: push    ecx'
p511
aS'Instructiin: 0x1e6fL: pop     eax'
p512
aS'Instructiin: 0x1e70L: add     eax, 0xa'
p513
aS'Instructiin: 0x1e75L: add     dword [0x2000], eax'
p514
aS'Instructiin: 0x1e7bL: call    $+5'
p515
aS'Instructiin: 0x1e80L: pop     ebx'
p516
aS'Instructiin: 0x1e81L: add     eax, ebx'
p517
aS'Instructiin: 0x1e83L: cmc     '
p518
aS'Instructiin: 0x1e84L: pushfd  '
p519
aS'Instructiin: 0x1e85L: pop     eax'
p520
aS'Instructiin: 0x1e86L: add     dword [0x2000], eax'
p521
aS'Instructiin: 0x1e8cL: stc     '
p522
aS'Instructiin: 0x1e8dL: adc     eax, eax'
p523
aS'Instructiin: 0x1e8fL: mov     ebx, eax'
p524
aS'Instructiin: 0x1e91L: stc     '
p525
aS'Instructiin: 0x1e92L: sbb     eax, eax'
p526
aS'Instructiin: 0x1e94L: sub     eax, ebx'
p527
aS'Instructiin: 0x1e96L: and     eax, 0xffff'
p528
aS'Instructiin: 0x1e9bL: or      eax, 0x5555'
p529
aS'Instructiin: 0x1ea0L: xor     eax, 0x8888'
p530
aS'Instructiin: 0x1ea5L: shl     eax, 0x10'
p531
aS'Instructiin: 0x1ea8L: add     dword [0x2000], eax'
p532
aS'Instructiin: 0x1eaeL: sar     eax, 0x4'
p533
aS'Instructiin: 0x1eb1L: shr     eax, 0x8'
p534
aS'Instructiin: 0x1eb4L: rol     eax, 0x10'
p535
aS'Instructiin: 0x1eb7L: add     dword [0x2000], eax'
p536
aS'Instructiin: 0x1ebdL: ror     eax, 0x8'
p537
aS'Instructiin: 0x1ec0L: clc     '
p538
aS'Instructiin: 0x1ec1L: rcr     eax, 0x1'
p539
aS'Instructiin: 0x1ec3L: stc     '
p540
aS'Instructiin: 0x1ec4L: rcl     eax, 0x1'
p541
aS'Instructiin: 0x1ec6L: add     dword [0x2000], eax'
p542
aS'Instructiin: 0x1eccL: mov     al, 0x10'
p543
aS'Instructiin: 0x1eceL: add     al, ah'
p544
aS'Instructiin: 0x1ed0L: add     dword [0x2000], eax'
p545
aS'Instructiin: 0x1ed6L: imul    eax, eax'
p546
aS'Instructiin: 0x1ed9L: mov     ecx, 0x5'
p547
aS'Instructiin: 0x1edeL: mul     ecx'
p548
aS'Instructiin: 0x1ee0L: mov     ecx, edx'
p549
aS'Instructiin: 0x1ee2L: imul    ecx'
p550
aS'Instructiin: 0x1ee4L: mov     ecx, 0x9'
p551
aS'Instructiin: 0x1ee9L: idiv    ecx'
p552
aS'Instructiin: 0x1eebL: add     dword [0x2000], edx'
p553
aS'Instructiin: 0x1ef1L: cdq     '
p554
aS'Instructiin: 0x1ef2L: mov     ecx, 0x3'
p555
aS'Instructiin: 0x1ef7L: div     ecx'
p556
aS'Instructiin: 0x1ef9L: add     dword [0x2000], edx'
p557
aS'Instructiin: 0x1effL: add     dword [0x2000], eax'
p558
aS'Instructiin: 0x1f05L: neg     eax'
p559
aS'Instructiin: 0x1f07L: not     eax'
p560
aS'Instructiin: 0x1f09L: add     dword [0x2000], eax'
p561
aS'Instructiin: 0x1f0fL: movsx   eax, ax'
p562
aS'Instructiin: 0x1f12L: movzx   edx, dx'
p563
aS'Instructiin: 0x1f15L: add     eax, edx'
p564
aS'Instructiin: 0x1f17L: add     dword [0x2000], eax'
p565
aS'Instructiin: 0x1f1dL: mov     eax, dword [0x2000]'
p566
aS'Instructiin: 0x1f22L: and     eax, 0x10'
p567
aS'Instructiin: 0x1f27L: je      0x1fed'
p568
aS'Instructiin: 0x1fedL: mov     eax, dword [0x2000]'
p569
aS'Instructiin: 0x1ff2L: jmp     eax'
p570
aS'Instructiin: 0x1f2dL: and     eax, 0x1'
p571
aS'Instructiin: 0x1f32L: mov     eax, dword [eax*4+0x1f3b]'
p572
aS'Instructiin: 0x1f39L: jmp     eax'
p573
aS'Instructiin: 0x1f43L: inc     eax'
p574
aS'Instructiin: 0x1f44L: jmp     0x1f4f'
p575
aS'Instructiin: 0x1f4fL: mov     dword [0x2000], eax'
p576
aS'Instructiin: 0x1f54L: push    eax'
p577
aS'Instructiin: 0x1f55L: push    0x5'
p578
aS'Instructiin: 0x1f5aL: call    0x1ff7'
p579
aS'Instructiin: 0x1f5fL: add     esp, 0x8'
p580
aS'Instructiin: 0x1f65L: mov     dword [0x2000], eax'
p581
aS'Instructiin: 0x1f6aL: and     eax, 0x80'
p582
aS'Instructiin: 0x1f6fL: jne     0x1f76'
p583
aS'Instructiin: 0x1f76L: cmp     eax, 0x5'
p584
aS'Instructiin: 0x1f7bL: je      0x1fc2'
p585
aS'Instructiin: 0x1f71L: call    0x1ff4'
p586
aS'Instructiin: 0x1fc2L: mov     dword [0x2000], eax'
p587
aS'Instructiin: 0x1fc7L: add     eax, 0x8'
p588
aS'Instructiin: 0x1fccL: jno     0x1fd0'
p589
aS'Instructiin: 0x1f7dL: cmp     eax, 0x8'
p590
aS'Instructiin: 0x1f82L: jne     0x1f89'
p591
aS'Instructiin: 0x1fd0L: mov     dword [0x2000], eax'
p592
aS'Instructiin: 0x1fd5L: and     eax, 0x1'
p593
aS'Instructiin: 0x1fdaL: je      0x1fdf'
p594
aS'Instructiin: 0x1fceL: ud2     '
p595
aS'Instructiin: 0x1f89L: cmp     eax, 0xc'
p596
aS'Instructiin: 0x1f8eL: jl      0x1fc2'
p597
aS'Instructiin: 0x1f84L: jmp     0x1fc2'
p598
aS'Instructiin: 0x1fdfL: mov     eax, 0x1'
p599
aS'Instructiin: 0x1fe4L: push    0x0'
p600
aS'Instructiin: 0x1fe9L: push    eax'
p601
aS'Instructiin: 0x1feaL: int     0x80'
p602
aS'Instructiin: 0x1fecL: retn    '
p603
aS'Instructiin: 0x1fdcL: xor     eax, eax'
p604
aS'Instructiin: 0x1fdeL: retn    '
p605
aS'Instructiin: 0x1f90L: cmp     eax, 0xe'
p606
aS'Instructiin: 0x1f95L: jb      0x1fc2'
p607
aS'Instructiin: 0x1f97L: cmp     eax, 0x12'
p608
aS'Instructiin: 0x1f9cL: jle     0x1fc2'
p609
aS'Instructiin: 0x1f9eL: cmp     eax, 0x16'
p610
aS'Instructiin: 0x1fa3L: jbe     0x1fc2'
p611
aS'Instructiin: 0x1fa5L: cmp     eax, 0x28'
p612
aS'Instructiin: 0x1faaL: jge     0x1fc2'
p613
aS'Instructiin: 0x1facL: cmp     eax, 0x24'
p614
aS'Instructiin: 0x1fb1L: jae     0x1fc2'
p615
aS'Instructiin: 0x1fb3L: cmp     eax, 0x20'
p616
aS'Instructiin: 0x1fb8L: jg      0x1fc2'
p617
aS'Instructiin: 0x1fbaL: cmp     eax, 0x1b'
p618
aS'Instructiin: 0x1fbfL: ja      0x1fc2'
p619
aS'Instructiin: 0x1fc1L: inc     eax'
p620
aS'LLIL basic block: <block: x86@0x0-0x1>'
p621
aS'LLIL instruction: breakpoint'
p622
aS'MLIL basic block: <block: x86@0x0-0x1>'
p623
aS'MLIL instruction: breakpoint'
p624
aS'Instructiin: 0x1ff4L: int3    '
p625
aS'Instructiin: 0x1ff5L: jmp     0x1ff4'
p626
aS'LLIL basic block: <block: x86@0x0-0x3>'
p627
aS'LLIL instruction: eax = [esp + 4 {arg1}].d'
p628
aS'LLIL instruction: eax = eax + [esp + 8 {arg2}].d'
p629
aS'LLIL instruction: <return> jump(pop)'
p630
aS'MLIL basic block: <block: x86@0x0-0x3>'
p631
aS'MLIL instruction: eax_1 = arg1'
p632
aS'MLIL instruction: eax = eax_1 + arg2'
p633
aS'MLIL instruction: return eax'
p634
aS'Instructiin: 0x1ff7L: mov     eax, dword [esp+0x4]'
p635
aS'Instructiin: 0x1ffbL: add     eax, dword [esp+0x8]'
p636
aS'Instructiin: 0x1fffL: retn    '
p637
asS'test_low_il_ssa'
p638
(lp639
S'Reg ch SSA definition: None'
p640
aS'Reg ch SSA uses: []'
p641
aS'Reg ch SSA value: <undetermined>'
p642
aS'Reg gs SSA definition: None'
p643
aS'Reg gs SSA uses: []'
p644
aS'Reg gs SSA value: <undetermined>'
p645
aS'Reg xmm4 SSA definition: None'
p646
aS'Reg xmm4 SSA uses: []'
p647
aS'Reg xmm4 SSA value: <undetermined>'
p648
aS'Reg x87_r3 SSA definition: None'
p649
aS'Reg x87_r3 SSA uses: []'
p650
aS'Reg x87_r3 SSA value: <undetermined>'
p651
aS'Reg cl SSA definition: None'
p652
aS'Reg cl SSA uses: []'
p653
aS'Reg cl SSA value: <undetermined>'
p654
aS'Reg mm5 SSA definition: None'
p655
aS'Reg mm5 SSA uses: []'
p656
aS'Reg mm5 SSA value: <undetermined>'
p657
aS'Reg ah SSA definition: None'
p658
aS'Reg ah SSA uses: []'
p659
aS'Reg ah SSA value: <undetermined>'
p660
aS'Reg mm7 SSA definition: None'
p661
aS'Reg mm7 SSA uses: []'
p662
aS'Reg mm7 SSA value: <undetermined>'
p663
aS'Reg edi SSA definition: None'
p664
aS'Reg edi SSA uses: []'
p665
aS'Reg edi SSA value: <undetermined>'
p666
aS'Reg mm1 SSA definition: None'
p667
aS'Reg mm1 SSA uses: []'
p668
aS'Reg mm1 SSA value: <undetermined>'
p669
aS'Reg al SSA definition: None'
p670
aS'Reg al SSA uses: []'
p671
aS'Reg al SSA value: <undetermined>'
p672
aS'Reg mm3 SSA definition: None'
p673
aS'Reg mm3 SSA uses: []'
p674
aS'Reg mm3 SSA value: <undetermined>'
p675
aS'Reg mm2 SSA definition: None'
p676
aS'Reg mm2 SSA uses: []'
p677
aS'Reg mm2 SSA value: <undetermined>'
p678
aS'Reg gsbase SSA definition: None'
p679
aS'Reg gsbase SSA uses: []'
p680
aS'Reg gsbase SSA value: <undetermined>'
p681
aS'Reg cx SSA definition: None'
p682
aS'Reg cx SSA uses: []'
p683
aS'Reg cx SSA value: <undetermined>'
p684
aS'Reg ebp SSA definition: None'
p685
aS'Reg ebp SSA uses: []'
p686
aS'Reg ebp SSA value: <undetermined>'
p687
aS'Reg cs SSA definition: None'
p688
aS'Reg cs SSA uses: []'
p689
aS'Reg cs SSA value: <undetermined>'
p690
aS'Reg ax SSA definition: None'
p691
aS'Reg ax SSA uses: []'
p692
aS'Reg ax SSA value: <undetermined>'
p693
aS'Reg edx SSA definition: 1'
p694
aS'Reg edx SSA uses: []'
p695
aS'Reg edx SSA value: <undetermined>'
p696
aS'Reg ebx SSA definition: 11'
p697
aS'Reg ebx SSA uses: [13L, 14L]'
p698
aS'Reg ebx SSA value: <undetermined>'
p699
aS'Reg es SSA definition: None'
p700
aS'Reg es SSA uses: []'
p701
aS'Reg es SSA value: <undetermined>'
p702
aS'Reg x87_r2 SSA definition: None'
p703
aS'Reg x87_r2 SSA uses: []'
p704
aS'Reg x87_r2 SSA value: <undetermined>'
p705
aS'Reg esp SSA definition: 6'
p706
aS'Reg esp SSA uses: [7L]'
p707
aS'Reg esp SSA value: <stack frame offset -0x4>'
p708
aS'Reg mm4 SSA definition: None'
p709
aS'Reg mm4 SSA uses: []'
p710
aS'Reg mm4 SSA value: <undetermined>'
p711
aS'Reg top SSA definition: None'
p712
aS'Reg top SSA uses: []'
p713
aS'Reg top SSA value: <undetermined>'
p714
aS'Reg x87_r0 SSA definition: None'
p715
aS'Reg x87_r0 SSA uses: []'
p716
aS'Reg x87_r0 SSA value: <undetermined>'
p717
aS'Reg st4 SSA definition: None'
p718
aS'Reg st4 SSA uses: []'
p719
aS'Reg st4 SSA value: <undetermined>'
p720
aS'Reg st5 SSA definition: None'
p721
aS'Reg st5 SSA uses: []'
p722
aS'Reg st5 SSA value: <undetermined>'
p723
aS'Reg st6 SSA definition: None'
p724
aS'Reg st6 SSA uses: []'
p725
aS'Reg st6 SSA value: <undetermined>'
p726
aS'Reg st7 SSA definition: None'
p727
aS'Reg st7 SSA uses: []'
p728
aS'Reg st7 SSA value: <undetermined>'
p729
aS'Reg st0 SSA definition: None'
p730
aS'Reg st0 SSA uses: []'
p731
aS'Reg st0 SSA value: <undetermined>'
p732
aS'Reg st1 SSA definition: None'
p733
aS'Reg st1 SSA uses: []'
p734
aS'Reg st1 SSA value: <undetermined>'
p735
aS'Reg st2 SSA definition: None'
p736
aS'Reg st2 SSA uses: []'
p737
aS'Reg st2 SSA value: <undetermined>'
p738
aS'Reg st3 SSA definition: None'
p739
aS'Reg st3 SSA uses: []'
p740
aS'Reg st3 SSA value: <undetermined>'
p741
aS'Reg x87_r6 SSA definition: None'
p742
aS'Reg x87_r6 SSA uses: []'
p743
aS'Reg x87_r6 SSA value: <undetermined>'
p744
aS'Reg esi SSA definition: None'
p745
aS'Reg esi SSA uses: []'
p746
aS'Reg esi SSA value: <undetermined>'
p747
aS'Reg x87_r7 SSA definition: None'
p748
aS'Reg x87_r7 SSA uses: []'
p749
aS'Reg x87_r7 SSA value: <undetermined>'
p750
aS'Reg dl SSA definition: None'
p751
aS'Reg dl SSA uses: []'
p752
aS'Reg dl SSA value: <undetermined>'
p753
aS'Reg mm6 SSA definition: None'
p754
aS'Reg mm6 SSA uses: []'
p755
aS'Reg mm6 SSA value: <undetermined>'
p756
aS'Reg x87_r4 SSA definition: None'
p757
aS'Reg x87_r4 SSA uses: []'
p758
aS'Reg x87_r4 SSA value: <undetermined>'
p759
aS'Reg dh SSA definition: None'
p760
aS'Reg dh SSA uses: []'
p761
aS'Reg dh SSA value: <undetermined>'
p762
aS'Reg di SSA definition: None'
p763
aS'Reg di SSA uses: []'
p764
aS'Reg di SSA value: <undetermined>'
p765
aS'Reg bl SSA definition: None'
p766
aS'Reg bl SSA uses: []'
p767
aS'Reg bl SSA value: <undetermined>'
p768
aS'Reg x87_r5 SSA definition: None'
p769
aS'Reg x87_r5 SSA uses: []'
p770
aS'Reg x87_r5 SSA value: <undetermined>'
p771
aS'Reg bh SSA definition: None'
p772
aS'Reg bh SSA uses: []'
p773
aS'Reg bh SSA value: <undetermined>'
p774
aS'Reg mm0 SSA definition: None'
p775
aS'Reg mm0 SSA uses: []'
p776
aS'Reg mm0 SSA value: <undetermined>'
p777
aS'Reg xmm2 SSA definition: None'
p778
aS'Reg xmm2 SSA uses: []'
p779
aS'Reg xmm2 SSA value: <undetermined>'
p780
aS'Reg eax SSA definition: 0'
p781
aS'Reg eax SSA uses: [1L]'
p782
aS'Reg eax SSA value: <undetermined>'
p783
aS'Reg xmm0 SSA definition: None'
p784
aS'Reg xmm0 SSA uses: []'
p785
aS'Reg xmm0 SSA value: <undetermined>'
p786
aS'Reg xmm1 SSA definition: None'
p787
aS'Reg xmm1 SSA uses: []'
p788
aS'Reg xmm1 SSA value: <undetermined>'
p789
aS'Reg bp SSA definition: None'
p790
aS'Reg bp SSA uses: []'
p791
aS'Reg bp SSA value: <undetermined>'
p792
aS'Reg xmm7 SSA definition: None'
p793
aS'Reg xmm7 SSA uses: []'
p794
aS'Reg xmm7 SSA value: <undetermined>'
p795
aS'Reg dx SSA definition: None'
p796
aS'Reg dx SSA uses: []'
p797
aS'Reg dx SSA value: <undetermined>'
p798
aS'Reg xmm5 SSA definition: None'
p799
aS'Reg xmm5 SSA uses: []'
p800
aS'Reg xmm5 SSA value: <undetermined>'
p801
aS'Reg bx SSA definition: None'
p802
aS'Reg bx SSA uses: []'
p803
aS'Reg bx SSA value: <undetermined>'
p804
aS'Reg ds SSA definition: None'
p805
aS'Reg ds SSA uses: []'
p806
aS'Reg ds SSA value: <undetermined>'
p807
aS'Reg ecx SSA definition: 3'
p808
aS'Reg ecx SSA uses: [4L]'
p809
aS'Reg ecx SSA value: <undetermined>'
p810
aS'Reg xmm3 SSA definition: None'
p811
aS'Reg xmm3 SSA uses: []'
p812
aS'Reg xmm3 SSA value: <undetermined>'
p813
aS'Reg ss SSA definition: None'
p814
aS'Reg ss SSA uses: []'
p815
aS'Reg ss SSA value: <undetermined>'
p816
aS'Reg sp SSA definition: None'
p817
aS'Reg sp SSA uses: []'
p818
aS'Reg sp SSA value: <undetermined>'
p819
aS'Reg fs SSA definition: None'
p820
aS'Reg fs SSA uses: []'
p821
aS'Reg fs SSA value: <undetermined>'
p822
aS'Reg si SSA definition: None'
p823
aS'Reg si SSA uses: []'
p824
aS'Reg si SSA value: <undetermined>'
p825
aS'Reg x87_r1 SSA definition: None'
p826
aS'Reg x87_r1 SSA uses: []'
p827
aS'Reg x87_r1 SSA value: <undetermined>'
p828
aS'Reg xmm6 SSA definition: None'
p829
aS'Reg xmm6 SSA uses: []'
p830
aS'Reg xmm6 SSA value: <undetermined>'
p831
aS'Reg fsbase SSA definition: None'
p832
aS'Reg fsbase SSA uses: []'
p833
aS'Reg fsbase SSA value: <undetermined>'
p834
aS'Flag c SSA uses: [15L]'
p835
aS'Flag c SSA value: <undetermined>'
p836
aS'Flag p SSA uses: []'
p837
aS'Flag p SSA value: <undetermined>'
p838
aS'Flag a SSA uses: []'
p839
aS'Flag a SSA value: <undetermined>'
p840
aS'Flag z SSA uses: []'
p841
aS'Flag z SSA value: <undetermined>'
p842
aS'Flag s SSA uses: []'
p843
aS'Flag s SSA value: <undetermined>'
p844
aS'Flag d SSA uses: []'
p845
aS'Flag d SSA value: <const 0x1>'
p846
aS'Flag o SSA uses: [94L]'
p847
aS'Flag o SSA value: <undetermined>'
p848
aS'Flag c0 SSA uses: []'
p849
aS'Flag c0 SSA value: <undetermined>'
p850
aS'Flag c1 SSA uses: []'
p851
aS'Flag c1 SSA value: <undetermined>'
p852
aS'Flag c2 SSA uses: []'
p853
aS'Flag c2 SSA value: <undetermined>'
p854
aS'Flag c3 SSA uses: []'
p855
aS'Flag c3 SSA value: <undetermined>'
p856
aS'Non-SSA instruction index: 0'
p857
aS'SSA instruction index: 0'
p858
aS'MLIL instruction index: 0'
p859
aS'Mapped MLIL instruction index: 0'
p860
aS'Non-SSA instruction index: 1'
p861
aS'SSA instruction index: 1'
p862
aS'MLIL instruction index: 1'
p863
aS'Mapped MLIL instruction index: 1'
p864
aS'Non-SSA instruction index: 2'
p865
aS'SSA instruction index: 2'
p866
aS'MLIL instruction index: 2'
p867
aS'Mapped MLIL instruction index: 2'
p868
aS'Non-SSA instruction index: 3'
p869
aS'SSA instruction index: 3'
p870
aS'MLIL instruction index: 2'
p871
aS'Mapped MLIL instruction index: 3'
p872
aS'Non-SSA instruction index: 4'
p873
aS'SSA instruction index: 4'
p874
aS'MLIL instruction index: 3'
p875
aS'Mapped MLIL instruction index: 4'
p876
aS'Non-SSA instruction index: 5'
p877
aS'SSA instruction index: 5'
p878
aS'MLIL instruction index: 4'
p879
aS'Mapped MLIL instruction index: 5'
p880
aS'Non-SSA instruction index: 6'
p881
aS'SSA instruction index: 6'
p882
aS'MLIL instruction index: 5'
p883
aS'Mapped MLIL instruction index: 6'
p884
aS'Non-SSA instruction index: 7'
p885
aS'SSA instruction index: 8'
p886
aS'MLIL instruction index: 6'
p887
aS'Mapped MLIL instruction index: 8'
p888
aS'Non-SSA instruction index: 8'
p889
aS'SSA instruction index: 10'
p890
aS'MLIL instruction index: 7'
p891
aS'Mapped MLIL instruction index: 10'
p892
aS'Non-SSA instruction index: 9'
p893
aS'SSA instruction index: 11'
p894
aS'MLIL instruction index: 8'
p895
aS'Mapped MLIL instruction index: 11'
p896
aS'Non-SSA instruction index: 10'
p897
aS'SSA instruction index: 12'
p898
aS'MLIL instruction index: 9'
p899
aS'Mapped MLIL instruction index: 12'
p900
aS'Non-SSA instruction index: 11'
p901
aS'SSA instruction index: 14'
p902
aS'MLIL instruction index: 9'
p903
aS'Mapped MLIL instruction index: 14'
p904
aS'Non-SSA instruction index: 12'
p905
aS'SSA instruction index: 16'
p906
aS'MLIL instruction index: 9'
p907
aS'Mapped MLIL instruction index: 16'
p908
aS'Non-SSA instruction index: 13'
p909
aS'SSA instruction index: 17'
p910
aS'MLIL instruction index: 10'
p911
aS'Mapped MLIL instruction index: 17'
p912
aS'Non-SSA instruction index: 14'
p913
aS'SSA instruction index: 18'
p914
aS'MLIL instruction index: 11'
p915
aS'Mapped MLIL instruction index: 18'
p916
aS'Non-SSA instruction index: 15'
p917
aS'SSA instruction index: 19'
p918
aS'MLIL instruction index: 11'
p919
aS'Mapped MLIL instruction index: 19'
p920
aS'Non-SSA instruction index: 16'
p921
aS'SSA instruction index: 20'
p922
aS'MLIL instruction index: 11'
p923
aS'Mapped MLIL instruction index: 20'
p924
aS'Non-SSA instruction index: 17'
p925
aS'SSA instruction index: 22'
p926
aS'MLIL instruction index: 12'
p927
aS'Mapped MLIL instruction index: 22'
p928
aS'Non-SSA instruction index: 18'
p929
aS'SSA instruction index: 24'
p930
aS'MLIL instruction index: 13'
p931
aS'Mapped MLIL instruction index: 24'
p932
aS'Non-SSA instruction index: 19'
p933
aS'SSA instruction index: 25'
p934
aS'MLIL instruction index: 14'
p935
aS'Mapped MLIL instruction index: 25'
p936
aS'Non-SSA instruction index: 20'
p937
aS'SSA instruction index: 26'
p938
aS'MLIL instruction index: 14'
p939
aS'Mapped MLIL instruction index: 26'
p940
aS'Non-SSA instruction index: 21'
p941
aS'SSA instruction index: 27'
p942
aS'MLIL instruction index: 15'
p943
aS'Mapped MLIL instruction index: 27'
p944
aS'Non-SSA instruction index: 22'
p945
aS'SSA instruction index: 28'
p946
aS'MLIL instruction index: 16'
p947
aS'Mapped MLIL instruction index: 28'
p948
aS'Non-SSA instruction index: 23'
p949
aS'SSA instruction index: 29'
p950
aS'MLIL instruction index: 16'
p951
aS'Mapped MLIL instruction index: 29'
p952
aS'Non-SSA instruction index: 24'
p953
aS'SSA instruction index: 30'
p954
aS'MLIL instruction index: 17'
p955
aS'Mapped MLIL instruction index: 30'
p956
aS'Non-SSA instruction index: 25'
p957
aS'SSA instruction index: 31'
p958
aS'MLIL instruction index: 18'
p959
aS'Mapped MLIL instruction index: 31'
p960
aS'Non-SSA instruction index: 26'
p961
aS'SSA instruction index: 32'
p962
aS'MLIL instruction index: 19'
p963
aS'Mapped MLIL instruction index: 32'
p964
aS'Non-SSA instruction index: 27'
p965
aS'SSA instruction index: 33'
p966
aS'MLIL instruction index: 20'
p967
aS'Mapped MLIL instruction index: 33'
p968
aS'Non-SSA instruction index: 28'
p969
aS'SSA instruction index: 34'
p970
aS'MLIL instruction index: 21'
p971
aS'Mapped MLIL instruction index: 34'
p972
aS'Non-SSA instruction index: 29'
p973
aS'SSA instruction index: 35'
p974
aS'MLIL instruction index: 22'
p975
aS'Mapped MLIL instruction index: 35'
p976
aS'Non-SSA instruction index: 30'
p977
aS'SSA instruction index: 36'
p978
aS'MLIL instruction index: 23'
p979
aS'Mapped MLIL instruction index: 36'
p980
aS'Non-SSA instruction index: 31'
p981
aS'SSA instruction index: 37'
p982
aS'MLIL instruction index: 24'
p983
aS'Mapped MLIL instruction index: 37'
p984
aS'Non-SSA instruction index: 32'
p985
aS'SSA instruction index: 38'
p986
aS'MLIL instruction index: 25'
p987
aS'Mapped MLIL instruction index: 38'
p988
aS'Non-SSA instruction index: 33'
p989
aS'SSA instruction index: 39'
p990
aS'MLIL instruction index: 26'
p991
aS'Mapped MLIL instruction index: 39'
p992
aS'Non-SSA instruction index: 34'
p993
aS'SSA instruction index: 40'
p994
aS'MLIL instruction index: 27'
p995
aS'Mapped MLIL instruction index: 40'
p996
aS'Non-SSA instruction index: 35'
p997
aS'SSA instruction index: 41'
p998
aS'MLIL instruction index: 28'
p999
aS'Mapped MLIL instruction index: 41'
p1000
aS'Non-SSA instruction index: 36'
p1001
aS'SSA instruction index: 42'
p1002
aS'MLIL instruction index: 28'
p1003
aS'Mapped MLIL instruction index: 42'
p1004
aS'Non-SSA instruction index: 37'
p1005
aS'SSA instruction index: 43'
p1006
aS'MLIL instruction index: 29'
p1007
aS'Mapped MLIL instruction index: 43'
p1008
aS'Non-SSA instruction index: 38'
p1009
aS'SSA instruction index: 44'
p1010
aS'MLIL instruction index: 29'
p1011
aS'Mapped MLIL instruction index: 44'
p1012
aS'Non-SSA instruction index: 39'
p1013
aS'SSA instruction index: 45'
p1014
aS'MLIL instruction index: 30'
p1015
aS'Mapped MLIL instruction index: 45'
p1016
aS'Non-SSA instruction index: 40'
p1017
aS'SSA instruction index: 46'
p1018
aS'MLIL instruction index: 31'
p1019
aS'Mapped MLIL instruction index: 46'
p1020
aS'Non-SSA instruction index: 41'
p1021
aS'SSA instruction index: 47'
p1022
aS'MLIL instruction index: 32'
p1023
aS'Mapped MLIL instruction index: 47'
p1024
aS'Non-SSA instruction index: 42'
p1025
aS'SSA instruction index: 48'
p1026
aS'MLIL instruction index: 33'
p1027
aS'Mapped MLIL instruction index: 48'
p1028
aS'Non-SSA instruction index: 43'
p1029
aS'SSA instruction index: 49'
p1030
aS'MLIL instruction index: 34'
p1031
aS'Mapped MLIL instruction index: 49'
p1032
aS'Non-SSA instruction index: 44'
p1033
aS'SSA instruction index: 50'
p1034
aS'MLIL instruction index: None'
p1035
aS'Mapped MLIL instruction index: 50'
p1036
aS'Non-SSA instruction index: 45'
p1037
aS'SSA instruction index: 51'
p1038
aS'MLIL instruction index: 35'
p1039
aS'Mapped MLIL instruction index: 51'
p1040
aS'Non-SSA instruction index: 46'
p1041
aS'SSA instruction index: 52'
p1042
aS'MLIL instruction index: 36'
p1043
aS'Mapped MLIL instruction index: 52'
p1044
aS'Non-SSA instruction index: 47'
p1045
aS'SSA instruction index: 53'
p1046
aS'MLIL instruction index: 37'
p1047
aS'Mapped MLIL instruction index: 53'
p1048
aS'Non-SSA instruction index: 48'
p1049
aS'SSA instruction index: 54'
p1050
aS'MLIL instruction index: None'
p1051
aS'Mapped MLIL instruction index: 54'
p1052
aS'Non-SSA instruction index: 49'
p1053
aS'SSA instruction index: 55'
p1054
aS'MLIL instruction index: 38'
p1055
aS'Mapped MLIL instruction index: 55'
p1056
aS'Non-SSA instruction index: 50'
p1057
aS'SSA instruction index: 56'
p1058
aS'MLIL instruction index: 39'
p1059
aS'Mapped MLIL instruction index: 56'
p1060
aS'Non-SSA instruction index: 51'
p1061
aS'SSA instruction index: 57'
p1062
aS'MLIL instruction index: 40'
p1063
aS'Mapped MLIL instruction index: 57'
p1064
aS'Non-SSA instruction index: 52'
p1065
aS'SSA instruction index: 58'
p1066
aS'MLIL instruction index: 41'
p1067
aS'Mapped MLIL instruction index: 58'
p1068
aS'Non-SSA instruction index: 53'
p1069
aS'SSA instruction index: 59'
p1070
aS'MLIL instruction index: 42'
p1071
aS'Mapped MLIL instruction index: 59'
p1072
aS'Non-SSA instruction index: 54'
p1073
aS'SSA instruction index: 60'
p1074
aS'MLIL instruction index: 43'
p1075
aS'Mapped MLIL instruction index: 60'
p1076
aS'Non-SSA instruction index: 55'
p1077
aS'SSA instruction index: 61'
p1078
aS'MLIL instruction index: None'
p1079
aS'Mapped MLIL instruction index: 61'
p1080
aS'Non-SSA instruction index: 56'
p1081
aS'SSA instruction index: 62'
p1082
aS'MLIL instruction index: 44'
p1083
aS'Mapped MLIL instruction index: 62'
p1084
aS'Non-SSA instruction index: 57'
p1085
aS'SSA instruction index: 63'
p1086
aS'MLIL instruction index: 45'
p1087
aS'Mapped MLIL instruction index: 63'
p1088
aS'Non-SSA instruction index: 58'
p1089
aS'SSA instruction index: 64'
p1090
aS'MLIL instruction index: 46'
p1091
aS'Mapped MLIL instruction index: 64'
p1092
aS'Non-SSA instruction index: 59'
p1093
aS'SSA instruction index: 65'
p1094
aS'MLIL instruction index: 47'
p1095
aS'Mapped MLIL instruction index: 65'
p1096
aS'Non-SSA instruction index: 60'
p1097
aS'SSA instruction index: 66'
p1098
aS'MLIL instruction index: 48'
p1099
aS'Mapped MLIL instruction index: 66'
p1100
aS'Non-SSA instruction index: 61'
p1101
aS'SSA instruction index: 67'
p1102
aS'MLIL instruction index: 49'
p1103
aS'Mapped MLIL instruction index: 67'
p1104
aS'Non-SSA instruction index: 62'
p1105
aS'SSA instruction index: 68'
p1106
aS'MLIL instruction index: 50'
p1107
aS'Mapped MLIL instruction index: 68'
p1108
aS'Non-SSA instruction index: 63'
p1109
aS'SSA instruction index: 69'
p1110
aS'MLIL instruction index: 51'
p1111
aS'Mapped MLIL instruction index: 69'
p1112
aS'Non-SSA instruction index: 64'
p1113
aS'SSA instruction index: 70'
p1114
aS'MLIL instruction index: 52'
p1115
aS'Mapped MLIL instruction index: 70'
p1116
aS'Non-SSA instruction index: 65'
p1117
aS'SSA instruction index: 71'
p1118
aS'MLIL instruction index: 53'
p1119
aS'Mapped MLIL instruction index: 71'
p1120
aS'Non-SSA instruction index: 66'
p1121
aS'SSA instruction index: 72'
p1122
aS'MLIL instruction index: 54'
p1123
aS'Mapped MLIL instruction index: 72'
p1124
aS'Non-SSA instruction index: 67'
p1125
aS'SSA instruction index: 73'
p1126
aS'MLIL instruction index: 55'
p1127
aS'Mapped MLIL instruction index: 73'
p1128
aS'Non-SSA instruction index: 68'
p1129
aS'SSA instruction index: 74'
p1130
aS'MLIL instruction index: 56'
p1131
aS'Mapped MLIL instruction index: 74'
p1132
aS'Non-SSA instruction index: 69'
p1133
aS'SSA instruction index: 75'
p1134
aS'MLIL instruction index: 57'
p1135
aS'Mapped MLIL instruction index: 75'
p1136
aS'Non-SSA instruction index: 70'
p1137
aS'SSA instruction index: 76'
p1138
aS'MLIL instruction index: 58'
p1139
aS'Mapped MLIL instruction index: 76'
p1140
aS'Non-SSA instruction index: 71'
p1141
aS'SSA instruction index: 77'
p1142
aS'MLIL instruction index: 59'
p1143
aS'Mapped MLIL instruction index: 77'
p1144
aS'Non-SSA instruction index: 72'
p1145
aS'SSA instruction index: 78'
p1146
aS'MLIL instruction index: 60'
p1147
aS'Mapped MLIL instruction index: 78'
p1148
aS'Non-SSA instruction index: 73'
p1149
aS'SSA instruction index: 79'
p1150
aS'MLIL instruction index: 61'
p1151
aS'Mapped MLIL instruction index: 79'
p1152
aS'Non-SSA instruction index: 74'
p1153
aS'SSA instruction index: 80'
p1154
aS'MLIL instruction index: 62'
p1155
aS'Mapped MLIL instruction index: 80'
p1156
aS'Non-SSA instruction index: 75'
p1157
aS'SSA instruction index: 81'
p1158
aS'MLIL instruction index: 63'
p1159
aS'Mapped MLIL instruction index: 81'
p1160
aS'Non-SSA instruction index: 76'
p1161
aS'SSA instruction index: 82'
p1162
aS'MLIL instruction index: 64'
p1163
aS'Mapped MLIL instruction index: 82'
p1164
aS'Non-SSA instruction index: 77'
p1165
aS'SSA instruction index: 83'
p1166
aS'MLIL instruction index: 65'
p1167
aS'Mapped MLIL instruction index: 83'
p1168
aS'Non-SSA instruction index: 78'
p1169
aS'SSA instruction index: 84'
p1170
aS'MLIL instruction index: 66'
p1171
aS'Mapped MLIL instruction index: 84'
p1172
aS'Non-SSA instruction index: 79'
p1173
aS'SSA instruction index: 85'
p1174
aS'MLIL instruction index: 67'
p1175
aS'Mapped MLIL instruction index: 85'
p1176
aS'Non-SSA instruction index: 80'
p1177
aS'SSA instruction index: 86'
p1178
aS'MLIL instruction index: 68'
p1179
aS'Mapped MLIL instruction index: 86'
p1180
aS'Non-SSA instruction index: 81'
p1181
aS'SSA instruction index: 88'
p1182
aS'MLIL instruction index: 69'
p1183
aS'Mapped MLIL instruction index: 88'
p1184
aS'Non-SSA instruction index: 82'
p1185
aS'SSA instruction index: 90'
p1186
aS'MLIL instruction index: 69'
p1187
aS'Mapped MLIL instruction index: 90'
p1188
aS'Non-SSA instruction index: 83'
p1189
aS'SSA instruction index: 91'
p1190
aS'MLIL instruction index: None'
p1191
aS'Mapped MLIL instruction index: 91'
p1192
aS'Non-SSA instruction index: 84'
p1193
aS'SSA instruction index: 92'
p1194
aS'MLIL instruction index: 70'
p1195
aS'Mapped MLIL instruction index: 92'
p1196
aS'Non-SSA instruction index: 85'
p1197
aS'SSA instruction index: 93'
p1198
aS'MLIL instruction index: 71'
p1199
aS'Mapped MLIL instruction index: 93'
p1200
aS'Non-SSA instruction index: 86'
p1201
aS'SSA instruction index: 94'
p1202
aS'MLIL instruction index: 72'
p1203
aS'Mapped MLIL instruction index: 94'
p1204
aS'Non-SSA instruction index: 87'
p1205
aS'SSA instruction index: 95'
p1206
aS'MLIL instruction index: 73'
p1207
aS'Mapped MLIL instruction index: 95'
p1208
aS'Non-SSA instruction index: 88'
p1209
aS'SSA instruction index: 96'
p1210
aS'MLIL instruction index: 74'
p1211
aS'Mapped MLIL instruction index: 96'
p1212
aS'Non-SSA instruction index: 89'
p1213
aS'SSA instruction index: 97'
p1214
aS'MLIL instruction index: 75'
p1215
aS'Mapped MLIL instruction index: 97'
p1216
aS'Non-SSA instruction index: 90'
p1217
aS'SSA instruction index: 99'
p1218
aS'MLIL instruction index: 76'
p1219
aS'Mapped MLIL instruction index: 98'
p1220
aS'Non-SSA instruction index: 91'
p1221
aS'SSA instruction index: 100'
p1222
aS'MLIL instruction index: 77'
p1223
aS'Mapped MLIL instruction index: 99'
p1224
aS'Non-SSA instruction index: 92'
p1225
aS'SSA instruction index: 101'
p1226
aS'MLIL instruction index: 78'
p1227
aS'Mapped MLIL instruction index: 100'
p1228
aS'Non-SSA instruction index: 93'
p1229
aS'SSA instruction index: 102'
p1230
aS'MLIL instruction index: 79'
p1231
aS'Mapped MLIL instruction index: 101'
p1232
aS'Non-SSA instruction index: 94'
p1233
aS'SSA instruction index: 103'
p1234
aS'MLIL instruction index: 80'
p1235
aS'Mapped MLIL instruction index: 102'
p1236
aS'Non-SSA instruction index: 95'
p1237
aS'SSA instruction index: 104'
p1238
aS'MLIL instruction index: 81'
p1239
aS'Mapped MLIL instruction index: 103'
p1240
aS'Non-SSA instruction index: 96'
p1241
aS'SSA instruction index: 105'
p1242
aS'MLIL instruction index: 82'
p1243
aS'Mapped MLIL instruction index: 104'
p1244
aS'Non-SSA instruction index: 97'
p1245
aS'SSA instruction index: 106'
p1246
aS'MLIL instruction index: 83'
p1247
aS'Mapped MLIL instruction index: 105'
p1248
aS'Non-SSA instruction index: 98'
p1249
aS'SSA instruction index: 107'
p1250
aS'MLIL instruction index: 84'
p1251
aS'Mapped MLIL instruction index: 106'
p1252
aS'Non-SSA instruction index: 99'
p1253
aS'SSA instruction index: 108'
p1254
aS'MLIL instruction index: 85'
p1255
aS'Mapped MLIL instruction index: 107'
p1256
aS'Non-SSA instruction index: 100'
p1257
aS'SSA instruction index: 109'
p1258
aS'MLIL instruction index: 86'
p1259
aS'Mapped MLIL instruction index: 108'
p1260
aS'Non-SSA instruction index: 101'
p1261
aS'SSA instruction index: 110'
p1262
aS'MLIL instruction index: 87'
p1263
aS'Mapped MLIL instruction index: 109'
p1264
aS'Non-SSA instruction index: 102'
p1265
aS'SSA instruction index: 111'
p1266
aS'MLIL instruction index: None'
p1267
aS'Mapped MLIL instruction index: 110'
p1268
aS'Non-SSA instruction index: 103'
p1269
aS'SSA instruction index: 112'
p1270
aS'MLIL instruction index: 88'
p1271
aS'Mapped MLIL instruction index: 111'
p1272
aS'Non-SSA instruction index: 104'
p1273
aS'SSA instruction index: 114'
p1274
aS'MLIL instruction index: 88'
p1275
aS'Mapped MLIL instruction index: 113'
p1276
aS'Non-SSA instruction index: 105'
p1277
aS'SSA instruction index: 116'
p1278
aS'MLIL instruction index: 88'
p1279
aS'Mapped MLIL instruction index: 115'
p1280
aS'Non-SSA instruction index: 106'
p1281
aS'SSA instruction index: 117'
p1282
aS'MLIL instruction index: 89'
p1283
aS'Mapped MLIL instruction index: 116'
p1284
aS'Non-SSA instruction index: 107'
p1285
aS'SSA instruction index: 118'
p1286
aS'MLIL instruction index: 90'
p1287
aS'Mapped MLIL instruction index: 117'
p1288
aS'Non-SSA instruction index: 108'
p1289
aS'SSA instruction index: 119'
p1290
aS'MLIL instruction index: 91'
p1291
aS'Mapped MLIL instruction index: 118'
p1292
aS'Non-SSA instruction index: 109'
p1293
aS'SSA instruction index: 120'
p1294
aS'MLIL instruction index: 92'
p1295
aS'Mapped MLIL instruction index: 119'
p1296
aS'Non-SSA instruction index: 110'
p1297
aS'SSA instruction index: 121'
p1298
aS'MLIL instruction index: 93'
p1299
aS'Mapped MLIL instruction index: 120'
p1300
aS'Non-SSA instruction index: 111'
p1301
aS'SSA instruction index: 122'
p1302
aS'MLIL instruction index: 94'
p1303
aS'Mapped MLIL instruction index: 121'
p1304
aS'Non-SSA instruction index: 112'
p1305
aS'SSA instruction index: 123'
p1306
aS'MLIL instruction index: 95'
p1307
aS'Mapped MLIL instruction index: 122'
p1308
aS'Non-SSA instruction index: 113'
p1309
aS'SSA instruction index: 124'
p1310
aS'MLIL instruction index: 96'
p1311
aS'Mapped MLIL instruction index: 123'
p1312
aS'Non-SSA instruction index: 114'
p1313
aS'SSA instruction index: 125'
p1314
aS'MLIL instruction index: 97'
p1315
aS'Mapped MLIL instruction index: 124'
p1316
aS'Non-SSA instruction index: 115'
p1317
aS'SSA instruction index: 126'
p1318
aS'MLIL instruction index: 98'
p1319
aS'Mapped MLIL instruction index: 125'
p1320
aS'Non-SSA instruction index: 116'
p1321
aS'SSA instruction index: 127'
p1322
aS'MLIL instruction index: 99'
p1323
aS'Mapped MLIL instruction index: 126'
p1324
aS'Non-SSA instruction index: 117'
p1325
aS'SSA instruction index: 128'
p1326
aS'MLIL instruction index: 100'
p1327
aS'Mapped MLIL instruction index: 127'
p1328
aS'Reg ch SSA definition: None'
p1329
aS'Reg ch SSA uses: []'
p1330
aS'Reg ch SSA value: <undetermined>'
p1331
aS'Reg gs SSA definition: None'
p1332
aS'Reg gs SSA uses: []'
p1333
aS'Reg gs SSA value: <undetermined>'
p1334
aS'Reg xmm4 SSA definition: None'
p1335
aS'Reg xmm4 SSA uses: []'
p1336
aS'Reg xmm4 SSA value: <undetermined>'
p1337
aS'Reg x87_r3 SSA definition: None'
p1338
aS'Reg x87_r3 SSA uses: []'
p1339
aS'Reg x87_r3 SSA value: <undetermined>'
p1340
aS'Reg cl SSA definition: None'
p1341
aS'Reg cl SSA uses: []'
p1342
aS'Reg cl SSA value: <undetermined>'
p1343
aS'Reg mm5 SSA definition: None'
p1344
aS'Reg mm5 SSA uses: []'
p1345
aS'Reg mm5 SSA value: <undetermined>'
p1346
aS'Reg ah SSA definition: None'
p1347
aS'Reg ah SSA uses: []'
p1348
aS'Reg ah SSA value: <undetermined>'
p1349
aS'Reg mm7 SSA definition: None'
p1350
aS'Reg mm7 SSA uses: []'
p1351
aS'Reg mm7 SSA value: <undetermined>'
p1352
aS'Reg edi SSA definition: None'
p1353
aS'Reg edi SSA uses: []'
p1354
aS'Reg edi SSA value: <undetermined>'
p1355
aS'Reg mm1 SSA definition: None'
p1356
aS'Reg mm1 SSA uses: []'
p1357
aS'Reg mm1 SSA value: <undetermined>'
p1358
aS'Reg al SSA definition: None'
p1359
aS'Reg al SSA uses: []'
p1360
aS'Reg al SSA value: <undetermined>'
p1361
aS'Reg mm3 SSA definition: None'
p1362
aS'Reg mm3 SSA uses: []'
p1363
aS'Reg mm3 SSA value: <undetermined>'
p1364
aS'Reg mm2 SSA definition: None'
p1365
aS'Reg mm2 SSA uses: []'
p1366
aS'Reg mm2 SSA value: <undetermined>'
p1367
aS'Reg gsbase SSA definition: None'
p1368
aS'Reg gsbase SSA uses: []'
p1369
aS'Reg gsbase SSA value: <undetermined>'
p1370
aS'Reg cx SSA definition: None'
p1371
aS'Reg cx SSA uses: []'
p1372
aS'Reg cx SSA value: <undetermined>'
p1373
aS'Reg ebp SSA definition: None'
p1374
aS'Reg ebp SSA uses: []'
p1375
aS'Reg ebp SSA value: <undetermined>'
p1376
aS'Reg cs SSA definition: None'
p1377
aS'Reg cs SSA uses: []'
p1378
aS'Reg cs SSA value: <undetermined>'
p1379
aS'Reg ax SSA definition: None'
p1380
aS'Reg ax SSA uses: []'
p1381
aS'Reg ax SSA value: <undetermined>'
p1382
aS'Reg edx SSA definition: None'
p1383
aS'Reg edx SSA uses: []'
p1384
aS'Reg edx SSA value: <undetermined>'
p1385
aS'Reg ebx SSA definition: None'
p1386
aS'Reg ebx SSA uses: []'
p1387
aS'Reg ebx SSA value: <undetermined>'
p1388
aS'Reg es SSA definition: None'
p1389
aS'Reg es SSA uses: []'
p1390
aS'Reg es SSA value: <undetermined>'
p1391
aS'Reg x87_r2 SSA definition: None'
p1392
aS'Reg x87_r2 SSA uses: []'
p1393
aS'Reg x87_r2 SSA value: <undetermined>'
p1394
aS'Reg esp SSA definition: None'
p1395
aS'Reg esp SSA uses: []'
p1396
aS'Reg esp SSA value: <undetermined>'
p1397
aS'Reg mm4 SSA definition: None'
p1398
aS'Reg mm4 SSA uses: []'
p1399
aS'Reg mm4 SSA value: <undetermined>'
p1400
aS'Reg top SSA definition: None'
p1401
aS'Reg top SSA uses: []'
p1402
aS'Reg top SSA value: <undetermined>'
p1403
aS'Reg x87_r0 SSA definition: None'
p1404
aS'Reg x87_r0 SSA uses: []'
p1405
aS'Reg x87_r0 SSA value: <undetermined>'
p1406
aS'Reg st4 SSA definition: None'
p1407
aS'Reg st4 SSA uses: []'
p1408
aS'Reg st4 SSA value: <undetermined>'
p1409
aS'Reg st5 SSA definition: None'
p1410
aS'Reg st5 SSA uses: []'
p1411
aS'Reg st5 SSA value: <undetermined>'
p1412
aS'Reg st6 SSA definition: None'
p1413
aS'Reg st6 SSA uses: []'
p1414
aS'Reg st6 SSA value: <undetermined>'
p1415
aS'Reg st7 SSA definition: None'
p1416
aS'Reg st7 SSA uses: []'
p1417
aS'Reg st7 SSA value: <undetermined>'
p1418
aS'Reg st0 SSA definition: None'
p1419
aS'Reg st0 SSA uses: []'
p1420
aS'Reg st0 SSA value: <undetermined>'
p1421
aS'Reg st1 SSA definition: None'
p1422
aS'Reg st1 SSA uses: []'
p1423
aS'Reg st1 SSA value: <undetermined>'
p1424
aS'Reg st2 SSA definition: None'
p1425
aS'Reg st2 SSA uses: []'
p1426
aS'Reg st2 SSA value: <undetermined>'
p1427
aS'Reg st3 SSA definition: None'
p1428
aS'Reg st3 SSA uses: []'
p1429
aS'Reg st3 SSA value: <undetermined>'
p1430
aS'Reg x87_r6 SSA definition: None'
p1431
aS'Reg x87_r6 SSA uses: []'
p1432
aS'Reg x87_r6 SSA value: <undetermined>'
p1433
aS'Reg esi SSA definition: None'
p1434
aS'Reg esi SSA uses: []'
p1435
aS'Reg esi SSA value: <undetermined>'
p1436
aS'Reg x87_r7 SSA definition: None'
p1437
aS'Reg x87_r7 SSA uses: []'
p1438
aS'Reg x87_r7 SSA value: <undetermined>'
p1439
aS'Reg dl SSA definition: None'
p1440
aS'Reg dl SSA uses: []'
p1441
aS'Reg dl SSA value: <undetermined>'
p1442
aS'Reg mm6 SSA definition: None'
p1443
aS'Reg mm6 SSA uses: []'
p1444
aS'Reg mm6 SSA value: <undetermined>'
p1445
aS'Reg x87_r4 SSA definition: None'
p1446
aS'Reg x87_r4 SSA uses: []'
p1447
aS'Reg x87_r4 SSA value: <undetermined>'
p1448
aS'Reg dh SSA definition: None'
p1449
aS'Reg dh SSA uses: []'
p1450
aS'Reg dh SSA value: <undetermined>'
p1451
aS'Reg di SSA definition: None'
p1452
aS'Reg di SSA uses: []'
p1453
aS'Reg di SSA value: <undetermined>'
p1454
aS'Reg bl SSA definition: None'
p1455
aS'Reg bl SSA uses: []'
p1456
aS'Reg bl SSA value: <undetermined>'
p1457
aS'Reg x87_r5 SSA definition: None'
p1458
aS'Reg x87_r5 SSA uses: []'
p1459
aS'Reg x87_r5 SSA value: <undetermined>'
p1460
aS'Reg bh SSA definition: None'
p1461
aS'Reg bh SSA uses: []'
p1462
aS'Reg bh SSA value: <undetermined>'
p1463
aS'Reg mm0 SSA definition: None'
p1464
aS'Reg mm0 SSA uses: []'
p1465
aS'Reg mm0 SSA value: <undetermined>'
p1466
aS'Reg xmm2 SSA definition: None'
p1467
aS'Reg xmm2 SSA uses: []'
p1468
aS'Reg xmm2 SSA value: <undetermined>'
p1469
aS'Reg eax SSA definition: None'
p1470
aS'Reg eax SSA uses: []'
p1471
aS'Reg eax SSA value: <undetermined>'
p1472
aS'Reg xmm0 SSA definition: None'
p1473
aS'Reg xmm0 SSA uses: []'
p1474
aS'Reg xmm0 SSA value: <undetermined>'
p1475
aS'Reg xmm1 SSA definition: None'
p1476
aS'Reg xmm1 SSA uses: []'
p1477
aS'Reg xmm1 SSA value: <undetermined>'
p1478
aS'Reg bp SSA definition: None'
p1479
aS'Reg bp SSA uses: []'
p1480
aS'Reg bp SSA value: <undetermined>'
p1481
aS'Reg xmm7 SSA definition: None'
p1482
aS'Reg xmm7 SSA uses: []'
p1483
aS'Reg xmm7 SSA value: <undetermined>'
p1484
aS'Reg dx SSA definition: None'
p1485
aS'Reg dx SSA uses: []'
p1486
aS'Reg dx SSA value: <undetermined>'
p1487
aS'Reg xmm5 SSA definition: None'
p1488
aS'Reg xmm5 SSA uses: []'
p1489
aS'Reg xmm5 SSA value: <undetermined>'
p1490
aS'Reg bx SSA definition: None'
p1491
aS'Reg bx SSA uses: []'
p1492
aS'Reg bx SSA value: <undetermined>'
p1493
aS'Reg ds SSA definition: None'
p1494
aS'Reg ds SSA uses: []'
p1495
aS'Reg ds SSA value: <undetermined>'
p1496
aS'Reg ecx SSA definition: None'
p1497
aS'Reg ecx SSA uses: []'
p1498
aS'Reg ecx SSA value: <undetermined>'
p1499
aS'Reg xmm3 SSA definition: None'
p1500
aS'Reg xmm3 SSA uses: []'
p1501
aS'Reg xmm3 SSA value: <undetermined>'
p1502
aS'Reg ss SSA definition: None'
p1503
aS'Reg ss SSA uses: []'
p1504
aS'Reg ss SSA value: <undetermined>'
p1505
aS'Reg sp SSA definition: None'
p1506
aS'Reg sp SSA uses: []'
p1507
aS'Reg sp SSA value: <undetermined>'
p1508
aS'Reg fs SSA definition: None'
p1509
aS'Reg fs SSA uses: []'
p1510
aS'Reg fs SSA value: <undetermined>'
p1511
aS'Reg si SSA definition: None'
p1512
aS'Reg si SSA uses: []'
p1513
aS'Reg si SSA value: <undetermined>'
p1514
aS'Reg x87_r1 SSA definition: None'
p1515
aS'Reg x87_r1 SSA uses: []'
p1516
aS'Reg x87_r1 SSA value: <undetermined>'
p1517
aS'Reg xmm6 SSA definition: None'
p1518
aS'Reg xmm6 SSA uses: []'
p1519
aS'Reg xmm6 SSA value: <undetermined>'
p1520
aS'Reg fsbase SSA definition: None'
p1521
aS'Reg fsbase SSA uses: []'
p1522
aS'Reg fsbase SSA value: <undetermined>'
p1523
aS'Flag c SSA uses: []'
p1524
aS'Flag c SSA value: <undetermined>'
p1525
aS'Flag p SSA uses: []'
p1526
aS'Flag p SSA value: <undetermined>'
p1527
aS'Flag a SSA uses: []'
p1528
aS'Flag a SSA value: <undetermined>'
p1529
aS'Flag z SSA uses: []'
p1530
aS'Flag z SSA value: <undetermined>'
p1531
aS'Flag s SSA uses: []'
p1532
aS'Flag s SSA value: <undetermined>'
p1533
aS'Flag d SSA uses: []'
p1534
aS'Flag d SSA value: <undetermined>'
p1535
aS'Flag o SSA uses: []'
p1536
aS'Flag o SSA value: <undetermined>'
p1537
aS'Flag c0 SSA uses: []'
p1538
aS'Flag c0 SSA value: <undetermined>'
p1539
aS'Flag c1 SSA uses: []'
p1540
aS'Flag c1 SSA value: <undetermined>'
p1541
aS'Flag c2 SSA uses: []'
p1542
aS'Flag c2 SSA value: <undetermined>'
p1543
aS'Flag c3 SSA uses: []'
p1544
aS'Flag c3 SSA value: <undetermined>'
p1545
aS'Non-SSA instruction index: 0'
p1546
aS'SSA instruction index: 0'
p1547
aS'MLIL instruction index: 0'
p1548
aS'Mapped MLIL instruction index: 0'
p1549
aS'Reg ch SSA definition: None'
p1550
aS'Reg ch SSA uses: []'
p1551
aS'Reg ch SSA value: <undetermined>'
p1552
aS'Reg gs SSA definition: None'
p1553
aS'Reg gs SSA uses: []'
p1554
aS'Reg gs SSA value: <undetermined>'
p1555
aS'Reg xmm4 SSA definition: None'
p1556
aS'Reg xmm4 SSA uses: []'
p1557
aS'Reg xmm4 SSA value: <undetermined>'
p1558
aS'Reg x87_r3 SSA definition: None'
p1559
aS'Reg x87_r3 SSA uses: []'
p1560
aS'Reg x87_r3 SSA value: <undetermined>'
p1561
aS'Reg cl SSA definition: None'
p1562
aS'Reg cl SSA uses: []'
p1563
aS'Reg cl SSA value: <undetermined>'
p1564
aS'Reg mm5 SSA definition: None'
p1565
aS'Reg mm5 SSA uses: []'
p1566
aS'Reg mm5 SSA value: <undetermined>'
p1567
aS'Reg ah SSA definition: None'
p1568
aS'Reg ah SSA uses: []'
p1569
aS'Reg ah SSA value: <undetermined>'
p1570
aS'Reg mm7 SSA definition: None'
p1571
aS'Reg mm7 SSA uses: []'
p1572
aS'Reg mm7 SSA value: <undetermined>'
p1573
aS'Reg edi SSA definition: None'
p1574
aS'Reg edi SSA uses: []'
p1575
aS'Reg edi SSA value: <undetermined>'
p1576
aS'Reg mm1 SSA definition: None'
p1577
aS'Reg mm1 SSA uses: []'
p1578
aS'Reg mm1 SSA value: <undetermined>'
p1579
aS'Reg al SSA definition: None'
p1580
aS'Reg al SSA uses: []'
p1581
aS'Reg al SSA value: <undetermined>'
p1582
aS'Reg mm3 SSA definition: None'
p1583
aS'Reg mm3 SSA uses: []'
p1584
aS'Reg mm3 SSA value: <undetermined>'
p1585
aS'Reg mm2 SSA definition: None'
p1586
aS'Reg mm2 SSA uses: []'
p1587
aS'Reg mm2 SSA value: <undetermined>'
p1588
aS'Reg gsbase SSA definition: None'
p1589
aS'Reg gsbase SSA uses: []'
p1590
aS'Reg gsbase SSA value: <undetermined>'
p1591
aS'Reg cx SSA definition: None'
p1592
aS'Reg cx SSA uses: []'
p1593
aS'Reg cx SSA value: <undetermined>'
p1594
aS'Reg ebp SSA definition: None'
p1595
aS'Reg ebp SSA uses: []'
p1596
aS'Reg ebp SSA value: <undetermined>'
p1597
aS'Reg cs SSA definition: None'
p1598
aS'Reg cs SSA uses: []'
p1599
aS'Reg cs SSA value: <undetermined>'
p1600
aS'Reg ax SSA definition: None'
p1601
aS'Reg ax SSA uses: []'
p1602
aS'Reg ax SSA value: <undetermined>'
p1603
aS'Reg edx SSA definition: None'
p1604
aS'Reg edx SSA uses: []'
p1605
aS'Reg edx SSA value: <undetermined>'
p1606
aS'Reg ebx SSA definition: None'
p1607
aS'Reg ebx SSA uses: []'
p1608
aS'Reg ebx SSA value: <undetermined>'
p1609
aS'Reg es SSA definition: None'
p1610
aS'Reg es SSA uses: []'
p1611
aS'Reg es SSA value: <undetermined>'
p1612
aS'Reg x87_r2 SSA definition: None'
p1613
aS'Reg x87_r2 SSA uses: []'
p1614
aS'Reg x87_r2 SSA value: <undetermined>'
p1615
aS'Reg esp SSA definition: None'
p1616
aS'Reg esp SSA uses: []'
p1617
aS'Reg esp SSA value: <undetermined>'
p1618
aS'Reg mm4 SSA definition: None'
p1619
aS'Reg mm4 SSA uses: []'
p1620
aS'Reg mm4 SSA value: <undetermined>'
p1621
aS'Reg top SSA definition: None'
p1622
aS'Reg top SSA uses: []'
p1623
aS'Reg top SSA value: <undetermined>'
p1624
aS'Reg x87_r0 SSA definition: None'
p1625
aS'Reg x87_r0 SSA uses: []'
p1626
aS'Reg x87_r0 SSA value: <undetermined>'
p1627
aS'Reg st4 SSA definition: None'
p1628
aS'Reg st4 SSA uses: []'
p1629
aS'Reg st4 SSA value: <undetermined>'
p1630
aS'Reg st5 SSA definition: None'
p1631
aS'Reg st5 SSA uses: []'
p1632
aS'Reg st5 SSA value: <undetermined>'
p1633
aS'Reg st6 SSA definition: None'
p1634
aS'Reg st6 SSA uses: []'
p1635
aS'Reg st6 SSA value: <undetermined>'
p1636
aS'Reg st7 SSA definition: None'
p1637
aS'Reg st7 SSA uses: []'
p1638
aS'Reg st7 SSA value: <undetermined>'
p1639
aS'Reg st0 SSA definition: None'
p1640
aS'Reg st0 SSA uses: []'
p1641
aS'Reg st0 SSA value: <undetermined>'
p1642
aS'Reg st1 SSA definition: None'
p1643
aS'Reg st1 SSA uses: []'
p1644
aS'Reg st1 SSA value: <undetermined>'
p1645
aS'Reg st2 SSA definition: None'
p1646
aS'Reg st2 SSA uses: []'
p1647
aS'Reg st2 SSA value: <undetermined>'
p1648
aS'Reg st3 SSA definition: None'
p1649
aS'Reg st3 SSA uses: []'
p1650
aS'Reg st3 SSA value: <undetermined>'
p1651
aS'Reg x87_r6 SSA definition: None'
p1652
aS'Reg x87_r6 SSA uses: []'
p1653
aS'Reg x87_r6 SSA value: <undetermined>'
p1654
aS'Reg esi SSA definition: None'
p1655
aS'Reg esi SSA uses: []'
p1656
aS'Reg esi SSA value: <undetermined>'
p1657
aS'Reg x87_r7 SSA definition: None'
p1658
aS'Reg x87_r7 SSA uses: []'
p1659
aS'Reg x87_r7 SSA value: <undetermined>'
p1660
aS'Reg dl SSA definition: None'
p1661
aS'Reg dl SSA uses: []'
p1662
aS'Reg dl SSA value: <undetermined>'
p1663
aS'Reg mm6 SSA definition: None'
p1664
aS'Reg mm6 SSA uses: []'
p1665
aS'Reg mm6 SSA value: <undetermined>'
p1666
aS'Reg x87_r4 SSA definition: None'
p1667
aS'Reg x87_r4 SSA uses: []'
p1668
aS'Reg x87_r4 SSA value: <undetermined>'
p1669
aS'Reg dh SSA definition: None'
p1670
aS'Reg dh SSA uses: []'
p1671
aS'Reg dh SSA value: <undetermined>'
p1672
aS'Reg di SSA definition: None'
p1673
aS'Reg di SSA uses: []'
p1674
aS'Reg di SSA value: <undetermined>'
p1675
aS'Reg bl SSA definition: None'
p1676
aS'Reg bl SSA uses: []'
p1677
aS'Reg bl SSA value: <undetermined>'
p1678
aS'Reg x87_r5 SSA definition: None'
p1679
aS'Reg x87_r5 SSA uses: []'
p1680
aS'Reg x87_r5 SSA value: <undetermined>'
p1681
aS'Reg bh SSA definition: None'
p1682
aS'Reg bh SSA uses: []'
p1683
aS'Reg bh SSA value: <undetermined>'
p1684
aS'Reg mm0 SSA definition: None'
p1685
aS'Reg mm0 SSA uses: []'
p1686
aS'Reg mm0 SSA value: <undetermined>'
p1687
aS'Reg xmm2 SSA definition: None'
p1688
aS'Reg xmm2 SSA uses: []'
p1689
aS'Reg xmm2 SSA value: <undetermined>'
p1690
aS'Reg eax SSA definition: 0'
p1691
aS'Reg eax SSA uses: [1L]'
p1692
aS'Reg eax SSA value: <undetermined>'
p1693
aS'Reg xmm0 SSA definition: None'
p1694
aS'Reg xmm0 SSA uses: []'
p1695
aS'Reg xmm0 SSA value: <undetermined>'
p1696
aS'Reg xmm1 SSA definition: None'
p1697
aS'Reg xmm1 SSA uses: []'
p1698
aS'Reg xmm1 SSA value: <undetermined>'
p1699
aS'Reg bp SSA definition: None'
p1700
aS'Reg bp SSA uses: []'
p1701
aS'Reg bp SSA value: <undetermined>'
p1702
aS'Reg xmm7 SSA definition: None'
p1703
aS'Reg xmm7 SSA uses: []'
p1704
aS'Reg xmm7 SSA value: <undetermined>'
p1705
aS'Reg dx SSA definition: None'
p1706
aS'Reg dx SSA uses: []'
p1707
aS'Reg dx SSA value: <undetermined>'
p1708
aS'Reg xmm5 SSA definition: None'
p1709
aS'Reg xmm5 SSA uses: []'
p1710
aS'Reg xmm5 SSA value: <undetermined>'
p1711
aS'Reg bx SSA definition: None'
p1712
aS'Reg bx SSA uses: []'
p1713
aS'Reg bx SSA value: <undetermined>'
p1714
aS'Reg ds SSA definition: None'
p1715
aS'Reg ds SSA uses: []'
p1716
aS'Reg ds SSA value: <undetermined>'
p1717
aS'Reg ecx SSA definition: None'
p1718
aS'Reg ecx SSA uses: []'
p1719
aS'Reg ecx SSA value: <undetermined>'
p1720
aS'Reg xmm3 SSA definition: None'
p1721
aS'Reg xmm3 SSA uses: []'
p1722
aS'Reg xmm3 SSA value: <undetermined>'
p1723
aS'Reg ss SSA definition: None'
p1724
aS'Reg ss SSA uses: []'
p1725
aS'Reg ss SSA value: <undetermined>'
p1726
aS'Reg sp SSA definition: None'
p1727
aS'Reg sp SSA uses: []'
p1728
aS'Reg sp SSA value: <undetermined>'
p1729
aS'Reg fs SSA definition: None'
p1730
aS'Reg fs SSA uses: []'
p1731
aS'Reg fs SSA value: <undetermined>'
p1732
aS'Reg si SSA definition: None'
p1733
aS'Reg si SSA uses: []'
p1734
aS'Reg si SSA value: <undetermined>'
p1735
aS'Reg x87_r1 SSA definition: None'
p1736
aS'Reg x87_r1 SSA uses: []'
p1737
aS'Reg x87_r1 SSA value: <undetermined>'
p1738
aS'Reg xmm6 SSA definition: None'
p1739
aS'Reg xmm6 SSA uses: []'
p1740
aS'Reg xmm6 SSA value: <undetermined>'
p1741
aS'Reg fsbase SSA definition: None'
p1742
aS'Reg fsbase SSA uses: []'
p1743
aS'Reg fsbase SSA value: <undetermined>'
p1744
aS'Flag c SSA uses: []'
p1745
aS'Flag c SSA value: <undetermined>'
p1746
aS'Flag p SSA uses: []'
p1747
aS'Flag p SSA value: <undetermined>'
p1748
aS'Flag a SSA uses: []'
p1749
aS'Flag a SSA value: <undetermined>'
p1750
aS'Flag z SSA uses: []'
p1751
aS'Flag z SSA value: <undetermined>'
p1752
aS'Flag s SSA uses: []'
p1753
aS'Flag s SSA value: <undetermined>'
p1754
aS'Flag d SSA uses: []'
p1755
aS'Flag d SSA value: <undetermined>'
p1756
aS'Flag o SSA uses: []'
p1757
aS'Flag o SSA value: <undetermined>'
p1758
aS'Flag c0 SSA uses: []'
p1759
aS'Flag c0 SSA value: <undetermined>'
p1760
aS'Flag c1 SSA uses: []'
p1761
aS'Flag c1 SSA value: <undetermined>'
p1762
aS'Flag c2 SSA uses: []'
p1763
aS'Flag c2 SSA value: <undetermined>'
p1764
aS'Flag c3 SSA uses: []'
p1765
aS'Flag c3 SSA value: <undetermined>'
p1766
aS'Non-SSA instruction index: 0'
p1767
aS'SSA instruction index: 0'
p1768
aS'MLIL instruction index: 0'
p1769
aS'Mapped MLIL instruction index: 0'
p1770
aS'Non-SSA instruction index: 1'
p1771
aS'SSA instruction index: 1'
p1772
aS'MLIL instruction index: 1'
p1773
aS'Mapped MLIL instruction index: 1'
p1774
aS'Non-SSA instruction index: 2'
p1775
aS'SSA instruction index: 2'
p1776
aS'MLIL instruction index: 2'
p1777
aS'Mapped MLIL instruction index: 2'
p1778
asS'test_med_il_instructions'
p1779
(lp1780
S'Expression type: None'
p1781
aS'LLIL: eax#1 = [esp#0 + 4].d @ mem#0'
p1782
aS'Value: <undetermined>'
p1783
aS'Possible values: <undetermined>'
p1784
aS'Branch dependence: {}'
p1785
aS"Prefix operands: ['<MLIL_SET_VAR 4>', '<MLIL_VAR 4>', 'eax_40', 'testautovar']"
p1786
aS"Postfix operands: ['<MLIL_SET_VAR 4>', '<MLIL_VAR 4>', 'eax_40', 'testautovar']"
p1787
aS'SSA form: eax_40#1 = testautovar#0'
p1788
aS'Non-SSA formeax_40 = testautovar'
p1789
aS'Expression type: None'
p1790
aS'LLIL: edx#1:eax#2 = sx.q(eax#1)'
p1791
aS'Value: <undetermined>'
p1792
aS'Possible values: <undetermined>'
p1793
aS'Branch dependence: {}'
p1794
aS"Prefix operands: ['<MLIL_SET_VAR_SPLIT 4>', '<MLIL_SX 8>', '<MLIL_VAR 4>', 'eax', 'eax_40', 'edx']"
p1795
aS"Postfix operands: ['<MLIL_SET_VAR_SPLIT 4>', '<MLIL_SX 8>', '<MLIL_VAR 4>', 'eax', 'eax_40', 'edx']"
p1796
aS'SSA form: edx#1:eax#2 = sx.q(eax_40#1)'
p1797
aS'Non-SSA formedx:eax = sx.q(eax_40)'
p1798
aS'Expression type: None'
p1799
aS'LLIL: ecx#1 = [0x2000].d @ mem#0'
p1800
aS'Value: <undetermined>'
p1801
aS'Possible values: <undetermined>'
p1802
aS'Branch dependence: {}'
p1803
aS"Prefix operands: ['8192', '<MLIL_CONST_PTR 4>', '<MLIL_LOAD 4>', '<MLIL_SET_VAR 4>', 'ecx']"
p1804
aS"Postfix operands: ['8192', '<MLIL_CONST_PTR 4>', '<MLIL_LOAD 4>', '<MLIL_SET_VAR 4>', 'ecx']"
p1805
aS'SSA form: ecx#1 = [0x2000].d @ mem#0'
p1806
aS'Non-SSA formecx = [0x2000].d'
p1807
aS'Expression type: None'
p1808
aS'LLIL: ecx#2 = ecx#1 + 1'
p1809
aS'Value: <undetermined>'
p1810
aS'Possible values: <undetermined>'
p1811
aS'Branch dependence: {}'
p1812
aS"Prefix operands: ['1', '<MLIL_ADD 4>', '<MLIL_CONST 4>', '<MLIL_SET_VAR 4>', '<MLIL_VAR 4>', 'ecx', 'ecx_1']"
p1813
aS"Postfix operands: ['1', '<MLIL_ADD 4>', '<MLIL_CONST 4>', '<MLIL_SET_VAR 4>', '<MLIL_VAR 4>', 'ecx', 'ecx_1']"
p1814
aS'SSA form: ecx_1#2 = ecx#1 + 1'
p1815
aS'Non-SSA formecx_1 = ecx + 1'
p1816
aS'Expression type: None'
p1817
aS'LLIL: [0x2000].d = ecx#2 @ mem#0 -> mem#1'
p1818
aS'Value: <undetermined>'
p1819
aS'Possible values: <undetermined>'
p1820
aS'Branch dependence: {}'
p1821
aS"Prefix operands: ['8192', '<MLIL_CONST_PTR 4>', '<MLIL_STORE 4>', '<MLIL_VAR 4>', 'ecx_1']"
p1822
aS"Postfix operands: ['8192', '<MLIL_CONST_PTR 4>', '<MLIL_STORE 4>', '<MLIL_VAR 4>', 'ecx_1']"
p1823
aS'SSA form: [0x2000].d = ecx_1#2 @ mem#0 -> mem#1'
p1824
aS'Non-SSA form[0x2000].d = ecx_1'
p1825
aS'Expression type: None'
p1826
aS'LLIL: [esp#0 - 4].d = ecx#2 @ mem#1 -> mem#2'
p1827
aS'Value: <undetermined>'
p1828
aS'Possible values: <undetermined>'
p1829
aS'Branch dependence: {}'
p1830
aS"Prefix operands: ['<MLIL_SET_VAR 4>', '<MLIL_VAR 4>', 'ecx_1', 'var_4']"
p1831
aS"Postfix operands: ['<MLIL_SET_VAR 4>', '<MLIL_VAR 4>', 'ecx_1', 'var_4']"
p1832
aS'SSA form: var_4#1 = ecx_1#2'
p1833
aS'Non-SSA formvar_4 = ecx_1'
p1834
aS'Expression type: None'
p1835
aS'LLIL: eax#3 = [esp#1].d @ mem#2'
p1836
aS'Value: <undetermined>'
p1837
aS'Possible values: <undetermined>'
p1838
aS'Branch dependence: {}'
p1839
aS"Prefix operands: ['<MLIL_SET_VAR 4>', '<MLIL_VAR 4>', 'eax_1', 'var_4']"
p1840
aS"Postfix operands: ['<MLIL_SET_VAR 4>', '<MLIL_VAR 4>', 'eax_1', 'var_4']"
p1841
aS'SSA form: eax_1#3 = var_4#1'
p1842
aS'Non-SSA formeax_1 = var_4'
p1843
aS'Expression type: None'
p1844
aS'LLIL: eax#4 = eax#3 + 0xa'
p1845
aS'Value: <undetermined>'
p1846
aS'Possible values: <undetermined>'
p1847
aS'Branch dependence: {}'
p1848
aS"Prefix operands: ['10', '<MLIL_ADD 4>', '<MLIL_CONST 4>', '<MLIL_SET_VAR 4>', '<MLIL_VAR 4>', 'eax_1', 'eax_2']"
p1849
aS"Postfix operands: ['10', '<MLIL_ADD 4>', '<MLIL_CONST 4>', '<MLIL_SET_VAR 4>', '<MLIL_VAR 4>', 'eax_1', 'eax_2']"
p1850
aS'SSA form: eax_2#4 = eax_1#3 + 0xa'
p1851
aS'Non-SSA formeax_2 = eax_1 + 0xa'
p1852
aS'Expression type: None'
p1853
aS'LLIL: [0x2000].d = [0x2000].d @ mem#2 + eax#4 @ mem#2 -> mem#3'
p1854
aS'Value: <undetermined>'
p1855
aS'Possible values: <undetermined>'
p1856
aS'Branch dependence: {}'
p1857
aS"Prefix operands: ['8192', '8192', '<MLIL_ADD 4>', '<MLIL_CONST_PTR 4>', '<MLIL_CONST_PTR 4>', '<MLIL_LOAD 4>', '<MLIL_STORE 4>', '<MLIL_VAR 4>', 'eax_2']"
p1858
aS"Postfix operands: ['8192', '8192', '<MLIL_ADD 4>', '<MLIL_CONST_PTR 4>', '<MLIL_CONST_PTR 4>', '<MLIL_LOAD 4>', '<MLIL_STORE 4>', '<MLIL_VAR 4>', 'eax_2']"
p1859
aS'SSA form: [0x2000].d = [0x2000].d @ mem#1 + eax_2#4 @ mem#1 -> mem#2'
p1860
aS'Non-SSA form[0x2000].d = [0x2000].d + eax_2'
p1861
aS'Expression type: None'
p1862
aS'LLIL: temp2#1.d = eax#4'
p1863
aS'Value: <undetermined>'
p1864
aS'Possible values: <undetermined>'
p1865
aS'Branch dependence: {}'
p1866
aS"Prefix operands: ['<MLIL_SET_VAR 4>', '<MLIL_VAR 4>', 'eax_2', 'temp2']"
p1867
aS"Postfix operands: ['<MLIL_SET_VAR 4>', '<MLIL_VAR 4>', 'eax_2', 'temp2']"
p1868
aS'SSA form: temp2#1 = eax_2#4'
p1869
aS'Non-SSA formtemp2 = eax_2'
p1870
aS'Expression type: None'
p1871
aS'LLIL: eax#5 = temp2#1.d + ebx#1'
p1872
aS'Value: <undetermined>'
p1873
aS'Possible values: <undetermined>'
p1874
aS'Branch dependence: {}'
p1875
aS"Prefix operands: ['7808', '<MLIL_ADD 4>', '<MLIL_CONST_PTR 4>', '<MLIL_SET_VAR 4>', '<MLIL_VAR 4>', 'eax_3', 'temp2']"
p1876
aS"Postfix operands: ['7808', '<MLIL_ADD 4>', '<MLIL_CONST_PTR 4>', '<MLIL_SET_VAR 4>', '<MLIL_VAR 4>', 'eax_3', 'temp2']"
p1877
aS'SSA form: eax_3#5 = temp2#1 + 0x1e80'
p1878
aS'Non-SSA formeax_3 = temp2 + 0x1e80'
p1879
aS'Expression type: None'
p1880
aS'LLIL: [esp#4 - 4].d = flagbit.d(flag:flag63#0, 0xb) | (flagbit.d(flag:flag60#0, 0xa) | (flagbit.d(flag:flag57#0, 7) | (flagbit.d(flag:flag54#0, 6) | (flagbit.d(flag:flag51#0, 4) | (flagbit.d(flag:flag48#0, 2) | flagbit.d(flag:flag46#0, 0)))))) @ mem#4 -> mem#5'
p1881
aS'Value: <undetermined>'
p1882
aS'Possible values: <undetermined>'
p1883
aS'Branch dependence: {}'
p1884
aS"Prefix operands: ['0', '10', '11', '2', '4', '6', '7', '<MLIL_BOOL_TO_INT 4>', '<MLIL_BOOL_TO_INT 4>', '<MLIL_BOOL_TO_INT 4>', '<MLIL_BOOL_TO_INT 4>', '<MLIL_BOOL_TO_INT 4>', '<MLIL_BOOL_TO_INT 4>', '<MLIL_BOOL_TO_INT 4>', '<MLIL_CONST 4>', '<MLIL_CONST 4>', '<MLIL_CONST 4>', '<MLIL_CONST 4>', '<MLIL_CONST 4>', '<MLIL_CONST 4>', '<MLIL_CONST 4>', '<MLIL_LSL 4>', '<MLIL_LSL 4>', '<MLIL_LSL 4>', '<MLIL_LSL 4>', '<MLIL_LSL 4>', '<MLIL_LSL 4>', '<MLIL_LSL 4>', '<MLIL_OR 4>', '<MLIL_OR 4>', '<MLIL_OR 4>', '<MLIL_OR 4>', '<MLIL_OR 4>', '<MLIL_OR 4>', '<MLIL_SET_VAR 4>', '<MLIL_VAR 4>', '<MLIL_VAR 4>', '<MLIL_VAR 4>', '<MLIL_VAR 4>', '<MLIL_VAR 4>', '<MLIL_VAR 4>', '<MLIL_VAR 4>', 'flag46', 'flag48', 'flag51', 'flag54', 'flag57', 'flag60', 'flag63', 'var_4_1']"
p1885
aS"Postfix operands: ['0', '10', '11', '2', '4', '6', '7', '<MLIL_BOOL_TO_INT 4>', '<MLIL_BOOL_TO_INT 4>', '<MLIL_BOOL_TO_INT 4>', '<MLIL_BOOL_TO_INT 4>', '<MLIL_BOOL_TO_INT 4>', '<MLIL_BOOL_TO_INT 4>', '<MLIL_BOOL_TO_INT 4>', '<MLIL_CONST 4>', '<MLIL_CONST 4>', '<MLIL_CONST 4>', '<MLIL_CONST 4>', '<MLIL_CONST 4>', '<MLIL_CONST 4>', '<MLIL_CONST 4>', '<MLIL_LSL 4>', '<MLIL_LSL 4>', '<MLIL_LSL 4>', '<MLIL_LSL 4>', '<MLIL_LSL 4>', '<MLIL_LSL 4>', '<MLIL_LSL 4>', '<MLIL_OR 4>', '<MLIL_OR 4>', '<MLIL_OR 4>', '<MLIL_OR 4>', '<MLIL_OR 4>', '<MLIL_OR 4>', '<MLIL_SET_VAR 4>', '<MLIL_VAR 4>', '<MLIL_VAR 4>', '<MLIL_VAR 4>', '<MLIL_VAR 4>', '<MLIL_VAR 4>', '<MLIL_VAR 4>', '<MLIL_VAR 4>', 'flag46', 'flag48', 'flag51', 'flag54', 'flag57', 'flag60', 'flag63', 'var_4_1']"
p1886
aS'SSA form: var_4_1#2 = (flag63#0 ? 1 : 0 << 0xb) | ((flag60#0 ? 1 : 0 << 0xa) | ((flag57#0 ? 1 : 0 << 7) | ((flag54#0 ? 1 : 0 << 6) | ((flag51#0 ? 1 : 0 << 4) | ((flag48#0 ? 1 : 0 << 2) | (flag46#0 ? 1 : 0 << 0))))))'
p1887
aS'Non-SSA formvar_4_1 = (flag63 ? 1 : 0 << 0xb) | ((flag60 ? 1 : 0 << 0xa) | ((flag57 ? 1 : 0 << 7) | ((flag54 ? 1 : 0 << 6) | ((flag51 ? 1 : 0 << 4) | ((flag48 ? 1 : 0 << 2) | (flag46 ? 1 : 0 << 0))))))'
p1888
aS'Expression type: None'
p1889
aS'LLIL: eax#6 = [esp#5].d @ mem#5'
p1890
aS'Value: <undetermined>'
p1891
aS'Possible values: <undetermined>'
p1892
aS'Branch dependence: {}'
p1893
aS"Prefix operands: ['<MLIL_SET_VAR 4>', '<MLIL_VAR 4>', 'eax_4', 'var_4_1']"
p1894
aS"Postfix operands: ['<MLIL_SET_VAR 4>', '<MLIL_VAR 4>', 'eax_4', 'var_4_1']"
p1895
aS'SSA form: eax_4#6 = var_4_1#2'
p1896
aS'Non-SSA formeax_4 = var_4_1'
p1897
aS'Expression type: None'
p1898
aS'LLIL: [0x2000].d = [0x2000].d @ mem#5 + eax#6 @ mem#5 -> mem#6'
p1899
aS'Value: <undetermined>'
p1900
aS'Possible values: <undetermined>'
p1901
aS'Branch dependence: {}'
p1902
aS"Prefix operands: ['8192', '8192', '<MLIL_ADD 4>', '<MLIL_CONST_PTR 4>', '<MLIL_CONST_PTR 4>', '<MLIL_LOAD 4>', '<MLIL_STORE 4>', '<MLIL_VAR 4>', 'eax_4']"
p1903
aS"Postfix operands: ['8192', '8192', '<MLIL_ADD 4>', '<MLIL_CONST_PTR 4>', '<MLIL_CONST_PTR 4>', '<MLIL_LOAD 4>', '<MLIL_STORE 4>', '<MLIL_VAR 4>', 'eax_4']"
p1904
aS'SSA form: [0x2000].d = [0x2000].d @ mem#2 + eax_4#6 @ mem#2 -> mem#3'
p1905
aS'Non-SSA form[0x2000].d = [0x2000].d + eax_4'
p1906
aS'Expression type: None'
p1907
aS'LLIL: eax#7 = adc.d(eax#6, eax#6, flag:c#3)'
p1908
aS'Value: <undetermined>'
p1909
aS'Possible values: <undetermined>'
p1910
aS'Branch dependence: {}'
p1911
aS"Prefix operands: ['1', '<MLIL_ADC 4>', '<MLIL_CONST>', '<MLIL_SET_VAR 4>', '<MLIL_VAR 4>', '<MLIL_VAR 4>', 'eax_4', 'eax_4', 'eax_5']"
p1912
aS"Postfix operands: ['1', '<MLIL_ADC 4>', '<MLIL_CONST>', '<MLIL_SET_VAR 4>', '<MLIL_VAR 4>', '<MLIL_VAR 4>', 'eax_4', 'eax_4', 'eax_5']"
p1913
aS'SSA form: eax_5#7 = adc.d(eax_4#6, eax_4#6, true)'
p1914
aS'Non-SSA formeax_5 = adc.d(eax_4, eax_4, true)'
p1915
aS'Expression type: None'
p1916
aS'LLIL: ebx#2 = eax#7'
p1917
aS'Value: <undetermined>'
p1918
aS'Possible values: <undetermined>'
p1919
aS'Branch dependence: {}'
p1920
aS"Prefix operands: ['<MLIL_SET_VAR 4>', '<MLIL_VAR 4>', 'eax_5', 'ebx']"
p1921
aS"Postfix operands: ['<MLIL_SET_VAR 4>', '<MLIL_VAR 4>', 'eax_5', 'ebx']"
p1922
aS'SSA form: ebx#1 = eax_5#7'
p1923
aS'Non-SSA formebx = eax_5'
p1924
aS'Expression type: None'
p1925
aS'LLIL: eax#8 = sbb.d(eax#7, eax#7, flag:c#4)'
p1926
aS'Value: <undetermined>'
p1927
aS'Possible values: <undetermined>'
p1928
aS'Branch dependence: {}'
p1929
aS"Prefix operands: ['1', '<MLIL_CONST>', '<MLIL_SBB 4>', '<MLIL_SET_VAR 4>', '<MLIL_VAR 4>', '<MLIL_VAR 4>', 'eax_5', 'eax_5', 'eax_6']"
p1930
aS"Postfix operands: ['1', '<MLIL_CONST>', '<MLIL_SBB 4>', '<MLIL_SET_VAR 4>', '<MLIL_VAR 4>', '<MLIL_VAR 4>', 'eax_5', 'eax_5', 'eax_6']"
p1931
aS'SSA form: eax_6#8 = sbb.d(eax_5#7, eax_5#7, true)'
p1932
aS'Non-SSA formeax_6 = sbb.d(eax_5, eax_5, true)'
p1933
aS'Expression type: None'
p1934
aS'LLIL: eax#9 = eax#8 - ebx#2'
p1935
aS'Value: <undetermined>'
p1936
aS'Possible values: <undetermined>'
p1937
aS'Branch dependence: {}'
p1938
aS"Prefix operands: ['<MLIL_SET_VAR 4>', '<MLIL_SUB 4>', '<MLIL_VAR 4>', '<MLIL_VAR 4>', 'eax_6', 'eax_7', 'ebx']"
p1939
aS"Postfix operands: ['<MLIL_SET_VAR 4>', '<MLIL_SUB 4>', '<MLIL_VAR 4>', '<MLIL_VAR 4>', 'eax_6', 'eax_7', 'ebx']"
p1940
aS'SSA form: eax_7#9 = eax_6#8 - ebx#1'
p1941
aS'Non-SSA formeax_7 = eax_6 - ebx'
p1942
aS'Expression type: None'
p1943
aS'LLIL: eax#10 = eax#9 & 0xffff'
p1944
aS'Value: <undetermined>'
p1945
aS'Possible values: <undetermined>'
p1946
aS'Branch dependence: {}'
p1947
aS"Prefix operands: ['65535', '<MLIL_AND 4>', '<MLIL_CONST 4>', '<MLIL_SET_VAR 4>', '<MLIL_VAR 4>', 'eax_7', 'eax_8']"
p1948
aS"Postfix operands: ['65535', '<MLIL_AND 4>', '<MLIL_CONST 4>', '<MLIL_SET_VAR 4>', '<MLIL_VAR 4>', 'eax_7', 'eax_8']"
p1949
aS'SSA form: eax_8#10 = eax_7#9 & 0xffff'
p1950
aS'Non-SSA formeax_8 = eax_7 & 0xffff'
p1951
aS'Expression type: None'
p1952
aS'LLIL: eax#11 = eax#10 | 0x5555'
p1953
aS'Value: <undetermined>'
p1954
aS'Possible values: <undetermined>'
p1955
aS'Branch dependence: {}'
p1956
aS"Prefix operands: ['21845', '<MLIL_CONST 4>', '<MLIL_OR 4>', '<MLIL_SET_VAR 4>', '<MLIL_VAR 4>', 'eax_8', 'eax_9']"
p1957
aS"Postfix operands: ['21845', '<MLIL_CONST 4>', '<MLIL_OR 4>', '<MLIL_SET_VAR 4>', '<MLIL_VAR 4>', 'eax_8', 'eax_9']"
p1958
aS'SSA form: eax_9#11 = eax_8#10 | 0x5555'
p1959
aS'Non-SSA formeax_9 = eax_8 | 0x5555'
p1960
aS'Expression type: None'
p1961
aS'LLIL: eax#12 = eax#11 ^ 0x8888'
p1962
aS'Value: <undetermined>'
p1963
aS'Possible values: <undetermined>'
p1964
aS'Branch dependence: {}'
p1965
aS"Prefix operands: ['34952', '<MLIL_CONST 4>', '<MLIL_SET_VAR 4>', '<MLIL_VAR 4>', '<MLIL_XOR 4>', 'eax_10', 'eax_9']"
p1966
aS"Postfix operands: ['34952', '<MLIL_CONST 4>', '<MLIL_SET_VAR 4>', '<MLIL_VAR 4>', '<MLIL_XOR 4>', 'eax_10', 'eax_9']"
p1967
aS'SSA form: eax_10#12 = eax_9#11 ^ 0x8888'
p1968
aS'Non-SSA formeax_10 = eax_9 ^ 0x8888'
p1969
aS'Expression type: None'
p1970
aS'LLIL: eax#13 = eax#12 << 0x10'
p1971
aS'Value: <undetermined>'
p1972
aS'Possible values: <undetermined>'
p1973
aS'Branch dependence: {}'
p1974
aS"Prefix operands: ['16', '<MLIL_CONST 1>', '<MLIL_LSL 4>', '<MLIL_SET_VAR 4>', '<MLIL_VAR 4>', 'eax_10', 'eax_11']"
p1975
aS"Postfix operands: ['16', '<MLIL_CONST 1>', '<MLIL_LSL 4>', '<MLIL_SET_VAR 4>', '<MLIL_VAR 4>', 'eax_10', 'eax_11']"
p1976
aS'SSA form: eax_11#13 = eax_10#12 << 0x10'
p1977
aS'Non-SSA formeax_11 = eax_10 << 0x10'
p1978
aS'Expression type: None'
p1979
aS'LLIL: [0x2000].d = [0x2000].d @ mem#6 + eax#13 @ mem#6 -> mem#7'
p1980
aS'Value: <undetermined>'
p1981
aS'Possible values: <undetermined>'
p1982
aS'Branch dependence: {}'
p1983
aS"Prefix operands: ['8192', '8192', '<MLIL_ADD 4>', '<MLIL_CONST_PTR 4>', '<MLIL_CONST_PTR 4>', '<MLIL_LOAD 4>', '<MLIL_STORE 4>', '<MLIL_VAR 4>', 'eax_11']"
p1984
aS"Postfix operands: ['8192', '8192', '<MLIL_ADD 4>', '<MLIL_CONST_PTR 4>', '<MLIL_CONST_PTR 4>', '<MLIL_LOAD 4>', '<MLIL_STORE 4>', '<MLIL_VAR 4>', 'eax_11']"
p1985
aS'SSA form: [0x2000].d = [0x2000].d @ mem#3 + eax_11#13 @ mem#3 -> mem#4'
p1986
aS'Non-SSA form[0x2000].d = [0x2000].d + eax_11'
p1987
aS'Expression type: None'
p1988
aS'LLIL: eax#14 = eax#13 s>> 4'
p1989
aS'Value: <undetermined>'
p1990
aS'Possible values: <undetermined>'
p1991
aS'Branch dependence: {}'
p1992
aS"Prefix operands: ['4', '<MLIL_ASR 4>', '<MLIL_CONST 1>', '<MLIL_SET_VAR 4>', '<MLIL_VAR 4>', 'eax_11', 'eax_12']"
p1993
aS"Postfix operands: ['4', '<MLIL_ASR 4>', '<MLIL_CONST 1>', '<MLIL_SET_VAR 4>', '<MLIL_VAR 4>', 'eax_11', 'eax_12']"
p1994
aS'SSA form: eax_12#14 = eax_11#13 s>> 4'
p1995
aS'Non-SSA formeax_12 = eax_11 s>> 4'
p1996
aS'Expression type: None'
p1997
aS'LLIL: eax#15 = eax#14 u>> 8'
p1998
aS'Value: <undetermined>'
p1999
aS'Possible values: <undetermined>'
p2000
aS'Branch dependence: {}'
p2001
aS"Prefix operands: ['8', '<MLIL_CONST 1>', '<MLIL_LSR 4>', '<MLIL_SET_VAR 4>', '<MLIL_VAR 4>', 'eax_12', 'eax_13']"
p2002
aS"Postfix operands: ['8', '<MLIL_CONST 1>', '<MLIL_LSR 4>', '<MLIL_SET_VAR 4>', '<MLIL_VAR 4>', 'eax_12', 'eax_13']"
p2003
aS'SSA form: eax_13#15 = eax_12#14 u>> 8'
p2004
aS'Non-SSA formeax_13 = eax_12 u>> 8'
p2005
aS'Expression type: None'
p2006
aS'LLIL: eax#16 = rol.d(eax#15, 0x10)'
p2007
aS'Value: <undetermined>'
p2008
aS'Possible values: <undetermined>'
p2009
aS'Branch dependence: {}'
p2010
aS"Prefix operands: ['16', '<MLIL_CONST 1>', '<MLIL_ROL 4>', '<MLIL_SET_VAR 4>', '<MLIL_VAR 4>', 'eax_13', 'eax_14']"
p2011
aS"Postfix operands: ['16', '<MLIL_CONST 1>', '<MLIL_ROL 4>', '<MLIL_SET_VAR 4>', '<MLIL_VAR 4>', 'eax_13', 'eax_14']"
p2012
aS'SSA form: eax_14#16 = rol.d(eax_13#15, 0x10)'
p2013
aS'Non-SSA formeax_14 = rol.d(eax_13, 0x10)'
p2014
aS'Expression type: None'
p2015
aS'LLIL: [0x2000].d = [0x2000].d @ mem#7 + eax#16 @ mem#7 -> mem#8'
p2016
aS'Value: <undetermined>'
p2017
aS'Possible values: <undetermined>'
p2018
aS'Branch dependence: {}'
p2019
aS"Prefix operands: ['8192', '8192', '<MLIL_ADD 4>', '<MLIL_CONST_PTR 4>', '<MLIL_CONST_PTR 4>', '<MLIL_LOAD 4>', '<MLIL_STORE 4>', '<MLIL_VAR 4>', 'eax_14']"
p2020
aS"Postfix operands: ['8192', '8192', '<MLIL_ADD 4>', '<MLIL_CONST_PTR 4>', '<MLIL_CONST_PTR 4>', '<MLIL_LOAD 4>', '<MLIL_STORE 4>', '<MLIL_VAR 4>', 'eax_14']"
p2021
aS'SSA form: [0x2000].d = [0x2000].d @ mem#4 + eax_14#16 @ mem#4 -> mem#5'
p2022
aS'Non-SSA form[0x2000].d = [0x2000].d + eax_14'
p2023
aS'Expression type: None'
p2024
aS'LLIL: eax#17 = ror.d(eax#16, 8)'
p2025
aS'Value: <undetermined>'
p2026
aS'Possible values: <undetermined>'
p2027
aS'Branch dependence: {}'
p2028
aS"Prefix operands: ['8', '<MLIL_CONST 1>', '<MLIL_ROR 4>', '<MLIL_SET_VAR 4>', '<MLIL_VAR 4>', 'eax_14', 'eax_15']"
p2029
aS"Postfix operands: ['8', '<MLIL_CONST 1>', '<MLIL_ROR 4>', '<MLIL_SET_VAR 4>', '<MLIL_VAR 4>', 'eax_14', 'eax_15']"
p2030
aS'SSA form: eax_15#17 = ror.d(eax_14#16, 8)'
p2031
aS'Non-SSA formeax_15 = ror.d(eax_14, 8)'
p2032
aS'Expression type: None'
p2033
aS'LLIL: eax#18 = rrc.d(eax#17, 1, flag:c#5)'
p2034
aS'Value: <undetermined>'
p2035
aS'Possible values: <undetermined>'
p2036
aS'Branch dependence: {}'
p2037
aS"Prefix operands: ['0', '1', '<MLIL_CONST 1>', '<MLIL_CONST>', '<MLIL_RRC 4>', '<MLIL_SET_VAR 4>', '<MLIL_VAR 4>', 'eax_15', 'eax_16']"
p2038
aS"Postfix operands: ['0', '1', '<MLIL_CONST 1>', '<MLIL_CONST>', '<MLIL_RRC 4>', '<MLIL_SET_VAR 4>', '<MLIL_VAR 4>', 'eax_15', 'eax_16']"
p2039
aS'SSA form: eax_16#18 = rrc.d(eax_15#17, 1, false)'
p2040
aS'Non-SSA formeax_16 = rrc.d(eax_15, 1, false)'
p2041
aS'Expression type: None'
p2042
aS'LLIL: eax#19 = rlc.d(eax#18, 1, flag:c#6)'
p2043
aS'Value: <undetermined>'
p2044
aS'Possible values: <undetermined>'
p2045
aS'Branch dependence: {}'
p2046
aS"Prefix operands: ['1', '1', '<MLIL_CONST 1>', '<MLIL_CONST>', '<MLIL_RRC 4>', '<MLIL_SET_VAR 4>', '<MLIL_VAR 4>', 'eax_16', 'eax_17']"
p2047
aS"Postfix operands: ['1', '1', '<MLIL_CONST 1>', '<MLIL_CONST>', '<MLIL_RRC 4>', '<MLIL_SET_VAR 4>', '<MLIL_VAR 4>', 'eax_16', 'eax_17']"
p2048
aS'SSA form: eax_17#19 = rrc.d(eax_16#18, 1, true)'
p2049
aS'Non-SSA formeax_17 = rrc.d(eax_16, 1, true)'
p2050
aS'Expression type: None'
p2051
aS'LLIL: [0x2000].d = [0x2000].d @ mem#8 + eax#19 @ mem#8 -> mem#9'
p2052
aS'Value: <undetermined>'
p2053
aS'Possible values: <undetermined>'
p2054
aS'Branch dependence: {}'
p2055
aS"Prefix operands: ['8192', '8192', '<MLIL_ADD 4>', '<MLIL_CONST_PTR 4>', '<MLIL_CONST_PTR 4>', '<MLIL_LOAD 4>', '<MLIL_STORE 4>', '<MLIL_VAR 4>', 'eax_17']"
p2056
aS"Postfix operands: ['8192', '8192', '<MLIL_ADD 4>', '<MLIL_CONST_PTR 4>', '<MLIL_CONST_PTR 4>', '<MLIL_LOAD 4>', '<MLIL_STORE 4>', '<MLIL_VAR 4>', 'eax_17']"
p2057
aS'SSA form: [0x2000].d = [0x2000].d @ mem#5 + eax_17#19 @ mem#5 -> mem#6'
p2058
aS'Non-SSA form[0x2000].d = [0x2000].d + eax_17'
p2059
aS'Expression type: None'
p2060
aS'LLIL: eax#20.al = 0x10'
p2061
aS'Value: <undetermined>'
p2062
aS'Possible values: <undetermined>'
p2063
aS'Branch dependence: {}'
p2064
aS"Prefix operands: ['0', '16', '<MLIL_CONST 1>', '<MLIL_SET_VAR_FIELD 1>', 'eax_17']"
p2065
aS"Postfix operands: ['0', '16', '<MLIL_CONST 1>', '<MLIL_SET_VAR_FIELD 1>', 'eax_17']"
p2066
aS'SSA form: eax_17#20.al = 0x10 @ eax_17#19'
p2067
aS'Non-SSA formeax_17.al = 0x10'
p2068
aS'Expression type: None'
p2069
aS'LLIL: eax#21.al = eax#20.al + eax#20.ah'
p2070
aS'Value: <undetermined>'
p2071
aS'Possible values: <undetermined>'
p2072
aS'Branch dependence: {}'
p2073
aS"Prefix operands: ['0', '0', '1', '<MLIL_ADD 1>', '<MLIL_SET_VAR_FIELD 1>', '<MLIL_VAR_FIELD 1>', '<MLIL_VAR_FIELD 1>', 'eax_17', 'eax_17', 'eax_17']"
p2074
aS"Postfix operands: ['0', '0', '1', '<MLIL_ADD 1>', '<MLIL_SET_VAR_FIELD 1>', '<MLIL_VAR_FIELD 1>', '<MLIL_VAR_FIELD 1>', 'eax_17', 'eax_17', 'eax_17']"
p2075
aS'SSA form: eax_17#21.al = eax_17#20.al + eax_17#20.ah @ eax_17#20'
p2076
aS'Non-SSA formeax_17.al = eax_17.al + eax_17.ah'
p2077
aS'Expression type: None'
p2078
aS'LLIL: [0x2000].d = [0x2000].d @ mem#9 + eax#21 @ mem#9 -> mem#10'
p2079
aS'Value: <undetermined>'
p2080
aS'Possible values: <undetermined>'
p2081
aS'Branch dependence: {}'
p2082
aS"Prefix operands: ['8192', '8192', '<MLIL_ADD 4>', '<MLIL_CONST_PTR 4>', '<MLIL_CONST_PTR 4>', '<MLIL_LOAD 4>', '<MLIL_STORE 4>', '<MLIL_VAR 4>', 'eax_17']"
p2083
aS"Postfix operands: ['8192', '8192', '<MLIL_ADD 4>', '<MLIL_CONST_PTR 4>', '<MLIL_CONST_PTR 4>', '<MLIL_LOAD 4>', '<MLIL_STORE 4>', '<MLIL_VAR 4>', 'eax_17']"
p2084
aS'SSA form: [0x2000].d = [0x2000].d @ mem#6 + eax_17#21 @ mem#6 -> mem#7'
p2085
aS'Non-SSA form[0x2000].d = [0x2000].d + eax_17'
p2086
aS'Expression type: None'
p2087
aS'LLIL: eax#22 = eax#21 * eax#21'
p2088
aS'Value: <undetermined>'
p2089
aS'Possible values: <undetermined>'
p2090
aS'Branch dependence: {}'
p2091
aS"Prefix operands: ['<MLIL_MUL 4>', '<MLIL_SET_VAR 4>', '<MLIL_VAR 4>', '<MLIL_VAR 4>', 'eax_17', 'eax_17', 'eax_18']"
p2092
aS"Postfix operands: ['<MLIL_MUL 4>', '<MLIL_SET_VAR 4>', '<MLIL_VAR 4>', '<MLIL_VAR 4>', 'eax_17', 'eax_17', 'eax_18']"
p2093
aS'SSA form: eax_18#22 = eax_17#21 * eax_17#21'
p2094
aS'Non-SSA formeax_18 = eax_17 * eax_17'
p2095
aS'Expression type: None'
p2096
aS'LLIL: edx#2:eax#23 = mulu.dp.d(eax#22, ecx#3)'
p2097
aS'Value: <undetermined>'
p2098
aS'Possible values: <undetermined>'
p2099
aS'Branch dependence: {}'
p2100
aS"Prefix operands: ['5', '<MLIL_CONST 4>', '<MLIL_MULU_DP 4>', '<MLIL_SET_VAR_SPLIT 4>', '<MLIL_VAR 4>', 'eax_18', 'eax_19', 'edx_1']"
p2101
aS"Postfix operands: ['5', '<MLIL_CONST 4>', '<MLIL_MULU_DP 4>', '<MLIL_SET_VAR_SPLIT 4>', '<MLIL_VAR 4>', 'eax_18', 'eax_19', 'edx_1']"
p2102
aS'SSA form: edx_1#2:eax_19#23 = mulu.dp.d(eax_18#22, 5)'
p2103
aS'Non-SSA formedx_1:eax_19 = mulu.dp.d(eax_18, 5)'
p2104
aS'Expression type: None'
p2105
aS'LLIL: ecx#4 = edx#2'
p2106
aS'Value: <undetermined>'
p2107
aS'Possible values: <undetermined>'
p2108
aS'Branch dependence: {}'
p2109
aS"Prefix operands: ['<MLIL_SET_VAR 4>', '<MLIL_VAR 4>', 'ecx_2', 'edx_1']"
p2110
aS"Postfix operands: ['<MLIL_SET_VAR 4>', '<MLIL_VAR 4>', 'ecx_2', 'edx_1']"
p2111
aS'SSA form: ecx_2#3 = edx_1#2'
p2112
aS'Non-SSA formecx_2 = edx_1'
p2113
aS'Expression type: None'
p2114
aS'LLIL: edx#3:eax#24 = muls.dp.d(eax#23, ecx#4)'
p2115
aS'Value: <undetermined>'
p2116
aS'Possible values: <undetermined>'
p2117
aS'Branch dependence: {}'
p2118
aS"Prefix operands: ['<MLIL_MULS_DP 4>', '<MLIL_SET_VAR_SPLIT 4>', '<MLIL_VAR 4>', '<MLIL_VAR 4>', 'eax_19', 'eax_20', 'ecx_2', 'edx_2']"
p2119
aS"Postfix operands: ['<MLIL_MULS_DP 4>', '<MLIL_SET_VAR_SPLIT 4>', '<MLIL_VAR 4>', '<MLIL_VAR 4>', 'eax_19', 'eax_20', 'ecx_2', 'edx_2']"
p2120
aS'SSA form: edx_2#3:eax_20#24 = muls.dp.d(eax_19#23, ecx_2#3)'
p2121
aS'Non-SSA formedx_2:eax_20 = muls.dp.d(eax_19, ecx_2)'
p2122
aS'Expression type: None'
p2123
aS'LLIL: temp0#1.d = divs.dp.d(edx#3:eax#24, ecx#5)'
p2124
aS'Value: <undetermined>'
p2125
aS'Possible values: <undetermined>'
p2126
aS'Branch dependence: {}'
p2127
aS"Prefix operands: ['9', '<MLIL_CONST 4>', '<MLIL_DIVS_DP 4>', '<MLIL_SET_VAR 4>', '<MLIL_VAR_SPLIT 4>', 'eax_20', 'edx_2', 'temp0']"
p2128
aS"Postfix operands: ['9', '<MLIL_CONST 4>', '<MLIL_DIVS_DP 4>', '<MLIL_SET_VAR 4>', '<MLIL_VAR_SPLIT 4>', 'eax_20', 'edx_2', 'temp0']"
p2129
aS'SSA form: temp0#1 = divs.dp.d(edx_2#3:eax_20#24, 9)'
p2130
aS'Non-SSA formtemp0 = divs.dp.d(edx_2:eax_20, 9)'
p2131
aS'Expression type: None'
p2132
aS'LLIL: temp1#1.d = mods.dp.d(edx#3:eax#24, ecx#5)'
p2133
aS'Value: <undetermined>'
p2134
aS'Possible values: <undetermined>'
p2135
aS'Branch dependence: {}'
p2136
aS"Prefix operands: ['9', '<MLIL_CONST 4>', '<MLIL_MODS_DP 4>', '<MLIL_SET_VAR 4>', '<MLIL_VAR_SPLIT 4>', 'eax_20', 'edx_2', 'temp1']"
p2137
aS"Postfix operands: ['9', '<MLIL_CONST 4>', '<MLIL_MODS_DP 4>', '<MLIL_SET_VAR 4>', '<MLIL_VAR_SPLIT 4>', 'eax_20', 'edx_2', 'temp1']"
p2138
aS'SSA form: temp1#1 = mods.dp.d(edx_2#3:eax_20#24, 9)'
p2139
aS'Non-SSA formtemp1 = mods.dp.d(edx_2:eax_20, 9)'
p2140
aS'Expression type: None'
p2141
aS'LLIL: eax#25 = temp0#1.d'
p2142
aS'Value: <undetermined>'
p2143
aS'Possible values: <undetermined>'
p2144
aS'Branch dependence: {}'
p2145
aS"Prefix operands: ['<MLIL_SET_VAR 4>', '<MLIL_VAR 4>', 'eax_21', 'temp0']"
p2146
aS"Postfix operands: ['<MLIL_SET_VAR 4>', '<MLIL_VAR 4>', 'eax_21', 'temp0']"
p2147
aS'SSA form: eax_21#25 = temp0#1'
p2148
aS'Non-SSA formeax_21 = temp0'
p2149
aS'Expression type: None'
p2150
aS'LLIL: edx#4 = temp1#1.d'
p2151
aS'Value: <undetermined>'
p2152
aS'Possible values: <undetermined>'
p2153
aS'Branch dependence: {}'
p2154
aS"Prefix operands: ['<MLIL_SET_VAR 4>', '<MLIL_VAR 4>', 'edx_3', 'temp1']"
p2155
aS"Postfix operands: ['<MLIL_SET_VAR 4>', '<MLIL_VAR 4>', 'edx_3', 'temp1']"
p2156
aS'SSA form: edx_3#4 = temp1#1'
p2157
aS'Non-SSA formedx_3 = temp1'
p2158
aS'Expression type: None'
p2159
aS'LLIL: [0x2000].d = [0x2000].d @ mem#10 + edx#4 @ mem#10 -> mem#11'
p2160
aS'Value: <undetermined>'
p2161
aS'Possible values: <undetermined>'
p2162
aS'Branch dependence: {}'
p2163
aS"Prefix operands: ['8192', '8192', '<MLIL_ADD 4>', '<MLIL_CONST_PTR 4>', '<MLIL_CONST_PTR 4>', '<MLIL_LOAD 4>', '<MLIL_STORE 4>', '<MLIL_VAR 4>', 'edx_3']"
p2164
aS"Postfix operands: ['8192', '8192', '<MLIL_ADD 4>', '<MLIL_CONST_PTR 4>', '<MLIL_CONST_PTR 4>', '<MLIL_LOAD 4>', '<MLIL_STORE 4>', '<MLIL_VAR 4>', 'edx_3']"
p2165
aS'SSA form: [0x2000].d = [0x2000].d @ mem#7 + edx_3#4 @ mem#7 -> mem#8'
p2166
aS'Non-SSA form[0x2000].d = [0x2000].d + edx_3'
p2167
aS'Expression type: None'
p2168
aS'LLIL: edx#5:eax#26 = sx.q(eax#25)'
p2169
aS'Value: <undetermined>'
p2170
aS'Possible values: <undetermined>'
p2171
aS'Branch dependence: {}'
p2172
aS"Prefix operands: ['<MLIL_SET_VAR_SPLIT 4>', '<MLIL_SX 8>', '<MLIL_VAR 4>', 'eax_21', 'eax_22', 'edx_4']"
p2173
aS"Postfix operands: ['<MLIL_SET_VAR_SPLIT 4>', '<MLIL_SX 8>', '<MLIL_VAR 4>', 'eax_21', 'eax_22', 'edx_4']"
p2174
aS'SSA form: edx_4#5:eax_22#26 = sx.q(eax_21#25)'
p2175
aS'Non-SSA formedx_4:eax_22 = sx.q(eax_21)'
p2176
aS'Expression type: None'
p2177
aS'LLIL: temp0#2.d = divu.dp.d(edx#5:eax#26, ecx#6)'
p2178
aS'Value: <undetermined>'
p2179
aS'Possible values: <undetermined>'
p2180
aS'Branch dependence: {}'
p2181
aS"Prefix operands: ['3', '<MLIL_CONST 4>', '<MLIL_DIVU_DP 4>', '<MLIL_SET_VAR 4>', '<MLIL_VAR_SPLIT 4>', 'eax_22', 'edx_4', 'temp0_1']"
p2182
aS"Postfix operands: ['3', '<MLIL_CONST 4>', '<MLIL_DIVU_DP 4>', '<MLIL_SET_VAR 4>', '<MLIL_VAR_SPLIT 4>', 'eax_22', 'edx_4', 'temp0_1']"
p2183
aS'SSA form: temp0_1#2 = divu.dp.d(edx_4#5:eax_22#26, 3)'
p2184
aS'Non-SSA formtemp0_1 = divu.dp.d(edx_4:eax_22, 3)'
p2185
aS'Expression type: None'
p2186
aS'LLIL: temp1#2.d = modu.dp.d(edx#5:eax#26, ecx#6)'
p2187
aS'Value: <undetermined>'
p2188
aS'Possible values: <undetermined>'
p2189
aS'Branch dependence: {}'
p2190
aS"Prefix operands: ['3', '<MLIL_CONST 4>', '<MLIL_MODU_DP 4>', '<MLIL_SET_VAR 4>', '<MLIL_VAR_SPLIT 4>', 'eax_22', 'edx_4', 'temp1_1']"
p2191
aS"Postfix operands: ['3', '<MLIL_CONST 4>', '<MLIL_MODU_DP 4>', '<MLIL_SET_VAR 4>', '<MLIL_VAR_SPLIT 4>', 'eax_22', 'edx_4', 'temp1_1']"
p2192
aS'SSA form: temp1_1#2 = modu.dp.d(edx_4#5:eax_22#26, 3)'
p2193
aS'Non-SSA formtemp1_1 = modu.dp.d(edx_4:eax_22, 3)'
p2194
aS'Expression type: None'
p2195
aS'LLIL: eax#27 = temp0#2.d'
p2196
aS'Value: <undetermined>'
p2197
aS'Possible values: <undetermined>'
p2198
aS'Branch dependence: {}'
p2199
aS"Prefix operands: ['<MLIL_SET_VAR 4>', '<MLIL_VAR 4>', 'eax_23', 'temp0_1']"
p2200
aS"Postfix operands: ['<MLIL_SET_VAR 4>', '<MLIL_VAR 4>', 'eax_23', 'temp0_1']"
p2201
aS'SSA form: eax_23#27 = temp0_1#2'
p2202
aS'Non-SSA formeax_23 = temp0_1'
p2203
aS'Expression type: None'
p2204
aS'LLIL: edx#6 = temp1#2.d'
p2205
aS'Value: <undetermined>'
p2206
aS'Possible values: <undetermined>'
p2207
aS'Branch dependence: {}'
p2208
aS"Prefix operands: ['<MLIL_SET_VAR 4>', '<MLIL_VAR 4>', 'edx_5', 'temp1_1']"
p2209
aS"Postfix operands: ['<MLIL_SET_VAR 4>', '<MLIL_VAR 4>', 'edx_5', 'temp1_1']"
p2210
aS'SSA form: edx_5#6 = temp1_1#2'
p2211
aS'Non-SSA formedx_5 = temp1_1'
p2212
aS'Expression type: None'
p2213
aS'LLIL: [0x2000].d = [0x2000].d @ mem#11 + edx#6 @ mem#11 -> mem#12'
p2214
aS'Value: <undetermined>'
p2215
aS'Possible values: <undetermined>'
p2216
aS'Branch dependence: {}'
p2217
aS"Prefix operands: ['8192', '8192', '<MLIL_ADD 4>', '<MLIL_CONST_PTR 4>', '<MLIL_CONST_PTR 4>', '<MLIL_LOAD 4>', '<MLIL_STORE 4>', '<MLIL_VAR 4>', 'edx_5']"
p2218
aS"Postfix operands: ['8192', '8192', '<MLIL_ADD 4>', '<MLIL_CONST_PTR 4>', '<MLIL_CONST_PTR 4>', '<MLIL_LOAD 4>', '<MLIL_STORE 4>', '<MLIL_VAR 4>', 'edx_5']"
p2219
aS'SSA form: [0x2000].d = [0x2000].d @ mem#8 + edx_5#6 @ mem#8 -> mem#9'
p2220
aS'Non-SSA form[0x2000].d = [0x2000].d + edx_5'
p2221
aS'Expression type: None'
p2222
aS'LLIL: [0x2000].d = [0x2000].d @ mem#12 + eax#27 @ mem#12 -> mem#13'
p2223
aS'Value: <undetermined>'
p2224
aS'Possible values: <undetermined>'
p2225
aS'Branch dependence: {}'
p2226
aS"Prefix operands: ['8192', '8192', '<MLIL_ADD 4>', '<MLIL_CONST_PTR 4>', '<MLIL_CONST_PTR 4>', '<MLIL_LOAD 4>', '<MLIL_STORE 4>', '<MLIL_VAR 4>', 'eax_23']"
p2227
aS"Postfix operands: ['8192', '8192', '<MLIL_ADD 4>', '<MLIL_CONST_PTR 4>', '<MLIL_CONST_PTR 4>', '<MLIL_LOAD 4>', '<MLIL_STORE 4>', '<MLIL_VAR 4>', 'eax_23']"
p2228
aS'SSA form: [0x2000].d = [0x2000].d @ mem#9 + eax_23#27 @ mem#9 -> mem#10'
p2229
aS'Non-SSA form[0x2000].d = [0x2000].d + eax_23'
p2230
aS'Expression type: None'
p2231
aS'LLIL: eax#28 = neg.d(eax#27)'
p2232
aS'Value: <undetermined>'
p2233
aS'Possible values: <undetermined>'
p2234
aS'Branch dependence: {}'
p2235
aS"Prefix operands: ['<MLIL_NEG 4>', '<MLIL_SET_VAR 4>', '<MLIL_VAR 4>', 'eax_23', 'eax_24']"
p2236
aS"Postfix operands: ['<MLIL_NEG 4>', '<MLIL_SET_VAR 4>', '<MLIL_VAR 4>', 'eax_23', 'eax_24']"
p2237
aS'SSA form: eax_24#28 = neg.d(eax_23#27)'
p2238
aS'Non-SSA formeax_24 = neg.d(eax_23)'
p2239
aS'Expression type: None'
p2240
aS'LLIL: eax#29 = not.d(eax#28)'
p2241
aS'Value: <undetermined>'
p2242
aS'Possible values: <undetermined>'
p2243
aS'Branch dependence: {}'
p2244
aS"Prefix operands: ['<MLIL_NOT 4>', '<MLIL_SET_VAR 4>', '<MLIL_VAR 4>', 'eax_24', 'eax_25']"
p2245
aS"Postfix operands: ['<MLIL_NOT 4>', '<MLIL_SET_VAR 4>', '<MLIL_VAR 4>', 'eax_24', 'eax_25']"
p2246
aS'SSA form: eax_25#29 = not.d(eax_24#28)'
p2247
aS'Non-SSA formeax_25 = not.d(eax_24)'
p2248
aS'Expression type: None'
p2249
aS'LLIL: [0x2000].d = [0x2000].d @ mem#13 + eax#29 @ mem#13 -> mem#14'
p2250
aS'Value: <undetermined>'
p2251
aS'Possible values: <undetermined>'
p2252
aS'Branch dependence: {}'
p2253
aS"Prefix operands: ['8192', '8192', '<MLIL_ADD 4>', '<MLIL_CONST_PTR 4>', '<MLIL_CONST_PTR 4>', '<MLIL_LOAD 4>', '<MLIL_STORE 4>', '<MLIL_VAR 4>', 'eax_25']"
p2254
aS"Postfix operands: ['8192', '8192', '<MLIL_ADD 4>', '<MLIL_CONST_PTR 4>', '<MLIL_CONST_PTR 4>', '<MLIL_LOAD 4>', '<MLIL_STORE 4>', '<MLIL_VAR 4>', 'eax_25']"
p2255
aS'SSA form: [0x2000].d = [0x2000].d @ mem#10 + eax_25#29 @ mem#10 -> mem#11'
p2256
aS'Non-SSA form[0x2000].d = [0x2000].d + eax_25'
p2257
aS'Expression type: None'
p2258
aS'LLIL: eax#30 = sx.d(eax#29.ax)'
p2259
aS'Value: <undetermined>'
p2260
aS'Possible values: <undetermined>'
p2261
aS'Branch dependence: {}'
p2262
aS"Prefix operands: ['0', '<MLIL_SET_VAR 4>', '<MLIL_SX 4>', '<MLIL_VAR_FIELD 2>', 'eax_25', 'eax_26']"
p2263
aS"Postfix operands: ['0', '<MLIL_SET_VAR 4>', '<MLIL_SX 4>', '<MLIL_VAR_FIELD 2>', 'eax_25', 'eax_26']"
p2264
aS'SSA form: eax_26#30 = sx.d(eax_25#29.ax)'
p2265
aS'Non-SSA formeax_26 = sx.d(eax_25.ax)'
p2266
aS'Expression type: None'
p2267
aS'LLIL: edx#7 = zx.d(edx#6.dx)'
p2268
aS'Value: <undetermined>'
p2269
aS'Possible values: <undetermined>'
p2270
aS'Branch dependence: {}'
p2271
aS"Prefix operands: ['0', '<MLIL_SET_VAR 4>', '<MLIL_VAR_FIELD 2>', '<MLIL_ZX 4>', 'edx_5', 'edx_6']"
p2272
aS"Postfix operands: ['0', '<MLIL_SET_VAR 4>', '<MLIL_VAR_FIELD 2>', '<MLIL_ZX 4>', 'edx_5', 'edx_6']"
p2273
aS'SSA form: edx_6#7 = zx.d(edx_5#6.dx)'
p2274
aS'Non-SSA formedx_6 = zx.d(edx_5.dx)'
p2275
aS'Expression type: None'
p2276
aS'LLIL: eax#31 = eax#30 + edx#7'
p2277
aS'Value: <undetermined>'
p2278
aS'Possible values: <undetermined>'
p2279
aS'Branch dependence: {}'
p2280
aS"Prefix operands: ['<MLIL_ADD 4>', '<MLIL_SET_VAR 4>', '<MLIL_VAR 4>', '<MLIL_VAR 4>', 'eax_26', 'eax_27', 'edx_6']"
p2281
aS"Postfix operands: ['<MLIL_ADD 4>', '<MLIL_SET_VAR 4>', '<MLIL_VAR 4>', '<MLIL_VAR 4>', 'eax_26', 'eax_27', 'edx_6']"
p2282
aS'SSA form: eax_27#31 = eax_26#30 + edx_6#7'
p2283
aS'Non-SSA formeax_27 = eax_26 + edx_6'
p2284
aS'Expression type: None'
p2285
aS'LLIL: [0x2000].d = [0x2000].d @ mem#14 + eax#31 @ mem#14 -> mem#15'
p2286
aS'Value: <undetermined>'
p2287
aS'Possible values: <undetermined>'
p2288
aS'Branch dependence: {}'
p2289
aS"Prefix operands: ['8192', '8192', '<MLIL_ADD 4>', '<MLIL_CONST_PTR 4>', '<MLIL_CONST_PTR 4>', '<MLIL_LOAD 4>', '<MLIL_STORE 4>', '<MLIL_VAR 4>', 'eax_27']"
p2290
aS"Postfix operands: ['8192', '8192', '<MLIL_ADD 4>', '<MLIL_CONST_PTR 4>', '<MLIL_CONST_PTR 4>', '<MLIL_LOAD 4>', '<MLIL_STORE 4>', '<MLIL_VAR 4>', 'eax_27']"
p2291
aS'SSA form: [0x2000].d = [0x2000].d @ mem#11 + eax_27#31 @ mem#11 -> mem#12'
p2292
aS'Non-SSA form[0x2000].d = [0x2000].d + eax_27'
p2293
aS'Expression type: None'
p2294
aS'LLIL: eax#32 = [0x2000].d @ mem#15'
p2295
aS'Value: <undetermined>'
p2296
aS'Possible values: <undetermined>'
p2297
aS'Branch dependence: {}'
p2298
aS"Prefix operands: ['8192', '<MLIL_CONST_PTR 4>', '<MLIL_LOAD 4>', '<MLIL_SET_VAR 4>', 'eax_28']"
p2299
aS"Postfix operands: ['8192', '<MLIL_CONST_PTR 4>', '<MLIL_LOAD 4>', '<MLIL_SET_VAR 4>', 'eax_28']"
p2300
aS'SSA form: eax_28#32 = [0x2000].d @ mem#12'
p2301
aS'Non-SSA formeax_28 = [0x2000].d'
p2302
aS'Expression type: None'
p2303
aS'LLIL: eax#33 = eax#32 & 0x10'
p2304
aS'Value: <undetermined>'
p2305
aS'Possible values: <undetermined>'
p2306
aS'Branch dependence: {}'
p2307
aS"Prefix operands: ['16', '<MLIL_AND 4>', '<MLIL_CONST 4>', '<MLIL_SET_VAR 4>', '<MLIL_VAR 4>', 'eax_28', 'eax_29']"
p2308
aS"Postfix operands: ['16', '<MLIL_AND 4>', '<MLIL_CONST 4>', '<MLIL_SET_VAR 4>', '<MLIL_VAR 4>', 'eax_28', 'eax_29']"
p2309
aS'SSA form: eax_29#33 = eax_28#32 & 0x10'
p2310
aS'Non-SSA formeax_29 = eax_28 & 0x10'
p2311
aS'Expression type: None'
p2312
aS'LLIL: if (eax#33 == 0) then 78 @ 0x1fed else 80 @ 0x1f2d'
p2313
aS'Value: <undetermined>'
p2314
aS'Possible values: <undetermined>'
p2315
aS'Branch dependence: {}'
p2316
aS"Prefix operands: ['0', '60', '62', '<MLIL_CMP_E 4>', '<MLIL_CONST 4>', '<MLIL_IF>', '<MLIL_VAR 4>', 'eax_29']"
p2317
aS"Postfix operands: ['0', '60', '62', '<MLIL_CMP_E 4>', '<MLIL_CONST 4>', '<MLIL_IF>', '<MLIL_VAR 4>', 'eax_29']"
p2318
aS'SSA form: if (eax_29#33 == 0) then 60 @ 0x1fed else 62 @ 0x1f2d'
p2319
aS'Non-SSA formif (eax_29 == 0) then 60 @ 0x1fed else 62 @ 0x1f2d'
p2320
aS'Expression type: None'
p2321
aS'LLIL: eax#34 = [0x2000].d @ mem#15'
p2322
aS'Value: <undetermined>'
p2323
aS'Possible values: <undetermined>'
p2324
aS'Branch dependence: {59L: <ILBranchDependence.TrueBranchDependent: 1>}'
p2325
aS"Prefix operands: ['8192', '<MLIL_CONST_PTR 4>', '<MLIL_LOAD 4>', '<MLIL_SET_VAR 4>', 'eax_39']"
p2326
aS"Postfix operands: ['8192', '<MLIL_CONST_PTR 4>', '<MLIL_LOAD 4>', '<MLIL_SET_VAR 4>', 'eax_39']"
p2327
aS'SSA form: eax_39#34 = [0x2000].d @ mem#12'
p2328
aS'Non-SSA formeax_39 = [0x2000].d'
p2329
aS'Expression type: None'
p2330
aS'LLIL: jump(eax#34)'
p2331
aS'Value: <undetermined>'
p2332
aS'Possible values: <undetermined>'
p2333
aS'Branch dependence: {59L: <ILBranchDependence.TrueBranchDependent: 1>}'
p2334
aS"Prefix operands: ['<MLIL_JUMP>', '<MLIL_VAR 4>', 'eax_39']"
p2335
aS"Postfix operands: ['<MLIL_JUMP>', '<MLIL_VAR 4>', 'eax_39']"
p2336
aS'SSA form: jump(eax_39#34)'
p2337
aS'Non-SSA formjump(eax_39)'
p2338
aS'Expression type: None'
p2339
aS'LLIL: eax#35 = eax#33 & 0x1'
p2340
aS'Value: <undetermined>'
p2341
aS'Possible values: <undetermined>'
p2342
aS'Branch dependence: {59L: <ILBranchDependence.FalseBranchDependent: 2>}'
p2343
aS"Prefix operands: ['1', '<MLIL_AND 4>', '<MLIL_CONST 4>', '<MLIL_SET_VAR 4>', '<MLIL_VAR 4>', 'eax_29', 'eax_30']"
p2344
aS"Postfix operands: ['1', '<MLIL_AND 4>', '<MLIL_CONST 4>', '<MLIL_SET_VAR 4>', '<MLIL_VAR 4>', 'eax_29', 'eax_30']"
p2345
aS'SSA form: eax_30#35 = eax_29#33 & 1'
p2346
aS'Non-SSA formeax_30 = eax_29 & 1'
p2347
aS'Expression type: None'
p2348
aS'LLIL: eax#36 = [(eax#35 << 2) + 0x1f3b].d @ mem#15'
p2349
aS'Value: <undetermined>'
p2350
aS'Possible values: <undetermined>'
p2351
aS'Branch dependence: {59L: <ILBranchDependence.FalseBranchDependent: 2>}'
p2352
aS"Prefix operands: ['2', '7995', '<MLIL_ADD 4>', '<MLIL_CONST 1>', '<MLIL_CONST 4>', '<MLIL_LOAD 4>', '<MLIL_LSL 4>', '<MLIL_SET_VAR 4>', '<MLIL_VAR 4>', 'eax_30', 'eax_31']"
p2353
aS"Postfix operands: ['2', '7995', '<MLIL_ADD 4>', '<MLIL_CONST 1>', '<MLIL_CONST 4>', '<MLIL_LOAD 4>', '<MLIL_LSL 4>', '<MLIL_SET_VAR 4>', '<MLIL_VAR 4>', 'eax_30', 'eax_31']"
p2354
aS'SSA form: eax_31#36 = [(eax_30#35 << 2) + 0x1f3b].d @ mem#12'
p2355
aS'Non-SSA formeax_31 = [(eax_30 << 2) + 0x1f3b].d'
p2356
aS'Expression type: None'
p2357
aS'LLIL: jump(eax#36 => 83 @ 0x1f43)'
p2358
aS'Value: <undetermined>'
p2359
aS'Possible values: <undetermined>'
p2360
aS'Branch dependence: {59L: <ILBranchDependence.FalseBranchDependent: 2>}'
p2361
aS"Prefix operands: ['<MLIL_JUMP_TO>', '<MLIL_VAR 4>', '[65L]', 'eax_31']"
p2362
aS"Postfix operands: ['<MLIL_JUMP_TO>', '<MLIL_VAR 4>', '[65L]', 'eax_31']"
p2363
aS'SSA form: jump(eax_31#36 => 65 @ 0x1f43)'
p2364
aS'Non-SSA formjump(eax_31 => 65 @ 0x1f43)'
p2365
aS'Expression type: None'
p2366
aS'LLIL: eax#37 = eax#36 + 1'
p2367
aS'Value: <undetermined>'
p2368
aS'Possible values: <undetermined>'
p2369
aS'Branch dependence: {59L: <ILBranchDependence.FalseBranchDependent: 2>}'
p2370
aS"Prefix operands: ['1', '<MLIL_ADD 4>', '<MLIL_CONST 4>', '<MLIL_SET_VAR 4>', '<MLIL_VAR 4>', 'eax_31', 'eax_32']"
p2371
aS"Postfix operands: ['1', '<MLIL_ADD 4>', '<MLIL_CONST 4>', '<MLIL_SET_VAR 4>', '<MLIL_VAR 4>', 'eax_31', 'eax_32']"
p2372
aS'SSA form: eax_32#37 = eax_31#36 + 1'
p2373
aS'Non-SSA formeax_32 = eax_31 + 1'
p2374
aS'Expression type: None'
p2375
aS'LLIL: goto 85 @ 0x1f4f'
p2376
aS'Value: <undetermined>'
p2377
aS'Possible values: <undetermined>'
p2378
aS'Branch dependence: {59L: <ILBranchDependence.FalseBranchDependent: 2>}'
p2379
aS"Prefix operands: ['67', '<MLIL_GOTO>']"
p2380
aS"Postfix operands: ['67', '<MLIL_GOTO>']"
p2381
aS'SSA form: goto 67 @ 0x1f4f'
p2382
aS'Non-SSA formgoto 67 @ 0x1f4f'
p2383
aS'Expression type: None'
p2384
aS'LLIL: [0x2000].d = eax#37 @ mem#15 -> mem#16'
p2385
aS'Value: <undetermined>'
p2386
aS'Possible values: <undetermined>'
p2387
aS'Branch dependence: {59L: <ILBranchDependence.FalseBranchDependent: 2>}'
p2388
aS"Prefix operands: ['8192', '<MLIL_CONST_PTR 4>', '<MLIL_STORE 4>', '<MLIL_VAR 4>', 'eax_32']"
p2389
aS"Postfix operands: ['8192', '<MLIL_CONST_PTR 4>', '<MLIL_STORE 4>', '<MLIL_VAR 4>', 'eax_32']"
p2390
aS'SSA form: [0x2000].d = eax_32#37 @ mem#12 -> mem#13'
p2391
aS'Non-SSA form[0x2000].d = eax_32'
p2392
aS'Expression type: None'
p2393
aS'LLIL: [esp#6 - 4].d = eax#37 @ mem#16 -> mem#17'
p2394
aS'Value: <undetermined>'
p2395
aS'Possible values: <undetermined>'
p2396
aS'Branch dependence: {59L: <ILBranchDependence.FalseBranchDependent: 2>}'
p2397
aS"Prefix operands: ['<MLIL_SET_VAR 4>', '<MLIL_VAR 4>', 'eax_32', 'var_4_2']"
p2398
aS"Postfix operands: ['<MLIL_SET_VAR 4>', '<MLIL_VAR 4>', 'eax_32', 'var_4_2']"
p2399
aS'SSA form: var_4_2#3 = eax_32#37'
p2400
aS'Non-SSA formvar_4_2 = eax_32'
p2401
aS'Expression type: None'
p2402
aS'LLIL: eax#38, mem#19 = call(0x1ff7, stack = esp#8 @ mem#18)'
p2403
aS'Value: <undetermined>'
p2404
aS'Possible values: <undetermined>'
p2405
aS'Branch dependence: {59L: <ILBranchDependence.FalseBranchDependent: 2>}'
p2406
aS"Prefix operands: ['8183', '<MLIL_CALL>', '<MLIL_CONST_PTR 4>', '[<il: 5>, <il: var_4_2>]', '[<var int32_t eax_33>]']"
p2407
aS"Postfix operands: ['8183', '<MLIL_CALL>', '<MLIL_CONST_PTR 4>', '[<il: 5>, <il: var_4_2>]', '[<var int32_t eax_33>]']"
p2408
aS'SSA form: eax_33#38, mem#14 = 0x1ff7(5, var_4_2#3) @ mem#13'
p2409
aS'Non-SSA formeax_33 = 0x1ff7(5, var_4_2)'
p2410
aS'Expression type: None'
p2411
aS'LLIL: [0x2000].d = eax#38 @ mem#19 -> mem#20'
p2412
aS'Value: <undetermined>'
p2413
aS'Possible values: <undetermined>'
p2414
aS'Branch dependence: {59L: <ILBranchDependence.FalseBranchDependent: 2>}'
p2415
aS"Prefix operands: ['8192', '<MLIL_CONST_PTR 4>', '<MLIL_STORE 4>', '<MLIL_VAR 4>', 'eax_33']"
p2416
aS"Postfix operands: ['8192', '<MLIL_CONST_PTR 4>', '<MLIL_STORE 4>', '<MLIL_VAR 4>', 'eax_33']"
p2417
aS'SSA form: [0x2000].d = eax_33#38 @ mem#14 -> mem#15'
p2418
aS'Non-SSA form[0x2000].d = eax_33'
p2419
aS'Expression type: None'
p2420
aS'LLIL: eax#39 = eax#38 & 0x80'
p2421
aS'Value: <undetermined>'
p2422
aS'Possible values: <undetermined>'
p2423
aS'Branch dependence: {59L: <ILBranchDependence.FalseBranchDependent: 2>}'
p2424
aS"Prefix operands: ['128', '<MLIL_AND 4>', '<MLIL_CONST 4>', '<MLIL_SET_VAR 4>', '<MLIL_VAR 4>', 'eax_33', 'eax_34']"
p2425
aS"Postfix operands: ['128', '<MLIL_AND 4>', '<MLIL_CONST 4>', '<MLIL_SET_VAR 4>', '<MLIL_VAR 4>', 'eax_33', 'eax_34']"
p2426
aS'SSA form: eax_34#39 = eax_33#38 & 0x80'
p2427
aS'Non-SSA formeax_34 = eax_33 & 0x80'
p2428
aS'Expression type: None'
p2429
aS'LLIL: if (eax#39 != 0) then 95 @ 0x1f7b else 96 @ 0x1f71'
p2430
aS'Value: <undetermined>'
p2431
aS'Possible values: <undetermined>'
p2432
aS'Branch dependence: {59L: <ILBranchDependence.FalseBranchDependent: 2>}'
p2433
aS"Prefix operands: ['0', '73', '74', '<MLIL_CMP_NE 4>', '<MLIL_CONST 4>', '<MLIL_IF>', '<MLIL_VAR 4>', 'eax_34']"
p2434
aS"Postfix operands: ['0', '73', '74', '<MLIL_CMP_NE 4>', '<MLIL_CONST 4>', '<MLIL_IF>', '<MLIL_VAR 4>', 'eax_34']"
p2435
aS'SSA form: if (eax_34#39 != 0) then 73 @ 0x1f7b else 74 @ 0x1f71'
p2436
aS'Non-SSA formif (eax_34 != 0) then 73 @ 0x1f7b else 74 @ 0x1f71'
p2437
aS'Expression type: None'
p2438
aS'LLIL: if (eax#39 == 5) then 98 @ 0x1fc2 else 104 @ 0x1f82'
p2439
aS'Value: <undetermined>'
p2440
aS'Possible values: <undetermined>'
p2441
aS'Branch dependence: {72L: <ILBranchDependence.TrueBranchDependent: 1>, 59L: <ILBranchDependence.FalseBranchDependent: 2>}'
p2442
aS"Prefix operands: ['5', '76', '81', '<MLIL_CMP_E 4>', '<MLIL_CONST 4>', '<MLIL_IF>', '<MLIL_VAR 4>', 'eax_34']"
p2443
aS"Postfix operands: ['5', '76', '81', '<MLIL_CMP_E 4>', '<MLIL_CONST 4>', '<MLIL_IF>', '<MLIL_VAR 4>', 'eax_34']"
p2444
aS'SSA form: if (eax_34#39 == 5) then 76 @ 0x0 else 77 @ 0x1f82'
p2445
aS'Non-SSA formif (eax_34 == 5) then 76 @ 0x1fc2 else 81 @ 0x1f82'
p2446
aS'Expression type: None'
p2447
aS'LLIL: mem#26 = call(0x1ff4, stack = esp#9 @ mem#20)'
p2448
aS'Value: <undetermined>'
p2449
aS'Possible values: <undetermined>'
p2450
aS'Branch dependence: {72L: <ILBranchDependence.FalseBranchDependent: 2>, 59L: <ILBranchDependence.FalseBranchDependent: 2>}'
p2451
aS"Prefix operands: ['8180', '<MLIL_CALL>', '<MLIL_CONST_PTR 4>', '[]', '[]']"
p2452
aS"Postfix operands: ['8180', '<MLIL_CALL>', '<MLIL_CONST_PTR 4>', '[]', '[]']"
p2453
aS'SSA form: mem#19 = 0x1ff4() @ mem#15'
p2454
aS'Non-SSA form0x1ff4()'
p2455
aS'Expression type: None'
p2456
aS'LLIL: noreturn'
p2457
aS'Value: <undetermined>'
p2458
aS'Possible values: <undetermined>'
p2459
aS'Branch dependence: {72L: <ILBranchDependence.FalseBranchDependent: 2>, 59L: <ILBranchDependence.FalseBranchDependent: 2>}'
p2460
aS"Prefix operands: ['<MLIL_NORET>']"
p2461
aS"Postfix operands: ['<MLIL_NORET>']"
p2462
aS'SSA form: noreturn'
p2463
aS'Non-SSA formnoreturn'
p2464
aS'Expression type: None'
p2465
aS'LLIL: [0x2000].d = eax#40 @ mem#20 -> mem#21'
p2466
aS'Value: <undetermined>'
p2467
aS'Possible values: <undetermined>'
p2468
aS'Branch dependence: {72L: <ILBranchDependence.TrueBranchDependent: 1>, 59L: <ILBranchDependence.FalseBranchDependent: 2>}'
p2469
aS"Prefix operands: ['8192', '<MLIL_CONST_PTR 4>', '<MLIL_STORE 4>', '<MLIL_VAR 4>', 'eax_34']"
p2470
aS"Postfix operands: ['8192', '<MLIL_CONST_PTR 4>', '<MLIL_STORE 4>', '<MLIL_VAR 4>', 'eax_34']"
p2471
aS'SSA form: [0x2000].d = eax_34#41 @ mem#15 -> mem#16'
p2472
aS'Non-SSA form[0x2000].d = eax_34'
p2473
aS'Expression type: None'
p2474
aS'LLIL: temp3#1.d = eax#40'
p2475
aS'Value: <undetermined>'
p2476
aS'Possible values: <undetermined>'
p2477
aS'Branch dependence: {72L: <ILBranchDependence.TrueBranchDependent: 1>, 59L: <ILBranchDependence.FalseBranchDependent: 2>}'
p2478
aS"Prefix operands: ['<MLIL_SET_VAR 4>', '<MLIL_VAR 4>', 'eax_34', 'temp3']"
p2479
aS"Postfix operands: ['<MLIL_SET_VAR 4>', '<MLIL_VAR 4>', 'eax_34', 'temp3']"
p2480
aS'SSA form: temp3#1 = eax_34#41'
p2481
aS'Non-SSA formtemp3 = eax_34'
p2482
aS'Expression type: None'
p2483
aS'LLIL: eax#41 = temp3#1.d + 8'
p2484
aS'Value: <undetermined>'
p2485
aS'Possible values: <undetermined>'
p2486
aS'Branch dependence: {72L: <ILBranchDependence.TrueBranchDependent: 1>, 59L: <ILBranchDependence.FalseBranchDependent: 2>}'
p2487
aS"Prefix operands: ['8', '<MLIL_ADD 4>', '<MLIL_CONST 4>', '<MLIL_SET_VAR 4>', '<MLIL_VAR 4>', 'eax_35', 'temp3']"
p2488
aS"Postfix operands: ['8', '<MLIL_ADD 4>', '<MLIL_CONST 4>', '<MLIL_SET_VAR 4>', '<MLIL_VAR 4>', 'eax_35', 'temp3']"
p2489
aS'SSA form: eax_35#42 = temp3#1 + 8'
p2490
aS'Non-SSA formeax_35 = temp3 + 8'
p2491
aS'Expression type: None'
p2492
aS'LLIL: flag:o#1 = add_overflow(temp3#1.d, 8)'
p2493
aS'Value: <undetermined>'
p2494
aS'Possible values: <undetermined>'
p2495
aS'Branch dependence: {72L: <ILBranchDependence.TrueBranchDependent: 1>, 59L: <ILBranchDependence.FalseBranchDependent: 2>}'
p2496
aS"Prefix operands: ['8', '<MLIL_ADD_OVERFLOW>', '<MLIL_CONST 4>', '<MLIL_SET_VAR>', '<MLIL_VAR 4>', 'o', 'temp3']"
p2497
aS"Postfix operands: ['8', '<MLIL_ADD_OVERFLOW>', '<MLIL_CONST 4>', '<MLIL_SET_VAR>', '<MLIL_VAR 4>', 'o', 'temp3']"
p2498
aS'SSA form: o#1 = add_overflow(temp3#1, 8)'
p2499
aS'Non-SSA formo = add_overflow(temp3, 8)'
p2500
aS'Expression type: None'
p2501
aS'LLIL: if (not(flag:o#1)) then 105 @ 0x1fd0 else 108 @ 0x1fce'
p2502
aS'Value: <undetermined>'
p2503
aS'Possible values: <undetermined>'
p2504
aS'Branch dependence: {72L: <ILBranchDependence.TrueBranchDependent: 1>, 59L: <ILBranchDependence.FalseBranchDependent: 2>}'
p2505
aS"Prefix operands: ['82', '85', '<MLIL_IF>', '<MLIL_NOT>', '<MLIL_VAR>', 'o']"
p2506
aS"Postfix operands: ['82', '85', '<MLIL_IF>', '<MLIL_NOT>', '<MLIL_VAR>', 'o']"
p2507
aS'SSA form: if (not(o#1)) then 86 @ 0x1fd0 else 89 @ 0x1fce'
p2508
aS'Non-SSA formif (not(o)) then 82 @ 0x1fd0 else 85 @ 0x1fce'
p2509
aS'Expression type: None'
p2510
aS'LLIL: if (eax#39 != 8) then 109 @ 0x1f8e else 110 @ 0x1f84'
p2511
aS'Value: <undetermined>'
p2512
aS'Possible values: <undetermined>'
p2513
aS'Branch dependence: {72L: <ILBranchDependence.TrueBranchDependent: 1>, 73L: <ILBranchDependence.FalseBranchDependent: 2>, 59L: <ILBranchDependence.FalseBranchDependent: 2>}'
p2514
aS"Prefix operands: ['8', '86', '87', '<MLIL_CMP_NE 4>', '<MLIL_CONST 4>', '<MLIL_IF>', '<MLIL_VAR 4>', 'eax_34']"
p2515
aS"Postfix operands: ['8', '86', '87', '<MLIL_CMP_NE 4>', '<MLIL_CONST 4>', '<MLIL_IF>', '<MLIL_VAR 4>', 'eax_34']"
p2516
aS'SSA form: if (eax_34#39 != 8) then 84 @ 0x1f8e else 85 @ 0x1f84'
p2517
aS'Non-SSA formif (eax_34 != 8) then 86 @ 0x1f8e else 87 @ 0x1f84'
p2518
aS'Expression type: None'
p2519
aS'LLIL: [0x2000].d = eax#41 @ mem#21 -> mem#22'
p2520
aS'Value: <undetermined>'
p2521
aS'Possible values: <undetermined>'
p2522
aS'Branch dependence: {80L: <ILBranchDependence.TrueBranchDependent: 1>, 72L: <ILBranchDependence.TrueBranchDependent: 1>, 59L: <ILBranchDependence.FalseBranchDependent: 2>}'
p2523
aS"Prefix operands: ['8192', '<MLIL_CONST_PTR 4>', '<MLIL_STORE 4>', '<MLIL_VAR 4>', 'eax_35']"
p2524
aS"Postfix operands: ['8192', '<MLIL_CONST_PTR 4>', '<MLIL_STORE 4>', '<MLIL_VAR 4>', 'eax_35']"
p2525
aS'SSA form: [0x2000].d = eax_35#42 @ mem#16 -> mem#17'
p2526
aS'Non-SSA form[0x2000].d = eax_35'
p2527
aS'Expression type: None'
p2528
aS'LLIL: eax#42 = eax#41 & 0x1'
p2529
aS'Value: <undetermined>'
p2530
aS'Possible values: <undetermined>'
p2531
aS'Branch dependence: {80L: <ILBranchDependence.TrueBranchDependent: 1>, 72L: <ILBranchDependence.TrueBranchDependent: 1>, 59L: <ILBranchDependence.FalseBranchDependent: 2>}'
p2532
aS"Prefix operands: ['1', '<MLIL_AND 4>', '<MLIL_CONST 4>', '<MLIL_SET_VAR 4>', '<MLIL_VAR 4>', 'eax_35', 'eax_36']"
p2533
aS"Postfix operands: ['1', '<MLIL_AND 4>', '<MLIL_CONST 4>', '<MLIL_SET_VAR 4>', '<MLIL_VAR 4>', 'eax_35', 'eax_36']"
p2534
aS'SSA form: eax_36#43 = eax_35#42 & 1'
p2535
aS'Non-SSA formeax_36 = eax_35 & 1'
p2536
aS'Expression type: None'
p2537
aS'LLIL: if (eax#42 == 0) then 111 @ 0x1fdf else 118 @ 0x1fdc'
p2538
aS'Value: <undetermined>'
p2539
aS'Possible values: <undetermined>'
p2540
aS'Branch dependence: {80L: <ILBranchDependence.TrueBranchDependent: 1>, 72L: <ILBranchDependence.TrueBranchDependent: 1>, 59L: <ILBranchDependence.FalseBranchDependent: 2>}'
p2541
aS"Prefix operands: ['0', '88', '90', '<MLIL_CMP_E 4>', '<MLIL_CONST 4>', '<MLIL_IF>', '<MLIL_VAR 4>', 'eax_36']"
p2542
aS"Postfix operands: ['0', '88', '90', '<MLIL_CMP_E 4>', '<MLIL_CONST 4>', '<MLIL_IF>', '<MLIL_VAR 4>', 'eax_36']"
p2543
aS'SSA form: if (eax_36#43 == 0) then 92 @ 0x1fea else 94 @ 0x1fdc'
p2544
aS'Non-SSA formif (eax_36 == 0) then 88 @ 0x1fea else 90 @ 0x1fdc'
p2545
aS'Expression type: None'
p2546
aS'LLIL: trap(6)'
p2547
aS'Value: <undetermined>'
p2548
aS'Possible values: <undetermined>'
p2549
aS'Branch dependence: {80L: <ILBranchDependence.FalseBranchDependent: 2>, 72L: <ILBranchDependence.TrueBranchDependent: 1>, 59L: <ILBranchDependence.FalseBranchDependent: 2>}'
p2550
aS"Prefix operands: ['6', '<MLIL_TRAP>']"
p2551
aS"Postfix operands: ['6', '<MLIL_TRAP>']"
p2552
aS'SSA form: trap(6)'
p2553
aS'Non-SSA formtrap(6)'
p2554
aS'Expression type: None'
p2555
aS'LLIL: if (eax#39 s< 0xc) then 98 @ 0x1fc2 else 120 @ 0x1f95'
p2556
aS'Value: <undetermined>'
p2557
aS'Possible values: <undetermined>'
p2558
aS'Branch dependence: {72L: <ILBranchDependence.TrueBranchDependent: 1>, 81L: <ILBranchDependence.TrueBranchDependent: 1>, 59L: <ILBranchDependence.FalseBranchDependent: 2>, 73L: <ILBranchDependence.FalseBranchDependent: 2>}'
p2559
aS"Prefix operands: ['12', '76', '92', '<MLIL_CMP_SLT 4>', '<MLIL_CONST 4>', '<MLIL_IF>', '<MLIL_VAR 4>', 'eax_34']"
p2560
aS"Postfix operands: ['12', '76', '92', '<MLIL_CMP_SLT 4>', '<MLIL_CONST 4>', '<MLIL_IF>', '<MLIL_VAR 4>', 'eax_34']"
p2561
aS'SSA form: if (eax_34#39 s< 0xc) then 90 @ 0x0 else 91 @ 0x1f95'
p2562
aS'Non-SSA formif (eax_34 s< 0xc) then 76 @ 0x1fc2 else 92 @ 0x1f95'
p2563
aS'Expression type: None'
p2564
aS'LLIL: goto 98 @ 0x1fc2'
p2565
aS'Value: <undetermined>'
p2566
aS'Possible values: <undetermined>'
p2567
aS'Branch dependence: {72L: <ILBranchDependence.TrueBranchDependent: 1>, 81L: <ILBranchDependence.FalseBranchDependent: 2>, 59L: <ILBranchDependence.FalseBranchDependent: 2>, 73L: <ILBranchDependence.FalseBranchDependent: 2>}'
p2568
aS"Prefix operands: ['76', '<MLIL_GOTO>']"
p2569
aS"Postfix operands: ['76', '<MLIL_GOTO>']"
p2570
aS'SSA form: goto 78 @ 0x1fc2'
p2571
aS'Non-SSA formgoto 76 @ 0x1fc2'
p2572
aS'Expression type: None'
p2573
aS'LLIL: eax#44, edx#8, ecx#7, mem#25 = syscall(stack = esp#11 @ mem#24)'
p2574
aS'Value: <undetermined>'
p2575
aS'Possible values: <undetermined>'
p2576
aS'Branch dependence: {80L: <ILBranchDependence.TrueBranchDependent: 1>, 72L: <ILBranchDependence.TrueBranchDependent: 1>, 59L: <ILBranchDependence.FalseBranchDependent: 2>, 84L: <ILBranchDependence.TrueBranchDependent: 1>}'
p2577
aS"Prefix operands: ['<MLIL_SYSCALL>', '[<il: 1>, <il: 0>]', '[<var int32_t eax_38>]']"
p2578
aS"Postfix operands: ['<MLIL_SYSCALL>', '[<il: 1>, <il: 0>]', '[<var int32_t eax_38>]']"
p2579
aS'SSA form: eax_38#44, mem#18 = syscall(1, 0) @ mem#17'
p2580
aS'Non-SSA formeax_38 = syscall(1, 0)'
p2581
aS'Expression type: None'
p2582
aS'LLIL: <return> jump([esp#11].d @ mem#25)'
p2583
aS'Value: <undetermined>'
p2584
aS'Possible values: <undetermined>'
p2585
aS'Branch dependence: {80L: <ILBranchDependence.TrueBranchDependent: 1>, 72L: <ILBranchDependence.TrueBranchDependent: 1>, 59L: <ILBranchDependence.FalseBranchDependent: 2>, 84L: <ILBranchDependence.TrueBranchDependent: 1>}'
p2586
aS"Prefix operands: ['<MLIL_RET>', '[<il: eax_38>]']"
p2587
aS"Postfix operands: ['<MLIL_RET>', '[<il: eax_38>]']"
p2588
aS'SSA form: return eax_38#44'
p2589
aS'Non-SSA formreturn eax_38'
p2590
aS'Expression type: None'
p2591
aS'LLIL: eax#45 = 0'
p2592
aS'Value: <undetermined>'
p2593
aS'Possible values: <undetermined>'
p2594
aS'Branch dependence: {80L: <ILBranchDependence.TrueBranchDependent: 1>, 72L: <ILBranchDependence.TrueBranchDependent: 1>, 59L: <ILBranchDependence.FalseBranchDependent: 2>, 84L: <ILBranchDependence.FalseBranchDependent: 2>}'
p2595
aS"Prefix operands: ['0', '<MLIL_CONST 4>', '<MLIL_SET_VAR 4>', 'eax_37']"
p2596
aS"Postfix operands: ['0', '<MLIL_CONST 4>', '<MLIL_SET_VAR 4>', 'eax_37']"
p2597
aS'SSA form: eax_37#45 = 0'
p2598
aS'Non-SSA formeax_37 = 0'
p2599
aS'Expression type: None'
p2600
aS'LLIL: <return> jump([esp#9].d @ mem#22)'
p2601
aS'Value: <undetermined>'
p2602
aS'Possible values: <undetermined>'
p2603
aS'Branch dependence: {80L: <ILBranchDependence.TrueBranchDependent: 1>, 72L: <ILBranchDependence.TrueBranchDependent: 1>, 59L: <ILBranchDependence.FalseBranchDependent: 2>, 84L: <ILBranchDependence.FalseBranchDependent: 2>}'
p2604
aS"Prefix operands: ['<MLIL_RET>', '[<il: 0>]']"
p2605
aS"Postfix operands: ['<MLIL_RET>', '[<il: 0>]']"
p2606
aS'SSA form: return 0'
p2607
aS'Non-SSA formreturn 0'
p2608
aS'Expression type: None'
p2609
aS'LLIL: if (eax#39 u< 0xe) then 98 @ 0x1fc2 else 121 @ 0x1f9c'
p2610
aS'Value: <undetermined>'
p2611
aS'Possible values: <undetermined>'
p2612
aS'Branch dependence: {72L: <ILBranchDependence.TrueBranchDependent: 1>, 81L: <ILBranchDependence.TrueBranchDependent: 1>, 59L: <ILBranchDependence.FalseBranchDependent: 2>, 86L: <ILBranchDependence.FalseBranchDependent: 2>, 73L: <ILBranchDependence.FalseBranchDependent: 2>}'
p2613
aS"Prefix operands: ['14', '76', '93', '<MLIL_CMP_ULT 4>', '<MLIL_CONST 4>', '<MLIL_IF>', '<MLIL_VAR 4>', 'eax_34']"
p2614
aS"Postfix operands: ['14', '76', '93', '<MLIL_CMP_ULT 4>', '<MLIL_CONST 4>', '<MLIL_IF>', '<MLIL_VAR 4>', 'eax_34']"
p2615
aS'SSA form: if (eax_34#39 u< 0xe) then 96 @ 0x0 else 97 @ 0x1f9c'
p2616
aS'Non-SSA formif (eax_34 u< 0xe) then 76 @ 0x1fc2 else 93 @ 0x1f9c'
p2617
aS'Expression type: None'
p2618
aS'LLIL: if (eax#39 s<= 0x12) then 98 @ 0x1fc2 else 122 @ 0x1fa3'
p2619
aS'Value: <undetermined>'
p2620
aS'Possible values: <undetermined>'
p2621
aS'Branch dependence: {72L: <ILBranchDependence.TrueBranchDependent: 1>, 73L: <ILBranchDependence.FalseBranchDependent: 2>, 81L: <ILBranchDependence.TrueBranchDependent: 1>, 86L: <ILBranchDependence.FalseBranchDependent: 2>, 59L: <ILBranchDependence.FalseBranchDependent: 2>, 92L: <ILBranchDependence.FalseBranchDependent: 2>}'
p2622
aS"Prefix operands: ['18', '76', '94', '<MLIL_CMP_SLE 4>', '<MLIL_CONST 4>', '<MLIL_IF>', '<MLIL_VAR 4>', 'eax_34']"
p2623
aS"Postfix operands: ['18', '76', '94', '<MLIL_CMP_SLE 4>', '<MLIL_CONST 4>', '<MLIL_IF>', '<MLIL_VAR 4>', 'eax_34']"
p2624
aS'SSA form: if (eax_34#39 s<= 0x12) then 98 @ 0x0 else 99 @ 0x1fa3'
p2625
aS'Non-SSA formif (eax_34 s<= 0x12) then 76 @ 0x1fc2 else 94 @ 0x1fa3'
p2626
aS'Expression type: None'
p2627
aS'LLIL: if (eax#39 u<= 0x16) then 98 @ 0x1fc2 else 123 @ 0x1faa'
p2628
aS'Value: <undetermined>'
p2629
aS'Possible values: <undetermined>'
p2630
aS'Branch dependence: {72L: <ILBranchDependence.TrueBranchDependent: 1>, 73L: <ILBranchDependence.FalseBranchDependent: 2>, 81L: <ILBranchDependence.TrueBranchDependent: 1>, 86L: <ILBranchDependence.FalseBranchDependent: 2>, 59L: <ILBranchDependence.FalseBranchDependent: 2>, 92L: <ILBranchDependence.FalseBranchDependent: 2>, 93L: <ILBranchDependence.FalseBranchDependent: 2>}'
p2631
aS"Prefix operands: ['22', '76', '95', '<MLIL_CMP_ULE 4>', '<MLIL_CONST 4>', '<MLIL_IF>', '<MLIL_VAR 4>', 'eax_34']"
p2632
aS"Postfix operands: ['22', '76', '95', '<MLIL_CMP_ULE 4>', '<MLIL_CONST 4>', '<MLIL_IF>', '<MLIL_VAR 4>', 'eax_34']"
p2633
aS'SSA form: if (eax_34#39 u<= 0x16) then 100 @ 0x0 else 101 @ 0x1faa'
p2634
aS'Non-SSA formif (eax_34 u<= 0x16) then 76 @ 0x1fc2 else 95 @ 0x1faa'
p2635
aS'Expression type: None'
p2636
aS'LLIL: if (eax#39 s>= 0x28) then 98 @ 0x1fc2 else 124 @ 0x1fb1'
p2637
aS'Value: <undetermined>'
p2638
aS'Possible values: <undetermined>'
p2639
aS'Branch dependence: {72L: <ILBranchDependence.TrueBranchDependent: 1>, 73L: <ILBranchDependence.FalseBranchDependent: 2>, 81L: <ILBranchDependence.TrueBranchDependent: 1>, 86L: <ILBranchDependence.FalseBranchDependent: 2>, 59L: <ILBranchDependence.FalseBranchDependent: 2>, 92L: <ILBranchDependence.FalseBranchDependent: 2>, 93L: <ILBranchDependence.FalseBranchDependent: 2>, 94L: <ILBranchDependence.FalseBranchDependent: 2>}'
p2640
aS"Prefix operands: ['40', '76', '96', '<MLIL_CMP_SGE 4>', '<MLIL_CONST 4>', '<MLIL_IF>', '<MLIL_VAR 4>', 'eax_34']"
p2641
aS"Postfix operands: ['40', '76', '96', '<MLIL_CMP_SGE 4>', '<MLIL_CONST 4>', '<MLIL_IF>', '<MLIL_VAR 4>', 'eax_34']"
p2642
aS'SSA form: if (eax_34#39 s>= 0x28) then 102 @ 0x0 else 103 @ 0x1fb1'
p2643
aS'Non-SSA formif (eax_34 s>= 0x28) then 76 @ 0x1fc2 else 96 @ 0x1fb1'
p2644
aS'Expression type: None'
p2645
aS'LLIL: if (eax#39 u>= 0x24) then 98 @ 0x1fc2 else 125 @ 0x1fb8'
p2646
aS'Value: <undetermined>'
p2647
aS'Possible values: <undetermined>'
p2648
aS'Branch dependence: {72L: <ILBranchDependence.TrueBranchDependent: 1>, 73L: <ILBranchDependence.FalseBranchDependent: 2>, 81L: <ILBranchDependence.TrueBranchDependent: 1>, 86L: <ILBranchDependence.FalseBranchDependent: 2>, 59L: <ILBranchDependence.FalseBranchDependent: 2>, 92L: <ILBranchDependence.FalseBranchDependent: 2>, 93L: <ILBranchDependence.FalseBranchDependent: 2>, 94L: <ILBranchDependence.FalseBranchDependent: 2>, 95L: <ILBranchDependence.FalseBranchDependent: 2>}'
p2649
aS"Prefix operands: ['36', '76', '97', '<MLIL_CMP_UGE 4>', '<MLIL_CONST 4>', '<MLIL_IF>', '<MLIL_VAR 4>', 'eax_34']"
p2650
aS"Postfix operands: ['36', '76', '97', '<MLIL_CMP_UGE 4>', '<MLIL_CONST 4>', '<MLIL_IF>', '<MLIL_VAR 4>', 'eax_34']"
p2651
aS'SSA form: if (eax_34#39 u>= 0x24) then 104 @ 0x0 else 105 @ 0x1fb8'
p2652
aS'Non-SSA formif (eax_34 u>= 0x24) then 76 @ 0x1fc2 else 97 @ 0x1fb8'
p2653
aS'Expression type: None'
p2654
aS'LLIL: if (eax#39 s> 0x20) then 98 @ 0x1fc2 else 126 @ 0x1fbf'
p2655
aS'Value: <undetermined>'
p2656
aS'Possible values: <undetermined>'
p2657
aS'Branch dependence: {96L: <ILBranchDependence.FalseBranchDependent: 2>, 72L: <ILBranchDependence.TrueBranchDependent: 1>, 73L: <ILBranchDependence.FalseBranchDependent: 2>, 81L: <ILBranchDependence.TrueBranchDependent: 1>, 86L: <ILBranchDependence.FalseBranchDependent: 2>, 59L: <ILBranchDependence.FalseBranchDependent: 2>, 92L: <ILBranchDependence.FalseBranchDependent: 2>, 93L: <ILBranchDependence.FalseBranchDependent: 2>, 94L: <ILBranchDependence.FalseBranchDependent: 2>, 95L: <ILBranchDependence.FalseBranchDependent: 2>}'
p2658
aS"Prefix operands: ['32', '76', '98', '<MLIL_CMP_SGT 4>', '<MLIL_CONST 4>', '<MLIL_IF>', '<MLIL_VAR 4>', 'eax_34']"
p2659
aS"Postfix operands: ['32', '76', '98', '<MLIL_CMP_SGT 4>', '<MLIL_CONST 4>', '<MLIL_IF>', '<MLIL_VAR 4>', 'eax_34']"
p2660
aS'SSA form: if (eax_34#39 s> 0x20) then 106 @ 0x0 else 107 @ 0x1fbf'
p2661
aS'Non-SSA formif (eax_34 s> 0x20) then 76 @ 0x1fc2 else 98 @ 0x1fbf'
p2662
aS'Expression type: None'
p2663
aS'LLIL: if (eax#39 u> 0x1b) then 98 @ 0x1fc2 else 127 @ 0x1fc1'
p2664
aS'Value: <undetermined>'
p2665
aS'Possible values: <undetermined>'
p2666
aS'Branch dependence: {96L: <ILBranchDependence.FalseBranchDependent: 2>, 97L: <ILBranchDependence.FalseBranchDependent: 2>, 72L: <ILBranchDependence.TrueBranchDependent: 1>, 73L: <ILBranchDependence.FalseBranchDependent: 2>, 81L: <ILBranchDependence.TrueBranchDependent: 1>, 86L: <ILBranchDependence.FalseBranchDependent: 2>, 59L: <ILBranchDependence.FalseBranchDependent: 2>, 92L: <ILBranchDependence.FalseBranchDependent: 2>, 93L: <ILBranchDependence.FalseBranchDependent: 2>, 94L: <ILBranchDependence.FalseBranchDependent: 2>, 95L: <ILBranchDependence.FalseBranchDependent: 2>}'
p2667
aS"Prefix operands: ['27', '76', '99', '<MLIL_CMP_UGT 4>', '<MLIL_CONST 4>', '<MLIL_IF>', '<MLIL_VAR 4>', 'eax_34']"
p2668
aS"Postfix operands: ['27', '76', '99', '<MLIL_CMP_UGT 4>', '<MLIL_CONST 4>', '<MLIL_IF>', '<MLIL_VAR 4>', 'eax_34']"
p2669
aS'SSA form: if (eax_34#39 u> 0x1b) then 108 @ 0x0 else 109 @ 0x1fc1'
p2670
aS'Non-SSA formif (eax_34 u> 0x1b) then 76 @ 0x1fc2 else 99 @ 0x1fc1'
p2671
aS'Expression type: None'
p2672
aS'LLIL: eax#46 = eax#39 + 1'
p2673
aS'Value: <undetermined>'
p2674
aS'Possible values: <undetermined>'
p2675
aS'Branch dependence: {96L: <ILBranchDependence.FalseBranchDependent: 2>, 97L: <ILBranchDependence.FalseBranchDependent: 2>, 98L: <ILBranchDependence.FalseBranchDependent: 2>, 72L: <ILBranchDependence.TrueBranchDependent: 1>, 73L: <ILBranchDependence.FalseBranchDependent: 2>, 81L: <ILBranchDependence.TrueBranchDependent: 1>, 86L: <ILBranchDependence.FalseBranchDependent: 2>, 59L: <ILBranchDependence.FalseBranchDependent: 2>, 92L: <ILBranchDependence.FalseBranchDependent: 2>, 93L: <ILBranchDependence.FalseBranchDependent: 2>, 94L: <ILBranchDependence.FalseBranchDependent: 2>, 95L: <ILBranchDependence.FalseBranchDependent: 2>}'
p2676
aS"Prefix operands: ['1', '<MLIL_ADD 4>', '<MLIL_CONST 4>', '<MLIL_SET_VAR 4>', '<MLIL_VAR 4>', 'eax_34', 'eax_34']"
p2677
aS"Postfix operands: ['1', '<MLIL_ADD 4>', '<MLIL_CONST 4>', '<MLIL_SET_VAR 4>', '<MLIL_VAR 4>', 'eax_34', 'eax_34']"
p2678
aS'SSA form: eax_34#40 = eax_34#39 + 1'
p2679
aS'Non-SSA formeax_34 = eax_34 + 1'
p2680
aS'Expression type: None'
p2681
aS'LLIL: goto 98 @ 0x1fc2'
p2682
aS'Value: <undetermined>'
p2683
aS'Possible values: <undetermined>'
p2684
aS'Branch dependence: {96L: <ILBranchDependence.FalseBranchDependent: 2>, 97L: <ILBranchDependence.FalseBranchDependent: 2>, 98L: <ILBranchDependence.FalseBranchDependent: 2>, 72L: <ILBranchDependence.TrueBranchDependent: 1>, 73L: <ILBranchDependence.FalseBranchDependent: 2>, 81L: <ILBranchDependence.TrueBranchDependent: 1>, 86L: <ILBranchDependence.FalseBranchDependent: 2>, 59L: <ILBranchDependence.FalseBranchDependent: 2>, 92L: <ILBranchDependence.FalseBranchDependent: 2>, 93L: <ILBranchDependence.FalseBranchDependent: 2>, 94L: <ILBranchDependence.FalseBranchDependent: 2>, 95L: <ILBranchDependence.FalseBranchDependent: 2>}'
p2685
aS"Prefix operands: ['76', '<MLIL_GOTO>']"
p2686
aS"Postfix operands: ['76', '<MLIL_GOTO>']"
p2687
aS'SSA form: goto 78 @ 0x1fc2'
p2688
aS'Non-SSA formgoto 76 @ 0x1fc2'
p2689
aS'Expression type: None'
p2690
aS'LLIL: breakpoint'
p2691
aS'Value: <undetermined>'
p2692
aS'Possible values: <undetermined>'
p2693
aS'Branch dependence: {}'
p2694
aS"Prefix operands: ['<MLIL_BP>']"
p2695
aS"Postfix operands: ['<MLIL_BP>']"
p2696
aS'SSA form: breakpoint'
p2697
aS'Non-SSA formbreakpoint'
p2698
aS'Expression type: None'
p2699
aS'LLIL: eax#1 = [esp#0 + 4].d @ mem#0'
p2700
aS'Value: <undetermined>'
p2701
aS'Possible values: <undetermined>'
p2702
aS'Branch dependence: {}'
p2703
aS"Prefix operands: ['<MLIL_SET_VAR 4>', '<MLIL_VAR 4>', 'eax_1', 'testautovar']"
p2704
aS"Postfix operands: ['<MLIL_SET_VAR 4>', '<MLIL_VAR 4>', 'eax_1', 'testautovar']"
p2705
aS'SSA form: eax_1#1 = testautovar#0'
p2706
aS'Non-SSA formeax_1 = testautovar'
p2707
aS'Expression type: None'
p2708
aS'LLIL: eax#2 = eax#1 + [esp#0 + 8].d @ mem#0'
p2709
aS'Value: <undetermined>'
p2710
aS'Possible values: <undetermined>'
p2711
aS'Branch dependence: {}'
p2712
aS"Prefix operands: ['<MLIL_ADD 4>', '<MLIL_SET_VAR 4>', '<MLIL_VAR 4>', '<MLIL_VAR 4>', 'arg2', 'eax', 'eax_1']"
p2713
aS"Postfix operands: ['<MLIL_ADD 4>', '<MLIL_SET_VAR 4>', '<MLIL_VAR 4>', '<MLIL_VAR 4>', 'arg2', 'eax', 'eax_1']"
p2714
aS'SSA form: eax#2 = eax_1#1 + arg2#0'
p2715
aS'Non-SSA formeax = eax_1 + arg2'
p2716
aS'Expression type: None'
p2717
aS'LLIL: <return> jump([esp#0].d @ mem#0)'
p2718
aS'Value: <undetermined>'
p2719
aS'Possible values: <undetermined>'
p2720
aS'Branch dependence: {}'
p2721
aS"Prefix operands: ['<MLIL_RET>', '[<il: eax>]']"
p2722
aS"Postfix operands: ['<MLIL_RET>', '[<il: eax>]']"
p2723
aS'SSA form: return eax#2'
p2724
aS'Non-SSA formreturn eax'
p2725
asS'test_function_symbol_names'
p2726
(lp2727
S'Symbol: _main SymbolType.DataSymbol 0x1e5bL'
p2728
aS'Symbol: hang SymbolType.DataSymbol 0x1ff4L'
p2729
aS'Symbol: addfunc SymbolType.DataSymbol 0x1ff7L'
p2730
asS'test_BinaryView'
p2731
(lp2732
S"BV Type: ('va_list', <type: void*>)"
p2733
aS'BV segment: <segment: 0x1000-0x2000, r-x>'
p2734
aS'BV segment: <segment: 0x2000-0x3000, rw->'
p2735
aS'BV segment: <segment: 0x3000-0x4000, r-->'
p2736
aS'BV section: __data'
p2737
aS'BV section: __text'
p2738
aS'BV allocated range: <0x1000-0x4000>'
p2739
aS'Session Data: {}'
p2740
aS'BV data var: 4096'
p2741
aS'BV data var: 7808'
p2742
aS'BV data var: 8130'
p2743
aS'BV data var: 8003'
p2744
aS'BV data var: 8144'
p2745
aS'BV data var: 8192'
p2746
aS'BV data var: 7995'
p2747
aS'BV data var: 8183'
p2748
aS'BV data var: 8173'
p2749
aS'BV data var: 8015'
p2750
aS'BV data var: 8073'
p2751
aS'BV data var: 8180'
p2752
aS'BV data var: 8054'
p2753
aS'BV data var: 8009'
p2754
aS'BV data var: 7771'
p2755
aS'BV data var: 8159'
p2756
aS'BV Entry function: <func: x86@0x1e5b>'
p2757
aS'BV function: <func: x86@0x1e5b>'
p2758
aS'BV function: <func: x86@0x1ff4>'
p2759
aS'BV function: <func: x86@0x1ff7>'
p2760
aS'BV entry point: 0x1e5bL'
p2761
aS'BV start: 0x1000L'
p2762
aS'BV length: 0x3000'
p2763
asS'test_available_types'
p2764
(lp2765
S'Available Type: Raw'
p2766
aS'Available Type: Mach-O'
p2767
asS'test_function_basic_blocks'
p2768
(lp2769
S'basic block <block: x86@0x1e5b-0x1f2d> start: 0x1e5bL end: 0x1f2dL undetermined outgoing edges: False'
p2770
aS'basic block <block: x86@0x1e5b-0x1f2d> test get self: <block: x86@0x1e5b-0x1f2d>'
p2771
aS'basic block <block: x86@0x1fed-0x1ff4> start: 0x1fedL end: 0x1ff4L undetermined outgoing edges: True'
p2772
aS'basic block <block: x86@0x1fed-0x1ff4> test get self: <block: x86@0x1fed-0x1ff4>'
p2773
aS'basic block <block: x86@0x1f2d-0x1f3b> start: 0x1f2dL end: 0x1f3bL undetermined outgoing edges: False'
p2774
aS'basic block <block: x86@0x1f2d-0x1f3b> test get self: <block: x86@0x1f2d-0x1f3b>'
p2775
aS'basic block <block: x86@0x1f43-0x1f49> start: 0x1f43L end: 0x1f49L undetermined outgoing edges: False'
p2776
aS'basic block <block: x86@0x1f43-0x1f49> test get self: <block: x86@0x1f43-0x1f49>'
p2777
aS'basic block <block: x86@0x1f4f-0x1f71> start: 0x1f4fL end: 0x1f71L undetermined outgoing edges: False'
p2778
aS'basic block <block: x86@0x1f4f-0x1f71> test get self: <block: x86@0x1f4f-0x1f71>'
p2779
aS'basic block <block: x86@0x1f76-0x1f7d> start: 0x1f76L end: 0x1f7dL undetermined outgoing edges: False'
p2780
aS'basic block <block: x86@0x1f76-0x1f7d> test get self: <block: x86@0x1f76-0x1f7d>'
p2781
aS'basic block <block: x86@0x1f71-0x1f76> start: 0x1f71L end: 0x1f76L undetermined outgoing edges: False'
p2782
aS'basic block <block: x86@0x1f71-0x1f76> test get self: <block: x86@0x1f71-0x1f76>'
p2783
aS'basic block <block: x86@0x1fc2-0x1fce> start: 0x1fc2L end: 0x1fceL undetermined outgoing edges: False'
p2784
aS'basic block <block: x86@0x1fc2-0x1fce> test get self: <block: x86@0x1fc2-0x1fce>'
p2785
aS'basic block <block: x86@0x1f7d-0x1f84> start: 0x1f7dL end: 0x1f84L undetermined outgoing edges: False'
p2786
aS'basic block <block: x86@0x1f7d-0x1f84> test get self: <block: x86@0x1f7d-0x1f84>'
p2787
aS'basic block <block: x86@0x1fd0-0x1fdc> start: 0x1fd0L end: 0x1fdcL undetermined outgoing edges: False'
p2788
aS'basic block <block: x86@0x1fd0-0x1fdc> test get self: <block: x86@0x1fd0-0x1fdc>'
p2789
aS'basic block <block: x86@0x1fce-0x1fd0> start: 0x1fceL end: 0x1fd0L undetermined outgoing edges: True'
p2790
aS'basic block <block: x86@0x1fce-0x1fd0> test get self: <block: x86@0x1fce-0x1fd0>'
p2791
aS'basic block <block: x86@0x1f89-0x1f90> start: 0x1f89L end: 0x1f90L undetermined outgoing edges: False'
p2792
aS'basic block <block: x86@0x1f89-0x1f90> test get self: <block: x86@0x1f89-0x1f90>'
p2793
aS'basic block <block: x86@0x1f84-0x1f89> start: 0x1f84L end: 0x1f89L undetermined outgoing edges: False'
p2794
aS'basic block <block: x86@0x1f84-0x1f89> test get self: <block: x86@0x1f84-0x1f89>'
p2795
aS'basic block <block: x86@0x1fdf-0x1fed> start: 0x1fdfL end: 0x1fedL undetermined outgoing edges: True'
p2796
aS'basic block <block: x86@0x1fdf-0x1fed> test get self: <block: x86@0x1fdf-0x1fed>'
p2797
aS'basic block <block: x86@0x1fdc-0x1fdf> start: 0x1fdcL end: 0x1fdfL undetermined outgoing edges: True'
p2798
aS'basic block <block: x86@0x1fdc-0x1fdf> test get self: <block: x86@0x1fdc-0x1fdf>'
p2799
aS'basic block <block: x86@0x1f90-0x1f97> start: 0x1f90L end: 0x1f97L undetermined outgoing edges: False'
p2800
aS'basic block <block: x86@0x1f90-0x1f97> test get self: <block: x86@0x1f90-0x1f97>'
p2801
aS'basic block <block: x86@0x1f97-0x1f9e> start: 0x1f97L end: 0x1f9eL undetermined outgoing edges: False'
p2802
aS'basic block <block: x86@0x1f97-0x1f9e> test get self: <block: x86@0x1f97-0x1f9e>'
p2803
aS'basic block <block: x86@0x1f9e-0x1fa5> start: 0x1f9eL end: 0x1fa5L undetermined outgoing edges: False'
p2804
aS'basic block <block: x86@0x1f9e-0x1fa5> test get self: <block: x86@0x1f9e-0x1fa5>'
p2805
aS'basic block <block: x86@0x1fa5-0x1fac> start: 0x1fa5L end: 0x1facL undetermined outgoing edges: False'
p2806
aS'basic block <block: x86@0x1fa5-0x1fac> test get self: <block: x86@0x1fa5-0x1fac>'
p2807
aS'basic block <block: x86@0x1fac-0x1fb3> start: 0x1facL end: 0x1fb3L undetermined outgoing edges: False'
p2808
aS'basic block <block: x86@0x1fac-0x1fb3> test get self: <block: x86@0x1fac-0x1fb3>'
p2809
aS'basic block <block: x86@0x1fb3-0x1fba> start: 0x1fb3L end: 0x1fbaL undetermined outgoing edges: False'
p2810
aS'basic block <block: x86@0x1fb3-0x1fba> test get self: <block: x86@0x1fb3-0x1fba>'
p2811
aS'basic block <block: x86@0x1fba-0x1fc1> start: 0x1fbaL end: 0x1fc1L undetermined outgoing edges: False'
p2812
aS'basic block <block: x86@0x1fba-0x1fc1> test get self: <block: x86@0x1fba-0x1fc1>'
p2813
aS'basic block <block: x86@0x1fc1-0x1fc2> start: 0x1fc1L end: 0x1fc2L undetermined outgoing edges: False'
p2814
aS'basic block <block: x86@0x1fc1-0x1fc2> test get self: <block: x86@0x1fc1-0x1fc2>'
p2815
aS'basic block <block: x86@0x1ff4-0x1ff7> start: 0x1ff4L end: 0x1ff7L undetermined outgoing edges: False'
p2816
aS'basic block <block: x86@0x1ff4-0x1ff7> test get self: <block: x86@0x1ff4-0x1ff7>'
p2817
aS'basic block <block: x86@0x1ff7-0x2000> start: 0x1ff7L end: 0x2000L undetermined outgoing edges: True'
p2818
aS'basic block <block: x86@0x1ff7-0x2000> test get self: <block: x86@0x1ff7-0x2000>'
p2819
asS'test_function_med_il_basic_blocks'
p2820
(lp2821
S'MLIL basic block <block: x86@0x0-0x3c> start: 0x0L end: 0x3cL outgoing_edges: 2'
p2822
aS'MLIL basic block <block: x86@0x3c-0x3e> start: 0x3cL end: 0x3eL outgoing_edges: 0'
p2823
aS'MLIL basic block <block: x86@0x3e-0x41> start: 0x3eL end: 0x41L outgoing_edges: 1'
p2824
aS'MLIL basic block <block: x86@0x41-0x43> start: 0x41L end: 0x43L outgoing_edges: 1'
p2825
aS'MLIL basic block <block: x86@0x43-0x49> start: 0x43L end: 0x49L outgoing_edges: 2'
p2826
aS'MLIL basic block <block: x86@0x49-0x4a> start: 0x49L end: 0x4aL outgoing_edges: 2'
p2827
aS'MLIL basic block <block: x86@0x4a-0x4c> start: 0x4aL end: 0x4cL outgoing_edges: 0'
p2828
aS'MLIL basic block <block: x86@0x4c-0x51> start: 0x4cL end: 0x51L outgoing_edges: 2'
p2829
aS'MLIL basic block <block: x86@0x51-0x52> start: 0x51L end: 0x52L outgoing_edges: 2'
p2830
aS'MLIL basic block <block: x86@0x52-0x55> start: 0x52L end: 0x55L outgoing_edges: 2'
p2831
aS'MLIL basic block <block: x86@0x55-0x56> start: 0x55L end: 0x56L outgoing_edges: 0'
p2832
aS'MLIL basic block <block: x86@0x56-0x57> start: 0x56L end: 0x57L outgoing_edges: 2'
p2833
aS'MLIL basic block <block: x86@0x57-0x58> start: 0x57L end: 0x58L outgoing_edges: 1'
p2834
aS'MLIL basic block <block: x86@0x58-0x5a> start: 0x58L end: 0x5aL outgoing_edges: 0'
p2835
aS'MLIL basic block <block: x86@0x5a-0x5c> start: 0x5aL end: 0x5cL outgoing_edges: 0'
p2836
aS'MLIL basic block <block: x86@0x5c-0x5d> start: 0x5cL end: 0x5dL outgoing_edges: 2'
p2837
aS'MLIL basic block <block: x86@0x5d-0x5e> start: 0x5dL end: 0x5eL outgoing_edges: 2'
p2838
aS'MLIL basic block <block: x86@0x5e-0x5f> start: 0x5eL end: 0x5fL outgoing_edges: 2'
p2839
aS'MLIL basic block <block: x86@0x5f-0x60> start: 0x5fL end: 0x60L outgoing_edges: 2'
p2840
aS'MLIL basic block <block: x86@0x60-0x61> start: 0x60L end: 0x61L outgoing_edges: 2'
p2841
aS'MLIL basic block <block: x86@0x61-0x62> start: 0x61L end: 0x62L outgoing_edges: 2'
p2842
aS'MLIL basic block <block: x86@0x62-0x63> start: 0x62L end: 0x63L outgoing_edges: 2'
p2843
aS'MLIL basic block <block: x86@0x63-0x65> start: 0x63L end: 0x65L outgoing_edges: 1'
p2844
aS'MLIL basic block <block: x86@0x0-0x1> start: 0x0L end: 0x1L outgoing_edges: 0'
p2845
aS'MLIL basic block <block: x86@0x0-0x3> start: 0x0L end: 0x3L outgoing_edges: 0'
p2846
asS'test_symbols'
p2847
(lp2848
S'Symbol: __mh_execute_header'
p2849
aS'Symbol: _data'
p2850
aS'Symbol: _main'
p2851
aS'Symbol: addfunc'
p2852
aS'Symbol: badjump'
p2853
aS'Symbol: conddone'
p2854
aS'Symbol: cont'
p2855
aS'Symbol: geteip'
p2856
aS'Symbol: hang'
p2857
aS'Symbol: jumptable'
p2858
aS'Symbol: nextcheck'
p2859
aS'Symbol: nohang'
p2860
aS'Symbol: onejump'
p2861
aS'Symbol: overflow'
p2862
aS'Symbol: syscallexit'
p2863
aS'Symbol: zerojump'
p2864
asS'test_low_il_instructions'
p2865
(lp2866
S'MLIL: eax_40 = testautovar'
p2867
aS'Mapped MLIL: eax = testautovar'
p2868
aS'Value: <undetermined>'
p2869
aS'Possible Values: <undetermined>'
p2870
aS'Prefix operands: [<LLIL_SET_REG 4>, eax, <LLIL_LOAD 4>, <LLIL_ADD 4>, <LLIL_REG 4>, esp, <LLIL_CONST 4>, 4L]'
p2871
aS'Postfix operands: [eax, esp, <LLIL_REG 4>, 4L, <LLIL_CONST 4>, <LLIL_ADD 4>, <LLIL_LOAD 4>, <LLIL_SET_REG 4>]'
p2872
aS'SSA form: eax#1 = [esp#0 + 4].d @ mem#0'
p2873
aS'Non-SSA form: eax = [esp + 4].d'
p2874
aS'MLIL: edx:eax = sx.q(eax_40)'
p2875
aS'Mapped MLIL: edx:eax = sx.q(eax)'
p2876
aS'Value: <undetermined>'
p2877
aS'Possible Values: <undetermined>'
p2878
aS'Prefix operands: [<LLIL_SET_REG_SPLIT 4>, edx, eax, <LLIL_SX 8>, <LLIL_REG 4>, eax]'
p2879
aS'Postfix operands: [edx, eax, eax, <LLIL_REG 4>, <LLIL_SX 8>, <LLIL_SET_REG_SPLIT 4>]'
p2880
aS'SSA form: edx#1:eax#2 = sx.q(eax#1)'
p2881
aS'Non-SSA form: edx:eax = sx.q(eax)'
p2882
aS'MLIL: None'
p2883
aS'Mapped MLIL: d = 1'
p2884
aS'Value: <undetermined>'
p2885
aS'Possible Values: <undetermined>'
p2886
aS'Prefix operands: [<LLIL_SET_FLAG>, d, <LLIL_CONST 1>, 1L]'
p2887
aS'Postfix operands: [d, 1L, <LLIL_CONST 1>, <LLIL_SET_FLAG>]'
p2888
aS'SSA form: flag:d#1 = 1'
p2889
aS'Non-SSA form: flag:d = 1'
p2890
aS'MLIL: ecx = [0x2000].d'
p2891
aS'Mapped MLIL: ecx = [0x2000].d'
p2892
aS'Value: <undetermined>'
p2893
aS'Possible Values: <undetermined>'
p2894
aS'Prefix operands: [<LLIL_SET_REG 4>, ecx, <LLIL_LOAD 4>, <LLIL_CONST_PTR 4>, 8192L]'
p2895
aS'Postfix operands: [ecx, 8192L, <LLIL_CONST_PTR 4>, <LLIL_LOAD 4>, <LLIL_SET_REG 4>]'
p2896
aS'SSA form: ecx#1 = [0x2000].d @ mem#0'
p2897
aS'Non-SSA form: ecx = [0x2000].d'
p2898
aS'MLIL: ecx_1 = ecx + 1'
p2899
aS'Mapped MLIL: ecx = ecx + 1'
p2900
aS'Value: <undetermined>'
p2901
aS'Possible Values: <undetermined>'
p2902
aS'Prefix operands: [<LLIL_SET_REG 4>, ecx, <LLIL_ADD 4>, <LLIL_REG 4>, ecx, <LLIL_CONST 4>, 1L]'
p2903
aS'Postfix operands: [ecx, ecx, <LLIL_REG 4>, 1L, <LLIL_CONST 4>, <LLIL_ADD 4>, <LLIL_SET_REG 4>]'
p2904
aS'SSA form: ecx#2 = ecx#1 + 1'
p2905
aS'Non-SSA form: ecx = ecx + 1'
p2906
aS'MLIL: [0x2000].d = ecx_1'
p2907
aS'Mapped MLIL: [0x2000].d = ecx'
p2908
aS'Value: <undetermined>'
p2909
aS'Possible Values: <undetermined>'
p2910
aS'Prefix operands: [<LLIL_STORE 4>, <LLIL_CONST_PTR 4>, 8192L, <LLIL_REG 4>, ecx]'
p2911
aS'Postfix operands: [8192L, <LLIL_CONST_PTR 4>, ecx, <LLIL_REG 4>, <LLIL_STORE 4>]'
p2912
aS'SSA form: [0x2000].d = ecx#2 @ mem#0 -> mem#1'
p2913
aS'Non-SSA form: [0x2000].d = ecx'
p2914
aS'MLIL: var_4 = ecx_1'
p2915
aS'Mapped MLIL: var_4 = ecx'
p2916
aS'Value: <undetermined>'
p2917
aS'Possible Values: <undetermined>'
p2918
aS'Prefix operands: [<LLIL_PUSH 4>, <LLIL_REG 4>, ecx]'
p2919
aS'Postfix operands: [ecx, <LLIL_REG 4>, <LLIL_PUSH 4>]'
p2920
aS'SSA form: [esp#0 - 4].d = ecx#2 @ mem#1 -> mem#2'
p2921
aS'Non-SSA form: push(ecx)'
p2922
aS'MLIL: eax_1 = var_4'
p2923
aS'Mapped MLIL: eax = var_4'
p2924
aS'Value: <undetermined>'
p2925
aS'Possible Values: <undetermined>'
p2926
aS'Prefix operands: [<LLIL_SET_REG 4>, eax, <LLIL_POP 4>]'
p2927
aS'Postfix operands: [eax, <LLIL_POP 4>, <LLIL_SET_REG 4>]'
p2928
aS'SSA form: eax#3 = [esp#1].d @ mem#2'
p2929
aS'Non-SSA form: eax = pop'
p2930
aS'MLIL: eax_2 = eax_1 + 0xa'
p2931
aS'Mapped MLIL: eax = eax + 0xa'
p2932
aS'Value: <undetermined>'
p2933
aS'Possible Values: <undetermined>'
p2934
aS'Prefix operands: [<LLIL_SET_REG 4>, eax, <LLIL_ADD 4>, <LLIL_REG 4>, eax, <LLIL_CONST 4>, 10L]'
p2935
aS'Postfix operands: [eax, eax, <LLIL_REG 4>, 10L, <LLIL_CONST 4>, <LLIL_ADD 4>, <LLIL_SET_REG 4>]'
p2936
aS'SSA form: eax#4 = eax#3 + 0xa'
p2937
aS'Non-SSA form: eax = eax + 0xa'
p2938
aS'MLIL: [0x2000].d = [0x2000].d + eax_2'
p2939
aS'Mapped MLIL: [0x2000].d = [0x2000].d + eax'
p2940
aS'Value: <undetermined>'
p2941
aS'Possible Values: <undetermined>'
p2942
aS'Prefix operands: [<LLIL_STORE 4>, <LLIL_CONST_PTR 4>, 8192L, <LLIL_ADD 4>, <LLIL_LOAD 4>, <LLIL_CONST_PTR 4>, 8192L, <LLIL_REG 4>, eax]'
p2943
aS'Postfix operands: [8192L, <LLIL_CONST_PTR 4>, 8192L, <LLIL_CONST_PTR 4>, <LLIL_LOAD 4>, eax, <LLIL_REG 4>, <LLIL_ADD 4>, <LLIL_STORE 4>]'
p2944
aS'SSA form: [0x2000].d = [0x2000].d @ mem#2 + eax#4 @ mem#2 -> mem#3'
p2945
aS'Non-SSA form: [0x2000].d = [0x2000].d + eax'
p2946
aS'MLIL: None'
p2947
aS'Mapped MLIL: var_4 = 0x1e80'
p2948
aS'Value: <undetermined>'
p2949
aS'Possible Values: <undetermined>'
p2950
aS'Prefix operands: [<LLIL_PUSH 4>, <LLIL_CONST_PTR 4>, 7808L]'
p2951
aS'Postfix operands: [7808L, <LLIL_CONST_PTR 4>, <LLIL_PUSH 4>]'
p2952
aS'SSA form: [esp#2 - 4].d = 0x1e80 @ mem#3 -> mem#4'
p2953
aS'Non-SSA form: push(0x1e80)'
p2954
aS'MLIL: None'
p2955
aS'Mapped MLIL: ebx = var_4'
p2956
aS'Value: <undetermined>'
p2957
aS'Possible Values: <undetermined>'
p2958
aS'Prefix operands: [<LLIL_SET_REG 4>, ebx, <LLIL_POP 4>]'
p2959
aS'Postfix operands: [ebx, <LLIL_POP 4>, <LLIL_SET_REG 4>]'
p2960
aS'SSA form: ebx#1 = [esp#3].d @ mem#4'
p2961
aS'Non-SSA form: ebx = pop'
p2962
aS'MLIL: temp2 = eax_2'
p2963
aS'Mapped MLIL: temp2 = eax'
p2964
aS'Value: <undetermined>'
p2965
aS'Possible Values: <undetermined>'
p2966
aS'Prefix operands: [<LLIL_SET_REG 4>, temp2, <LLIL_REG 4>, eax]'
p2967
aS'Postfix operands: [temp2, eax, <LLIL_REG 4>, <LLIL_SET_REG 4>]'
p2968
aS'SSA form: temp2#1.d = eax#4'
p2969
aS'Non-SSA form: temp2.d = eax'
p2970
aS'MLIL: eax_3 = temp2 + 0x1e80'
p2971
aS'Mapped MLIL: eax = temp2 + ebx'
p2972
aS'Value: <undetermined>'
p2973
aS'Possible Values: <undetermined>'
p2974
aS'Prefix operands: [<LLIL_SET_REG 4>, eax, <LLIL_ADD 4>, <LLIL_REG 4>, temp2, <LLIL_REG 4>, ebx]'
p2975
aS'Postfix operands: [eax, temp2, <LLIL_REG 4>, ebx, <LLIL_REG 4>, <LLIL_ADD 4>, <LLIL_SET_REG 4>]'
p2976
aS'SSA form: eax#5 = temp2#1.d + ebx#1'
p2977
aS'Non-SSA form: eax = temp2.d + ebx'
p2978
aS'MLIL: None'
p2979
aS'Mapped MLIL: c = temp2 + ebx u< temp2'
p2980
aS'Value: <undetermined>'
p2981
aS'Possible Values: <undetermined>'
p2982
aS'Prefix operands: [<LLIL_SET_FLAG>, c, <LLIL_CMP_ULT 4>, <LLIL_ADD 4>, <LLIL_REG 4>, temp2, <LLIL_REG 4>, ebx, <LLIL_REG 4>, temp2]'
p2983
aS'Postfix operands: [c, temp2, <LLIL_REG 4>, ebx, <LLIL_REG 4>, <LLIL_ADD 4>, temp2, <LLIL_REG 4>, <LLIL_CMP_ULT 4>, <LLIL_SET_FLAG>]'
p2984
aS'SSA form: flag:c#1 = temp2#1.d + ebx#1 u< temp2#1.d'
p2985
aS'Non-SSA form: flag:c = temp2.d + ebx u< temp2.d'
p2986
aS'MLIL: None'
p2987
aS'Mapped MLIL: c = c ^ 1'
p2988
aS'Value: <undetermined>'
p2989
aS'Possible Values: <undetermined>'
p2990
aS'Prefix operands: [<LLIL_SET_FLAG>, c, <LLIL_XOR 1>, <LLIL_FLAG>, c, <LLIL_CONST 1>, 1L]'
p2991
aS'Postfix operands: [c, c, <LLIL_FLAG>, 1L, <LLIL_CONST 1>, <LLIL_XOR 1>, <LLIL_SET_FLAG>]'
p2992
aS'SSA form: flag:c#2 = flag:c#1 ^ 0x1'
p2993
aS'Non-SSA form: flag:c = flag:c ^ 0x1'
p2994
aS'MLIL: var_4_1 = (flag63 ? 1 : 0 << 0xb) | ((flag60 ? 1 : 0 << 0xa) | ((flag57 ? 1 : 0 << 7) | ((flag54 ? 1 : 0 << 6) | ((flag51 ? 1 : 0 << 4) | ((flag48 ? 1 : 0 << 2) | (flag46 ? 1 : 0 << 0))))))'
p2995
aS'Mapped MLIL: var_4 = (flag63 ? 1 : 0 << 0xb) | ((flag60 ? 1 : 0 << 0xa) | ((flag57 ? 1 : 0 << 7) | ((flag54 ? 1 : 0 << 6) | ((flag51 ? 1 : 0 << 4) | ((flag48 ? 1 : 0 << 2) | (flag46 ? 1 : 0 << 0))))))'
p2996
aS'Value: <undetermined>'
p2997
aS'Possible Values: <undetermined>'
p2998
aS'Prefix operands: [<LLIL_PUSH 4>, <LLIL_OR 4>, <LLIL_FLAG_BIT 4>, flag63, 11L, <LLIL_OR 4>, <LLIL_FLAG_BIT 4>, flag60, 10L, <LLIL_OR 4>, <LLIL_FLAG_BIT 4>, flag57, 7L, <LLIL_OR 4>, <LLIL_FLAG_BIT 4>, flag54, 6L, <LLIL_OR 4>, <LLIL_FLAG_BIT 4>, flag51, 4L, <LLIL_OR 4>, <LLIL_FLAG_BIT 4>, flag48, 2L, <LLIL_FLAG_BIT 4>, flag46, 0L]'
p2999
aS'Postfix operands: [flag63, 11L, <LLIL_FLAG_BIT 4>, flag60, 10L, <LLIL_FLAG_BIT 4>, flag57, 7L, <LLIL_FLAG_BIT 4>, flag54, 6L, <LLIL_FLAG_BIT 4>, flag51, 4L, <LLIL_FLAG_BIT 4>, flag48, 2L, <LLIL_FLAG_BIT 4>, flag46, 0L, <LLIL_FLAG_BIT 4>, <LLIL_OR 4>, <LLIL_OR 4>, <LLIL_OR 4>, <LLIL_OR 4>, <LLIL_OR 4>, <LLIL_OR 4>, <LLIL_PUSH 4>]'
p3000
aS'SSA form: [esp#4 - 4].d = flagbit.d(flag:flag63#0, 0xb) | (flagbit.d(flag:flag60#0, 0xa) | (flagbit.d(flag:flag57#0, 7) | (flagbit.d(flag:flag54#0, 6) | (flagbit.d(flag:flag51#0, 4) | (flagbit.d(flag:flag48#0, 2) | flagbit.d(flag:flag46#0, 0)))))) @ mem#4 -> mem#5'
p3001
aS'Non-SSA form: push(flagbit.d(flag:flag63, 0xb) | (flagbit.d(flag:flag60, 0xa) | (flagbit.d(flag:flag57, 7) | (flagbit.d(flag:flag54, 6) | (flagbit.d(flag:flag51, 4) | (flagbit.d(flag:flag48, 2) | flagbit.d(flag:flag46, 0)))))))'
p3002
aS'MLIL: eax_4 = var_4_1'
p3003
aS'Mapped MLIL: eax = var_4'
p3004
aS'Value: <undetermined>'
p3005
aS'Possible Values: <undetermined>'
p3006
aS'Prefix operands: [<LLIL_SET_REG 4>, eax, <LLIL_POP 4>]'
p3007
aS'Postfix operands: [eax, <LLIL_POP 4>, <LLIL_SET_REG 4>]'
p3008
aS'SSA form: eax#6 = [esp#5].d @ mem#5'
p3009
aS'Non-SSA form: eax = pop'
p3010
aS'MLIL: [0x2000].d = [0x2000].d + eax_4'
p3011
aS'Mapped MLIL: [0x2000].d = [0x2000].d + eax'
p3012
aS'Value: <undetermined>'
p3013
aS'Possible Values: <undetermined>'
p3014
aS'Prefix operands: [<LLIL_STORE 4>, <LLIL_CONST_PTR 4>, 8192L, <LLIL_ADD 4>, <LLIL_LOAD 4>, <LLIL_CONST_PTR 4>, 8192L, <LLIL_REG 4>, eax]'
p3015
aS'Postfix operands: [8192L, <LLIL_CONST_PTR 4>, 8192L, <LLIL_CONST_PTR 4>, <LLIL_LOAD 4>, eax, <LLIL_REG 4>, <LLIL_ADD 4>, <LLIL_STORE 4>]'
p3016
aS'SSA form: [0x2000].d = [0x2000].d @ mem#5 + eax#6 @ mem#5 -> mem#6'
p3017
aS'Non-SSA form: [0x2000].d = [0x2000].d + eax'
p3018
aS'MLIL: None'
p3019
aS'Mapped MLIL: c = 1'
p3020
aS'Value: <undetermined>'
p3021
aS'Possible Values: <undetermined>'
p3022
aS'Prefix operands: [<LLIL_SET_FLAG>, c, <LLIL_CONST 1>, 1L]'
p3023
aS'Postfix operands: [c, 1L, <LLIL_CONST 1>, <LLIL_SET_FLAG>]'
p3024
aS'SSA form: flag:c#3 = 1'
p3025
aS'Non-SSA form: flag:c = 1'
p3026
aS'MLIL: eax_5 = adc.d(eax_4, eax_4, true)'
p3027
aS'Mapped MLIL: eax = adc.d(eax, eax, true)'
p3028
aS'Value: <undetermined>'
p3029
aS'Possible Values: <undetermined>'
p3030
aS'Prefix operands: [<LLIL_SET_REG 4>, eax, <LLIL_ADC 4>, <LLIL_REG 4>, eax, <LLIL_REG 4>, eax, <LLIL_FLAG>, c]'
p3031
aS'Postfix operands: [eax, eax, <LLIL_REG 4>, eax, <LLIL_REG 4>, c, <LLIL_FLAG>, <LLIL_ADC 4>, <LLIL_SET_REG 4>]'
p3032
aS'SSA form: eax#7 = adc.d(eax#6, eax#6, flag:c#3)'
p3033
aS'Non-SSA form: eax = adc.d(eax, eax, flag:c)'
p3034
aS'MLIL: ebx = eax_5'
p3035
aS'Mapped MLIL: ebx = eax'
p3036
aS'Value: <undetermined>'
p3037
aS'Possible Values: <undetermined>'
p3038
aS'Prefix operands: [<LLIL_SET_REG 4>, ebx, <LLIL_REG 4>, eax]'
p3039
aS'Postfix operands: [ebx, eax, <LLIL_REG 4>, <LLIL_SET_REG 4>]'
p3040
aS'SSA form: ebx#2 = eax#7'
p3041
aS'Non-SSA form: ebx = eax'
p3042
aS'MLIL: None'
p3043
aS'Mapped MLIL: c = 1'
p3044
aS'Value: <undetermined>'
p3045
aS'Possible Values: <undetermined>'
p3046
aS'Prefix operands: [<LLIL_SET_FLAG>, c, <LLIL_CONST 1>, 1L]'
p3047
aS'Postfix operands: [c, 1L, <LLIL_CONST 1>, <LLIL_SET_FLAG>]'
p3048
aS'SSA form: flag:c#4 = 1'
p3049
aS'Non-SSA form: flag:c = 1'
p3050
aS'MLIL: eax_6 = sbb.d(eax_5, eax_5, true)'
p3051
aS'Mapped MLIL: eax = sbb.d(eax, eax, true)'
p3052
aS'Value: <undetermined>'
p3053
aS'Possible Values: <undetermined>'
p3054
aS'Prefix operands: [<LLIL_SET_REG 4>, eax, <LLIL_SBB 4>, <LLIL_REG 4>, eax, <LLIL_REG 4>, eax, <LLIL_FLAG>, c]'
p3055
aS'Postfix operands: [eax, eax, <LLIL_REG 4>, eax, <LLIL_REG 4>, c, <LLIL_FLAG>, <LLIL_SBB 4>, <LLIL_SET_REG 4>]'
p3056
aS'SSA form: eax#8 = sbb.d(eax#7, eax#7, flag:c#4)'
p3057
aS'Non-SSA form: eax = sbb.d(eax, eax, flag:c)'
p3058
aS'MLIL: eax_7 = eax_6 - ebx'
p3059
aS'Mapped MLIL: eax = eax - ebx'
p3060
aS'Value: <undetermined>'
p3061
aS'Possible Values: <undetermined>'
p3062
aS'Prefix operands: [<LLIL_SET_REG 4>, eax, <LLIL_SUB 4>, <LLIL_REG 4>, eax, <LLIL_REG 4>, ebx]'
p3063
aS'Postfix operands: [eax, eax, <LLIL_REG 4>, ebx, <LLIL_REG 4>, <LLIL_SUB 4>, <LLIL_SET_REG 4>]'
p3064
aS'SSA form: eax#9 = eax#8 - ebx#2'
p3065
aS'Non-SSA form: eax = eax - ebx'
p3066
aS'MLIL: eax_8 = eax_7 & 0xffff'
p3067
aS'Mapped MLIL: eax = eax & 0xffff'
p3068
aS'Value: <undetermined>'
p3069
aS'Possible Values: <undetermined>'
p3070
aS'Prefix operands: [<LLIL_SET_REG 4>, eax, <LLIL_AND 4>, <LLIL_REG 4>, eax, <LLIL_CONST 4>, 65535L]'
p3071
aS'Postfix operands: [eax, eax, <LLIL_REG 4>, 65535L, <LLIL_CONST 4>, <LLIL_AND 4>, <LLIL_SET_REG 4>]'
p3072
aS'SSA form: eax#10 = eax#9 & 0xffff'
p3073
aS'Non-SSA form: eax = eax & 0xffff'
p3074
aS'MLIL: eax_9 = eax_8 | 0x5555'
p3075
aS'Mapped MLIL: eax = eax | 0x5555'
p3076
aS'Value: <undetermined>'
p3077
aS'Possible Values: <undetermined>'
p3078
aS'Prefix operands: [<LLIL_SET_REG 4>, eax, <LLIL_OR 4>, <LLIL_REG 4>, eax, <LLIL_CONST 4>, 21845L]'
p3079
aS'Postfix operands: [eax, eax, <LLIL_REG 4>, 21845L, <LLIL_CONST 4>, <LLIL_OR 4>, <LLIL_SET_REG 4>]'
p3080
aS'SSA form: eax#11 = eax#10 | 0x5555'
p3081
aS'Non-SSA form: eax = eax | 0x5555'
p3082
aS'MLIL: eax_10 = eax_9 ^ 0x8888'
p3083
aS'Mapped MLIL: eax = eax ^ 0x8888'
p3084
aS'Value: <undetermined>'
p3085
aS'Possible Values: <undetermined>'
p3086
aS'Prefix operands: [<LLIL_SET_REG 4>, eax, <LLIL_XOR 4>, <LLIL_REG 4>, eax, <LLIL_CONST 4>, 34952L]'
p3087
aS'Postfix operands: [eax, eax, <LLIL_REG 4>, 34952L, <LLIL_CONST 4>, <LLIL_XOR 4>, <LLIL_SET_REG 4>]'
p3088
aS'SSA form: eax#12 = eax#11 ^ 0x8888'
p3089
aS'Non-SSA form: eax = eax ^ 0x8888'
p3090
aS'MLIL: eax_11 = eax_10 << 0x10'
p3091
aS'Mapped MLIL: eax = eax << 0x10'
p3092
aS'Value: <undetermined>'
p3093
aS'Possible Values: <undetermined>'
p3094
aS'Prefix operands: [<LLIL_SET_REG 4>, eax, <LLIL_LSL 4>, <LLIL_REG 4>, eax, <LLIL_CONST 1>, 16L]'
p3095
aS'Postfix operands: [eax, eax, <LLIL_REG 4>, 16L, <LLIL_CONST 1>, <LLIL_LSL 4>, <LLIL_SET_REG 4>]'
p3096
aS'SSA form: eax#13 = eax#12 << 0x10'
p3097
aS'Non-SSA form: eax = eax << 0x10'
p3098
aS'MLIL: [0x2000].d = [0x2000].d + eax_11'
p3099
aS'Mapped MLIL: [0x2000].d = [0x2000].d + eax'
p3100
aS'Value: <undetermined>'
p3101
aS'Possible Values: <undetermined>'
p3102
aS'Prefix operands: [<LLIL_STORE 4>, <LLIL_CONST_PTR 4>, 8192L, <LLIL_ADD 4>, <LLIL_LOAD 4>, <LLIL_CONST_PTR 4>, 8192L, <LLIL_REG 4>, eax]'
p3103
aS'Postfix operands: [8192L, <LLIL_CONST_PTR 4>, 8192L, <LLIL_CONST_PTR 4>, <LLIL_LOAD 4>, eax, <LLIL_REG 4>, <LLIL_ADD 4>, <LLIL_STORE 4>]'
p3104
aS'SSA form: [0x2000].d = [0x2000].d @ mem#6 + eax#13 @ mem#6 -> mem#7'
p3105
aS'Non-SSA form: [0x2000].d = [0x2000].d + eax'
p3106
aS'MLIL: eax_12 = eax_11 s>> 4'
p3107
aS'Mapped MLIL: eax = eax s>> 4'
p3108
aS'Value: <undetermined>'
p3109
aS'Possible Values: <undetermined>'
p3110
aS'Prefix operands: [<LLIL_SET_REG 4>, eax, <LLIL_ASR 4>, <LLIL_REG 4>, eax, <LLIL_CONST 1>, 4L]'
p3111
aS'Postfix operands: [eax, eax, <LLIL_REG 4>, 4L, <LLIL_CONST 1>, <LLIL_ASR 4>, <LLIL_SET_REG 4>]'
p3112
aS'SSA form: eax#14 = eax#13 s>> 4'
p3113
aS'Non-SSA form: eax = eax s>> 4'
p3114
aS'MLIL: eax_13 = eax_12 u>> 8'
p3115
aS'Mapped MLIL: eax = eax u>> 8'
p3116
aS'Value: <undetermined>'
p3117
aS'Possible Values: <undetermined>'
p3118
aS'Prefix operands: [<LLIL_SET_REG 4>, eax, <LLIL_LSR 4>, <LLIL_REG 4>, eax, <LLIL_CONST 1>, 8L]'
p3119
aS'Postfix operands: [eax, eax, <LLIL_REG 4>, 8L, <LLIL_CONST 1>, <LLIL_LSR 4>, <LLIL_SET_REG 4>]'
p3120
aS'SSA form: eax#15 = eax#14 u>> 8'
p3121
aS'Non-SSA form: eax = eax u>> 8'
p3122
aS'MLIL: eax_14 = rol.d(eax_13, 0x10)'
p3123
aS'Mapped MLIL: eax = rol.d(eax, 0x10)'
p3124
aS'Value: <undetermined>'
p3125
aS'Possible Values: <undetermined>'
p3126
aS'Prefix operands: [<LLIL_SET_REG 4>, eax, <LLIL_ROL 4>, <LLIL_REG 4>, eax, <LLIL_CONST 1>, 16L]'
p3127
aS'Postfix operands: [eax, eax, <LLIL_REG 4>, 16L, <LLIL_CONST 1>, <LLIL_ROL 4>, <LLIL_SET_REG 4>]'
p3128
aS'SSA form: eax#16 = rol.d(eax#15, 0x10)'
p3129
aS'Non-SSA form: eax = rol.d(eax, 0x10)'
p3130
aS'MLIL: [0x2000].d = [0x2000].d + eax_14'
p3131
aS'Mapped MLIL: [0x2000].d = [0x2000].d + eax'
p3132
aS'Value: <undetermined>'
p3133
aS'Possible Values: <undetermined>'
p3134
aS'Prefix operands: [<LLIL_STORE 4>, <LLIL_CONST_PTR 4>, 8192L, <LLIL_ADD 4>, <LLIL_LOAD 4>, <LLIL_CONST_PTR 4>, 8192L, <LLIL_REG 4>, eax]'
p3135
aS'Postfix operands: [8192L, <LLIL_CONST_PTR 4>, 8192L, <LLIL_CONST_PTR 4>, <LLIL_LOAD 4>, eax, <LLIL_REG 4>, <LLIL_ADD 4>, <LLIL_STORE 4>]'
p3136
aS'SSA form: [0x2000].d = [0x2000].d @ mem#7 + eax#16 @ mem#7 -> mem#8'
p3137
aS'Non-SSA form: [0x2000].d = [0x2000].d + eax'
p3138
aS'MLIL: eax_15 = ror.d(eax_14, 8)'
p3139
aS'Mapped MLIL: eax = ror.d(eax, 8)'
p3140
aS'Value: <undetermined>'
p3141
aS'Possible Values: <undetermined>'
p3142
aS'Prefix operands: [<LLIL_SET_REG 4>, eax, <LLIL_ROR 4>, <LLIL_REG 4>, eax, <LLIL_CONST 1>, 8L]'
p3143
aS'Postfix operands: [eax, eax, <LLIL_REG 4>, 8L, <LLIL_CONST 1>, <LLIL_ROR 4>, <LLIL_SET_REG 4>]'
p3144
aS'SSA form: eax#17 = ror.d(eax#16, 8)'
p3145
aS'Non-SSA form: eax = ror.d(eax, 8)'
p3146
aS'MLIL: None'
p3147
aS'Mapped MLIL: c = 0'
p3148
aS'Value: <undetermined>'
p3149
aS'Possible Values: <undetermined>'
p3150
aS'Prefix operands: [<LLIL_SET_FLAG>, c, <LLIL_CONST 1>, 0L]'
p3151
aS'Postfix operands: [c, 0L, <LLIL_CONST 1>, <LLIL_SET_FLAG>]'
p3152
aS'SSA form: flag:c#5 = 0'
p3153
aS'Non-SSA form: flag:c = 0'
p3154
aS'MLIL: eax_16 = rrc.d(eax_15, 1, false)'
p3155
aS'Mapped MLIL: eax = rrc.d(eax, 1, false)'
p3156
aS'Value: <undetermined>'
p3157
aS'Possible Values: <undetermined>'
p3158
aS'Prefix operands: [<LLIL_SET_REG 4>, eax, <LLIL_RRC 4>, <LLIL_REG 4>, eax, <LLIL_CONST 1>, 1L, <LLIL_FLAG>, c]'
p3159
aS'Postfix operands: [eax, eax, <LLIL_REG 4>, 1L, <LLIL_CONST 1>, c, <LLIL_FLAG>, <LLIL_RRC 4>, <LLIL_SET_REG 4>]'
p3160
aS'SSA form: eax#18 = rrc.d(eax#17, 1, flag:c#5)'
p3161
aS'Non-SSA form: eax = rrc.d(eax, 1, flag:c)'
p3162
aS'MLIL: None'
p3163
aS'Mapped MLIL: c = 1'
p3164
aS'Value: <undetermined>'
p3165
aS'Possible Values: <undetermined>'
p3166
aS'Prefix operands: [<LLIL_SET_FLAG>, c, <LLIL_CONST 1>, 1L]'
p3167
aS'Postfix operands: [c, 1L, <LLIL_CONST 1>, <LLIL_SET_FLAG>]'
p3168
aS'SSA form: flag:c#6 = 1'
p3169
aS'Non-SSA form: flag:c = 1'
p3170
aS'MLIL: eax_17 = rrc.d(eax_16, 1, true)'
p3171
aS'Mapped MLIL: eax = rrc.d(eax, 1, true)'
p3172
aS'Value: <undetermined>'
p3173
aS'Possible Values: <undetermined>'
p3174
aS'Prefix operands: [<LLIL_SET_REG 4>, eax, <LLIL_RLC 4>, <LLIL_REG 4>, eax, <LLIL_CONST 1>, 1L, <LLIL_FLAG>, c]'
p3175
aS'Postfix operands: [eax, eax, <LLIL_REG 4>, 1L, <LLIL_CONST 1>, c, <LLIL_FLAG>, <LLIL_RLC 4>, <LLIL_SET_REG 4>]'
p3176
aS'SSA form: eax#19 = rlc.d(eax#18, 1, flag:c#6)'
p3177
aS'Non-SSA form: eax = rlc.d(eax, 1, flag:c)'
p3178
aS'MLIL: [0x2000].d = [0x2000].d + eax_17'
p3179
aS'Mapped MLIL: [0x2000].d = [0x2000].d + eax'
p3180
aS'Value: <undetermined>'
p3181
aS'Possible Values: <undetermined>'
p3182
aS'Prefix operands: [<LLIL_STORE 4>, <LLIL_CONST_PTR 4>, 8192L, <LLIL_ADD 4>, <LLIL_LOAD 4>, <LLIL_CONST_PTR 4>, 8192L, <LLIL_REG 4>, eax]'
p3183
aS'Postfix operands: [8192L, <LLIL_CONST_PTR 4>, 8192L, <LLIL_CONST_PTR 4>, <LLIL_LOAD 4>, eax, <LLIL_REG 4>, <LLIL_ADD 4>, <LLIL_STORE 4>]'
p3184
aS'SSA form: [0x2000].d = [0x2000].d @ mem#8 + eax#19 @ mem#8 -> mem#9'
p3185
aS'Non-SSA form: [0x2000].d = [0x2000].d + eax'
p3186
aS'MLIL: eax_17.al = 0x10'
p3187
aS'Mapped MLIL: eax.al = 0x10'
p3188
aS'Value: <undetermined>'
p3189
aS'Possible Values: <undetermined>'
p3190
aS'Prefix operands: [<LLIL_SET_REG 1>, al, <LLIL_CONST 1>, 16L]'
p3191
aS'Postfix operands: [al, 16L, <LLIL_CONST 1>, <LLIL_SET_REG 1>]'
p3192
aS'SSA form: eax#20.al = 0x10'
p3193
aS'Non-SSA form: al = 0x10'
p3194
aS'MLIL: eax_17.al = eax_17.al + eax_17.ah'
p3195
aS'Mapped MLIL: eax.al = eax.al + eax.ah'
p3196
aS'Value: <undetermined>'
p3197
aS'Possible Values: <undetermined>'
p3198
aS'Prefix operands: [<LLIL_SET_REG 1>, al, <LLIL_ADD 1>, <LLIL_REG 1>, al, <LLIL_REG 1>, ah]'
p3199
aS'Postfix operands: [al, al, <LLIL_REG 1>, ah, <LLIL_REG 1>, <LLIL_ADD 1>, <LLIL_SET_REG 1>]'
p3200
aS'SSA form: eax#21.al = eax#20.al + eax#20.ah'
p3201
aS'Non-SSA form: al = al + ah'
p3202
aS'MLIL: [0x2000].d = [0x2000].d + eax_17'
p3203
aS'Mapped MLIL: [0x2000].d = [0x2000].d + eax'
p3204
aS'Value: <undetermined>'
p3205
aS'Possible Values: <undetermined>'
p3206
aS'Prefix operands: [<LLIL_STORE 4>, <LLIL_CONST_PTR 4>, 8192L, <LLIL_ADD 4>, <LLIL_LOAD 4>, <LLIL_CONST_PTR 4>, 8192L, <LLIL_REG 4>, eax]'
p3207
aS'Postfix operands: [8192L, <LLIL_CONST_PTR 4>, 8192L, <LLIL_CONST_PTR 4>, <LLIL_LOAD 4>, eax, <LLIL_REG 4>, <LLIL_ADD 4>, <LLIL_STORE 4>]'
p3208
aS'SSA form: [0x2000].d = [0x2000].d @ mem#9 + eax#21 @ mem#9 -> mem#10'
p3209
aS'Non-SSA form: [0x2000].d = [0x2000].d + eax'
p3210
aS'MLIL: eax_18 = eax_17 * eax_17'
p3211
aS'Mapped MLIL: eax = eax * eax'
p3212
aS'Value: <undetermined>'
p3213
aS'Possible Values: <undetermined>'
p3214
aS'Prefix operands: [<LLIL_SET_REG 4>, eax, <LLIL_MUL 4>, <LLIL_REG 4>, eax, <LLIL_REG 4>, eax]'
p3215
aS'Postfix operands: [eax, eax, <LLIL_REG 4>, eax, <LLIL_REG 4>, <LLIL_MUL 4>, <LLIL_SET_REG 4>]'
p3216
aS'SSA form: eax#22 = eax#21 * eax#21'
p3217
aS'Non-SSA form: eax = eax * eax'
p3218
aS'MLIL: None'
p3219
aS'Mapped MLIL: ecx = 5'
p3220
aS'Value: <undetermined>'
p3221
aS'Possible Values: <undetermined>'
p3222
aS'Prefix operands: [<LLIL_SET_REG 4>, ecx, <LLIL_CONST 4>, 5L]'
p3223
aS'Postfix operands: [ecx, 5L, <LLIL_CONST 4>, <LLIL_SET_REG 4>]'
p3224
aS'SSA form: ecx#3 = 5'
p3225
aS'Non-SSA form: ecx = 5'
p3226
aS'MLIL: edx_1:eax_19 = mulu.dp.d(eax_18, 5)'
p3227
aS'Mapped MLIL: edx:eax = mulu.dp.d(eax, 5)'
p3228
aS'Value: <undetermined>'
p3229
aS'Possible Values: <undetermined>'
p3230
aS'Prefix operands: [<LLIL_SET_REG_SPLIT 4>, edx, eax, <LLIL_MULU_DP 4>, <LLIL_REG 4>, eax, <LLIL_REG 4>, ecx]'
p3231
aS'Postfix operands: [edx, eax, eax, <LLIL_REG 4>, ecx, <LLIL_REG 4>, <LLIL_MULU_DP 4>, <LLIL_SET_REG_SPLIT 4>]'
p3232
aS'SSA form: edx#2:eax#23 = mulu.dp.d(eax#22, ecx#3)'
p3233
aS'Non-SSA form: edx:eax = mulu.dp.d(eax, ecx)'
p3234
aS'MLIL: ecx_2 = edx_1'
p3235
aS'Mapped MLIL: ecx = edx'
p3236
aS'Value: <undetermined>'
p3237
aS'Possible Values: <undetermined>'
p3238
aS'Prefix operands: [<LLIL_SET_REG 4>, ecx, <LLIL_REG 4>, edx]'
p3239
aS'Postfix operands: [ecx, edx, <LLIL_REG 4>, <LLIL_SET_REG 4>]'
p3240
aS'SSA form: ecx#4 = edx#2'
p3241
aS'Non-SSA form: ecx = edx'
p3242
aS'MLIL: edx_2:eax_20 = muls.dp.d(eax_19, ecx_2)'
p3243
aS'Mapped MLIL: edx:eax = muls.dp.d(eax, ecx)'
p3244
aS'Value: <undetermined>'
p3245
aS'Possible Values: <undetermined>'
p3246
aS'Prefix operands: [<LLIL_SET_REG_SPLIT 4>, edx, eax, <LLIL_MULS_DP 4>, <LLIL_REG 4>, eax, <LLIL_REG 4>, ecx]'
p3247
aS'Postfix operands: [edx, eax, eax, <LLIL_REG 4>, ecx, <LLIL_REG 4>, <LLIL_MULS_DP 4>, <LLIL_SET_REG_SPLIT 4>]'
p3248
aS'SSA form: edx#3:eax#24 = muls.dp.d(eax#23, ecx#4)'
p3249
aS'Non-SSA form: edx:eax = muls.dp.d(eax, ecx)'
p3250
aS'MLIL: None'
p3251
aS'Mapped MLIL: ecx = 9'
p3252
aS'Value: <undetermined>'
p3253
aS'Possible Values: <undetermined>'
p3254
aS'Prefix operands: [<LLIL_SET_REG 4>, ecx, <LLIL_CONST 4>, 9L]'
p3255
aS'Postfix operands: [ecx, 9L, <LLIL_CONST 4>, <LLIL_SET_REG 4>]'
p3256
aS'SSA form: ecx#5 = 9'
p3257
aS'Non-SSA form: ecx = 9'
p3258
aS'MLIL: temp0 = divs.dp.d(edx_2:eax_20, 9)'
p3259
aS'Mapped MLIL: temp0 = divs.dp.d(edx:eax, 9)'
p3260
aS'Value: <undetermined>'
p3261
aS'Possible Values: <undetermined>'
p3262
aS'Prefix operands: [<LLIL_SET_REG 4>, temp0, <LLIL_DIVS_DP 4>, <LLIL_REG_SPLIT 4>, edx, eax, <LLIL_REG 4>, ecx]'
p3263
aS'Postfix operands: [temp0, edx, eax, <LLIL_REG_SPLIT 4>, ecx, <LLIL_REG 4>, <LLIL_DIVS_DP 4>, <LLIL_SET_REG 4>]'
p3264
aS'SSA form: temp0#1.d = divs.dp.d(edx#3:eax#24, ecx#5)'
p3265
aS'Non-SSA form: temp0.d = divs.dp.d(edx:eax, ecx)'
p3266
aS'MLIL: temp1 = mods.dp.d(edx_2:eax_20, 9)'
p3267
aS'Mapped MLIL: temp1 = mods.dp.d(edx:eax, 9)'
p3268
aS'Value: <undetermined>'
p3269
aS'Possible Values: <undetermined>'
p3270
aS'Prefix operands: [<LLIL_SET_REG 4>, temp1, <LLIL_MODS_DP 4>, <LLIL_REG_SPLIT 4>, edx, eax, <LLIL_REG 4>, ecx]'
p3271
aS'Postfix operands: [temp1, edx, eax, <LLIL_REG_SPLIT 4>, ecx, <LLIL_REG 4>, <LLIL_MODS_DP 4>, <LLIL_SET_REG 4>]'
p3272
aS'SSA form: temp1#1.d = mods.dp.d(edx#3:eax#24, ecx#5)'
p3273
aS'Non-SSA form: temp1.d = mods.dp.d(edx:eax, ecx)'
p3274
aS'MLIL: eax_21 = temp0'
p3275
aS'Mapped MLIL: eax = temp0'
p3276
aS'Value: <undetermined>'
p3277
aS'Possible Values: <undetermined>'
p3278
aS'Prefix operands: [<LLIL_SET_REG 4>, eax, <LLIL_REG 4>, temp0]'
p3279
aS'Postfix operands: [eax, temp0, <LLIL_REG 4>, <LLIL_SET_REG 4>]'
p3280
aS'SSA form: eax#25 = temp0#1.d'
p3281
aS'Non-SSA form: eax = temp0.d'
p3282
aS'MLIL: edx_3 = temp1'
p3283
aS'Mapped MLIL: edx = temp1'
p3284
aS'Value: <undetermined>'
p3285
aS'Possible Values: <undetermined>'
p3286
aS'Prefix operands: [<LLIL_SET_REG 4>, edx, <LLIL_REG 4>, temp1]'
p3287
aS'Postfix operands: [edx, temp1, <LLIL_REG 4>, <LLIL_SET_REG 4>]'
p3288
aS'SSA form: edx#4 = temp1#1.d'
p3289
aS'Non-SSA form: edx = temp1.d'
p3290
aS'MLIL: [0x2000].d = [0x2000].d + edx_3'
p3291
aS'Mapped MLIL: [0x2000].d = [0x2000].d + edx'
p3292
aS'Value: <undetermined>'
p3293
aS'Possible Values: <undetermined>'
p3294
aS'Prefix operands: [<LLIL_STORE 4>, <LLIL_CONST_PTR 4>, 8192L, <LLIL_ADD 4>, <LLIL_LOAD 4>, <LLIL_CONST_PTR 4>, 8192L, <LLIL_REG 4>, edx]'
p3295
aS'Postfix operands: [8192L, <LLIL_CONST_PTR 4>, 8192L, <LLIL_CONST_PTR 4>, <LLIL_LOAD 4>, edx, <LLIL_REG 4>, <LLIL_ADD 4>, <LLIL_STORE 4>]'
p3296
aS'SSA form: [0x2000].d = [0x2000].d @ mem#10 + edx#4 @ mem#10 -> mem#11'
p3297
aS'Non-SSA form: [0x2000].d = [0x2000].d + edx'
p3298
aS'MLIL: edx_4:eax_22 = sx.q(eax_21)'
p3299
aS'Mapped MLIL: edx:eax = sx.q(eax)'
p3300
aS'Value: <undetermined>'
p3301
aS'Possible Values: <undetermined>'
p3302
aS'Prefix operands: [<LLIL_SET_REG_SPLIT 4>, edx, eax, <LLIL_SX 8>, <LLIL_REG 4>, eax]'
p3303
aS'Postfix operands: [edx, eax, eax, <LLIL_REG 4>, <LLIL_SX 8>, <LLIL_SET_REG_SPLIT 4>]'
p3304
aS'SSA form: edx#5:eax#26 = sx.q(eax#25)'
p3305
aS'Non-SSA form: edx:eax = sx.q(eax)'
p3306
aS'MLIL: None'
p3307
aS'Mapped MLIL: ecx = 3'
p3308
aS'Value: <undetermined>'
p3309
aS'Possible Values: <undetermined>'
p3310
aS'Prefix operands: [<LLIL_SET_REG 4>, ecx, <LLIL_CONST 4>, 3L]'
p3311
aS'Postfix operands: [ecx, 3L, <LLIL_CONST 4>, <LLIL_SET_REG 4>]'
p3312
aS'SSA form: ecx#6 = 3'
p3313
aS'Non-SSA form: ecx = 3'
p3314
aS'MLIL: temp0_1 = divu.dp.d(edx_4:eax_22, 3)'
p3315
aS'Mapped MLIL: temp0 = divu.dp.d(edx:eax, 3)'
p3316
aS'Value: <undetermined>'
p3317
aS'Possible Values: <undetermined>'
p3318
aS'Prefix operands: [<LLIL_SET_REG 4>, temp0, <LLIL_DIVU_DP 4>, <LLIL_REG_SPLIT 4>, edx, eax, <LLIL_REG 4>, ecx]'
p3319
aS'Postfix operands: [temp0, edx, eax, <LLIL_REG_SPLIT 4>, ecx, <LLIL_REG 4>, <LLIL_DIVU_DP 4>, <LLIL_SET_REG 4>]'
p3320
aS'SSA form: temp0#2.d = divu.dp.d(edx#5:eax#26, ecx#6)'
p3321
aS'Non-SSA form: temp0.d = divu.dp.d(edx:eax, ecx)'
p3322
aS'MLIL: temp1_1 = modu.dp.d(edx_4:eax_22, 3)'
p3323
aS'Mapped MLIL: temp1 = modu.dp.d(edx:eax, 3)'
p3324
aS'Value: <undetermined>'
p3325
aS'Possible Values: <undetermined>'
p3326
aS'Prefix operands: [<LLIL_SET_REG 4>, temp1, <LLIL_MODU_DP 4>, <LLIL_REG_SPLIT 4>, edx, eax, <LLIL_REG 4>, ecx]'
p3327
aS'Postfix operands: [temp1, edx, eax, <LLIL_REG_SPLIT 4>, ecx, <LLIL_REG 4>, <LLIL_MODU_DP 4>, <LLIL_SET_REG 4>]'
p3328
aS'SSA form: temp1#2.d = modu.dp.d(edx#5:eax#26, ecx#6)'
p3329
aS'Non-SSA form: temp1.d = modu.dp.d(edx:eax, ecx)'
p3330
aS'MLIL: eax_23 = temp0_1'
p3331
aS'Mapped MLIL: eax = temp0'
p3332
aS'Value: <undetermined>'
p3333
aS'Possible Values: <undetermined>'
p3334
aS'Prefix operands: [<LLIL_SET_REG 4>, eax, <LLIL_REG 4>, temp0]'
p3335
aS'Postfix operands: [eax, temp0, <LLIL_REG 4>, <LLIL_SET_REG 4>]'
p3336
aS'SSA form: eax#27 = temp0#2.d'
p3337
aS'Non-SSA form: eax = temp0.d'
p3338
aS'MLIL: edx_5 = temp1_1'
p3339
aS'Mapped MLIL: edx = temp1'
p3340
aS'Value: <undetermined>'
p3341
aS'Possible Values: <undetermined>'
p3342
aS'Prefix operands: [<LLIL_SET_REG 4>, edx, <LLIL_REG 4>, temp1]'
p3343
aS'Postfix operands: [edx, temp1, <LLIL_REG 4>, <LLIL_SET_REG 4>]'
p3344
aS'SSA form: edx#6 = temp1#2.d'
p3345
aS'Non-SSA form: edx = temp1.d'
p3346
aS'MLIL: [0x2000].d = [0x2000].d + edx_5'
p3347
aS'Mapped MLIL: [0x2000].d = [0x2000].d + edx'
p3348
aS'Value: <undetermined>'
p3349
aS'Possible Values: <undetermined>'
p3350
aS'Prefix operands: [<LLIL_STORE 4>, <LLIL_CONST_PTR 4>, 8192L, <LLIL_ADD 4>, <LLIL_LOAD 4>, <LLIL_CONST_PTR 4>, 8192L, <LLIL_REG 4>, edx]'
p3351
aS'Postfix operands: [8192L, <LLIL_CONST_PTR 4>, 8192L, <LLIL_CONST_PTR 4>, <LLIL_LOAD 4>, edx, <LLIL_REG 4>, <LLIL_ADD 4>, <LLIL_STORE 4>]'
p3352
aS'SSA form: [0x2000].d = [0x2000].d @ mem#11 + edx#6 @ mem#11 -> mem#12'
p3353
aS'Non-SSA form: [0x2000].d = [0x2000].d + edx'
p3354
aS'MLIL: [0x2000].d = [0x2000].d + eax_23'
p3355
aS'Mapped MLIL: [0x2000].d = [0x2000].d + eax'
p3356
aS'Value: <undetermined>'
p3357
aS'Possible Values: <undetermined>'
p3358
aS'Prefix operands: [<LLIL_STORE 4>, <LLIL_CONST_PTR 4>, 8192L, <LLIL_ADD 4>, <LLIL_LOAD 4>, <LLIL_CONST_PTR 4>, 8192L, <LLIL_REG 4>, eax]'
p3359
aS'Postfix operands: [8192L, <LLIL_CONST_PTR 4>, 8192L, <LLIL_CONST_PTR 4>, <LLIL_LOAD 4>, eax, <LLIL_REG 4>, <LLIL_ADD 4>, <LLIL_STORE 4>]'
p3360
aS'SSA form: [0x2000].d = [0x2000].d @ mem#12 + eax#27 @ mem#12 -> mem#13'
p3361
aS'Non-SSA form: [0x2000].d = [0x2000].d + eax'
p3362
aS'MLIL: eax_24 = neg.d(eax_23)'
p3363
aS'Mapped MLIL: eax = neg.d(eax)'
p3364
aS'Value: <undetermined>'
p3365
aS'Possible Values: <undetermined>'
p3366
aS'Prefix operands: [<LLIL_SET_REG 4>, eax, <LLIL_NEG 4>, <LLIL_REG 4>, eax]'
p3367
aS'Postfix operands: [eax, eax, <LLIL_REG 4>, <LLIL_NEG 4>, <LLIL_SET_REG 4>]'
p3368
aS'SSA form: eax#28 = neg.d(eax#27)'
p3369
aS'Non-SSA form: eax = neg.d(eax)'
p3370
aS'MLIL: eax_25 = not.d(eax_24)'
p3371
aS'Mapped MLIL: eax = not.d(eax)'
p3372
aS'Value: <undetermined>'
p3373
aS'Possible Values: <undetermined>'
p3374
aS'Prefix operands: [<LLIL_SET_REG 4>, eax, <LLIL_NOT 4>, <LLIL_REG 4>, eax]'
p3375
aS'Postfix operands: [eax, eax, <LLIL_REG 4>, <LLIL_NOT 4>, <LLIL_SET_REG 4>]'
p3376
aS'SSA form: eax#29 = not.d(eax#28)'
p3377
aS'Non-SSA form: eax = not.d(eax)'
p3378
aS'MLIL: [0x2000].d = [0x2000].d + eax_25'
p3379
aS'Mapped MLIL: [0x2000].d = [0x2000].d + eax'
p3380
aS'Value: <undetermined>'
p3381
aS'Possible Values: <undetermined>'
p3382
aS'Prefix operands: [<LLIL_STORE 4>, <LLIL_CONST_PTR 4>, 8192L, <LLIL_ADD 4>, <LLIL_LOAD 4>, <LLIL_CONST_PTR 4>, 8192L, <LLIL_REG 4>, eax]'
p3383
aS'Postfix operands: [8192L, <LLIL_CONST_PTR 4>, 8192L, <LLIL_CONST_PTR 4>, <LLIL_LOAD 4>, eax, <LLIL_REG 4>, <LLIL_ADD 4>, <LLIL_STORE 4>]'
p3384
aS'SSA form: [0x2000].d = [0x2000].d @ mem#13 + eax#29 @ mem#13 -> mem#14'
p3385
aS'Non-SSA form: [0x2000].d = [0x2000].d + eax'
p3386
aS'MLIL: eax_26 = sx.d(eax_25.ax)'
p3387
aS'Mapped MLIL: eax = sx.d(eax.ax)'
p3388
aS'Value: <undetermined>'
p3389
aS'Possible Values: <undetermined>'
p3390
aS'Prefix operands: [<LLIL_SET_REG 4>, eax, <LLIL_SX 4>, <LLIL_REG 2>, ax]'
p3391
aS'Postfix operands: [eax, ax, <LLIL_REG 2>, <LLIL_SX 4>, <LLIL_SET_REG 4>]'
p3392
aS'SSA form: eax#30 = sx.d(eax#29.ax)'
p3393
aS'Non-SSA form: eax = sx.d(ax)'
p3394
aS'MLIL: edx_6 = zx.d(edx_5.dx)'
p3395
aS'Mapped MLIL: edx = zx.d(edx.dx)'
p3396
aS'Value: <undetermined>'
p3397
aS'Possible Values: <undetermined>'
p3398
aS'Prefix operands: [<LLIL_SET_REG 4>, edx, <LLIL_ZX 4>, <LLIL_REG 2>, dx]'
p3399
aS'Postfix operands: [edx, dx, <LLIL_REG 2>, <LLIL_ZX 4>, <LLIL_SET_REG 4>]'
p3400
aS'SSA form: edx#7 = zx.d(edx#6.dx)'
p3401
aS'Non-SSA form: edx = zx.d(dx)'
p3402
aS'MLIL: eax_27 = eax_26 + edx_6'
p3403
aS'Mapped MLIL: eax = eax + edx'
p3404
aS'Value: <undetermined>'
p3405
aS'Possible Values: <undetermined>'
p3406
aS'Prefix operands: [<LLIL_SET_REG 4>, eax, <LLIL_ADD 4>, <LLIL_REG 4>, eax, <LLIL_REG 4>, edx]'
p3407
aS'Postfix operands: [eax, eax, <LLIL_REG 4>, edx, <LLIL_REG 4>, <LLIL_ADD 4>, <LLIL_SET_REG 4>]'
p3408
aS'SSA form: eax#31 = eax#30 + edx#7'
p3409
aS'Non-SSA form: eax = eax + edx'
p3410
aS'MLIL: [0x2000].d = [0x2000].d + eax_27'
p3411
aS'Mapped MLIL: [0x2000].d = [0x2000].d + eax'
p3412
aS'Value: <undetermined>'
p3413
aS'Possible Values: <undetermined>'
p3414
aS'Prefix operands: [<LLIL_STORE 4>, <LLIL_CONST_PTR 4>, 8192L, <LLIL_ADD 4>, <LLIL_LOAD 4>, <LLIL_CONST_PTR 4>, 8192L, <LLIL_REG 4>, eax]'
p3415
aS'Postfix operands: [8192L, <LLIL_CONST_PTR 4>, 8192L, <LLIL_CONST_PTR 4>, <LLIL_LOAD 4>, eax, <LLIL_REG 4>, <LLIL_ADD 4>, <LLIL_STORE 4>]'
p3416
aS'SSA form: [0x2000].d = [0x2000].d @ mem#14 + eax#31 @ mem#14 -> mem#15'
p3417
aS'Non-SSA form: [0x2000].d = [0x2000].d + eax'
p3418
aS'MLIL: eax_28 = [0x2000].d'
p3419
aS'Mapped MLIL: eax = [0x2000].d'
p3420
aS'Value: <undetermined>'
p3421
aS'Possible Values: <undetermined>'
p3422
aS'Prefix operands: [<LLIL_SET_REG 4>, eax, <LLIL_LOAD 4>, <LLIL_CONST_PTR 4>, 8192L]'
p3423
aS'Postfix operands: [eax, 8192L, <LLIL_CONST_PTR 4>, <LLIL_LOAD 4>, <LLIL_SET_REG 4>]'
p3424
aS'SSA form: eax#32 = [0x2000].d @ mem#15'
p3425
aS'Non-SSA form: eax = [0x2000].d'
p3426
aS'MLIL: eax_29 = eax_28 & 0x10'
p3427
aS'Mapped MLIL: eax = eax & 0x10'
p3428
aS'Value: <undetermined>'
p3429
aS'Possible Values: <undetermined>'
p3430
aS'Prefix operands: [<LLIL_SET_REG 4>, eax, <LLIL_AND 4>, <LLIL_REG 4>, eax, <LLIL_CONST 4>, 16L]'
p3431
aS'Postfix operands: [eax, eax, <LLIL_REG 4>, 16L, <LLIL_CONST 4>, <LLIL_AND 4>, <LLIL_SET_REG 4>]'
p3432
aS'SSA form: eax#33 = eax#32 & 0x10'
p3433
aS'Non-SSA form: eax = eax & 0x10'
p3434
aS'MLIL: None'
p3435
aS'Mapped MLIL: if (eax == 0) then 78 @ 0x1fed else 80 @ 0x1f2d'
p3436
aS'Value: <undetermined>'
p3437
aS'Possible Values: <undetermined>'
p3438
aS'Prefix operands: [<LLIL_IF>, <LLIL_CMP_E 4>, <LLIL_REG 4>, eax, <LLIL_CONST 4>, 0L, 72L, 74L]'
p3439
aS'Postfix operands: [eax, <LLIL_REG 4>, 0L, <LLIL_CONST 4>, <LLIL_CMP_E 4>, 72L, 74L, <LLIL_IF>]'
p3440
aS'SSA form: if (eax#33 == 0) then 78 @ 0x1fed else 80 @ 0x1f2d'
p3441
aS'Non-SSA form: if (eax == 0) then 72 @ 0x1fed else 74 @ 0x1f2d'
p3442
aS'MLIL: eax_39 = [0x2000].d'
p3443
aS'Mapped MLIL: eax = [0x2000].d'
p3444
aS'Value: <undetermined>'
p3445
aS'Possible Values: <undetermined>'
p3446
aS'Prefix operands: [<LLIL_SET_REG 4>, eax, <LLIL_LOAD 4>, <LLIL_CONST_PTR 4>, 8192L]'
p3447
aS'Postfix operands: [eax, 8192L, <LLIL_CONST_PTR 4>, <LLIL_LOAD 4>, <LLIL_SET_REG 4>]'
p3448
aS'SSA form: eax#34 = [0x2000].d @ mem#15'
p3449
aS'Non-SSA form: eax = [0x2000].d'
p3450
aS'MLIL: None'
p3451
aS'Mapped MLIL: jump(eax)'
p3452
aS'Value: <undetermined>'
p3453
aS'Possible Values: <undetermined>'
p3454
aS'Prefix operands: [<LLIL_JUMP>, <LLIL_REG 4>, eax]'
p3455
aS'Postfix operands: [eax, <LLIL_REG 4>, <LLIL_JUMP>]'
p3456
aS'SSA form: jump(eax#34)'
p3457
aS'Non-SSA form: jump(eax)'
p3458
aS'MLIL: eax_30 = eax_29 & 1'
p3459
aS'Mapped MLIL: eax = eax & 1'
p3460
aS'Value: <undetermined>'
p3461
aS'Possible Values: <undetermined>'
p3462
aS'Prefix operands: [<LLIL_SET_REG 4>, eax, <LLIL_AND 4>, <LLIL_REG 4>, eax, <LLIL_CONST 4>, 1L]'
p3463
aS'Postfix operands: [eax, eax, <LLIL_REG 4>, 1L, <LLIL_CONST 4>, <LLIL_AND 4>, <LLIL_SET_REG 4>]'
p3464
aS'SSA form: eax#35 = eax#33 & 0x1'
p3465
aS'Non-SSA form: eax = eax & 0x1'
p3466
aS'MLIL: eax_31 = [(eax_30 << 2) + 0x1f3b].d'
p3467
aS'Mapped MLIL: eax = [(eax << 2) + 0x1f3b].d'
p3468
aS'Value: <undetermined>'
p3469
aS'Possible Values: <undetermined>'
p3470
aS'Prefix operands: [<LLIL_SET_REG 4>, eax, <LLIL_LOAD 4>, <LLIL_ADD 4>, <LLIL_LSL 4>, <LLIL_REG 4>, eax, <LLIL_CONST 1>, 2L, <LLIL_CONST 4>, 7995L]'
p3471
aS'Postfix operands: [eax, eax, <LLIL_REG 4>, 2L, <LLIL_CONST 1>, <LLIL_LSL 4>, 7995L, <LLIL_CONST 4>, <LLIL_ADD 4>, <LLIL_LOAD 4>, <LLIL_SET_REG 4>]'
p3472
aS'SSA form: eax#36 = [(eax#35 << 2) + 0x1f3b].d @ mem#15'
p3473
aS'Non-SSA form: eax = [(eax << 2) + 0x1f3b].d'
p3474
aS'MLIL: None'
p3475
aS'Mapped MLIL: jump(eax => 83 @ 0x1f43)'
p3476
aS'Value: <undetermined>'
p3477
aS'Possible Values: <undetermined>'
p3478
aS'Prefix operands: [<LLIL_JUMP_TO>, <LLIL_REG 4>, eax, [77L]]'
p3479
aS'Postfix operands: [eax, <LLIL_REG 4>, [77L], <LLIL_JUMP_TO>]'
p3480
aS'SSA form: jump(eax#36 => 83 @ 0x1f43)'
p3481
aS'Non-SSA form: jump(eax => 77 @ 0x1f43)'
p3482
aS'MLIL: eax_32 = eax_31 + 1'
p3483
aS'Mapped MLIL: eax = eax + 1'
p3484
aS'Value: <undetermined>'
p3485
aS'Possible Values: <undetermined>'
p3486
aS'Prefix operands: [<LLIL_SET_REG 4>, eax, <LLIL_ADD 4>, <LLIL_REG 4>, eax, <LLIL_CONST 4>, 1L]'
p3487
aS'Postfix operands: [eax, eax, <LLIL_REG 4>, 1L, <LLIL_CONST 4>, <LLIL_ADD 4>, <LLIL_SET_REG 4>]'
p3488
aS'SSA form: eax#37 = eax#36 + 1'
p3489
aS'Non-SSA form: eax = eax + 1'
p3490
aS'MLIL: None'
p3491
aS'Mapped MLIL: goto 85 @ 0x1f4f'
p3492
aS'Value: <undetermined>'
p3493
aS'Possible Values: <undetermined>'
p3494
aS'Prefix operands: [<LLIL_GOTO>, 79L]'
p3495
aS'Postfix operands: [79L, <LLIL_GOTO>]'
p3496
aS'SSA form: goto 85 @ 0x1f4f'
p3497
aS'Non-SSA form: goto 79 @ 0x1f4f'
p3498
aS'MLIL: [0x2000].d = eax_32'
p3499
aS'Mapped MLIL: [0x2000].d = eax'
p3500
aS'Value: <undetermined>'
p3501
aS'Possible Values: <undetermined>'
p3502
aS'Prefix operands: [<LLIL_STORE 4>, <LLIL_CONST_PTR 4>, 8192L, <LLIL_REG 4>, eax]'
p3503
aS'Postfix operands: [8192L, <LLIL_CONST_PTR 4>, eax, <LLIL_REG 4>, <LLIL_STORE 4>]'
p3504
aS'SSA form: [0x2000].d = eax#37 @ mem#15 -> mem#16'
p3505
aS'Non-SSA form: [0x2000].d = eax'
p3506
aS'MLIL: var_4_2 = eax_32'
p3507
aS'Mapped MLIL: var_4 = eax'
p3508
aS'Value: <undetermined>'
p3509
aS'Possible Values: <undetermined>'
p3510
aS'Prefix operands: [<LLIL_PUSH 4>, <LLIL_REG 4>, eax]'
p3511
aS'Postfix operands: [eax, <LLIL_REG 4>, <LLIL_PUSH 4>]'
p3512
aS'SSA form: [esp#6 - 4].d = eax#37 @ mem#16 -> mem#17'
p3513
aS'Non-SSA form: push(eax)'
p3514
aS'MLIL: None'
p3515
aS'Mapped MLIL: var_8 = 5'
p3516
aS'Value: <undetermined>'
p3517
aS'Possible Values: <undetermined>'
p3518
aS'Prefix operands: [<LLIL_PUSH 4>, <LLIL_CONST 4>, 5L]'
p3519
aS'Postfix operands: [5L, <LLIL_CONST 4>, <LLIL_PUSH 4>]'
p3520
aS'SSA form: [esp#7 - 4].d = 5 @ mem#17 -> mem#18'
p3521
aS'Non-SSA form: push(5)'
p3522
aS'MLIL: eax_33 = 0x1ff7(5, var_4_2)'
p3523
aS'Mapped MLIL: eax = call(0x1ff7, stack = &var_8)'
p3524
aS'Value: <undetermined>'
p3525
aS'Possible Values: <undetermined>'
p3526
aS'Prefix operands: [<LLIL_CALL_STACK_ADJUST>, <LLIL_CONST_PTR 4>, 8183L, 0L, {}]'
p3527
aS'Postfix operands: [8183L, <LLIL_CONST_PTR 4>, 0L, {}, <LLIL_CALL_STACK_ADJUST>]'
p3528
aS'SSA form: eax#38, mem#19 = call(0x1ff7, stack = esp#8 @ mem#18)'
p3529
aS'Non-SSA form: call(0x1ff7)'
p3530
aS'MLIL: None'
p3531
aS'Mapped MLIL: esp = &arg_0'
p3532
aS'Value: <undetermined>'
p3533
aS'Possible Values: <undetermined>'
p3534
aS'Prefix operands: [<LLIL_SET_REG 4>, esp, <LLIL_ADD 4>, <LLIL_REG 4>, esp, <LLIL_CONST 4>, 8L]'
p3535
aS'Postfix operands: [esp, esp, <LLIL_REG 4>, 8L, <LLIL_CONST 4>, <LLIL_ADD 4>, <LLIL_SET_REG 4>]'
p3536
aS'SSA form: esp#9 = esp#8 + 8'
p3537
aS'Non-SSA form: esp = esp + 8'
p3538
aS'MLIL: [0x2000].d = eax_33'
p3539
aS'Mapped MLIL: [0x2000].d = eax'
p3540
aS'Value: <undetermined>'
p3541
aS'Possible Values: <undetermined>'
p3542
aS'Prefix operands: [<LLIL_STORE 4>, <LLIL_CONST_PTR 4>, 8192L, <LLIL_REG 4>, eax]'
p3543
aS'Postfix operands: [8192L, <LLIL_CONST_PTR 4>, eax, <LLIL_REG 4>, <LLIL_STORE 4>]'
p3544
aS'SSA form: [0x2000].d = eax#38 @ mem#19 -> mem#20'
p3545
aS'Non-SSA form: [0x2000].d = eax'
p3546
aS'MLIL: eax_34 = eax_33 & 0x80'
p3547
aS'Mapped MLIL: eax = eax & 0x80'
p3548
aS'Value: <undetermined>'
p3549
aS'Possible Values: <undetermined>'
p3550
aS'Prefix operands: [<LLIL_SET_REG 4>, eax, <LLIL_AND 4>, <LLIL_REG 4>, eax, <LLIL_CONST 4>, 128L]'
p3551
aS'Postfix operands: [eax, eax, <LLIL_REG 4>, 128L, <LLIL_CONST 4>, <LLIL_AND 4>, <LLIL_SET_REG 4>]'
p3552
aS'SSA form: eax#39 = eax#38 & 0x80'
p3553
aS'Non-SSA form: eax = eax & 0x80'
p3554
aS'MLIL: None'
p3555
aS'Mapped MLIL: if (eax != 0) then 95 @ 0x1f7b else 96 @ 0x1f71'
p3556
aS'Value: <undetermined>'
p3557
aS'Possible Values: <undetermined>'
p3558
aS'Prefix operands: [<LLIL_IF>, <LLIL_CMP_NE 4>, <LLIL_REG 4>, eax, <LLIL_CONST 4>, 0L, 87L, 88L]'
p3559
aS'Postfix operands: [eax, <LLIL_REG 4>, 0L, <LLIL_CONST 4>, <LLIL_CMP_NE 4>, 87L, 88L, <LLIL_IF>]'
p3560
aS'SSA form: if (eax#39 != 0) then 95 @ 0x1f7b else 96 @ 0x1f71'
p3561
aS'Non-SSA form: if (eax != 0) then 87 @ 0x1f7b else 88 @ 0x1f71'
p3562
aS'MLIL: None'
p3563
aS'Mapped MLIL: if (eax == 5) then 98 @ 0x1fc2 else 103 @ 0x1f82'
p3564
aS'Value: <undetermined>'
p3565
aS'Possible Values: <undetermined>'
p3566
aS'Prefix operands: [<LLIL_IF>, <LLIL_CMP_E 4>, <LLIL_REG 4>, eax, <LLIL_CONST 4>, 5L, 90L, 95L]'
p3567
aS'Postfix operands: [eax, <LLIL_REG 4>, 5L, <LLIL_CONST 4>, <LLIL_CMP_E 4>, 90L, 95L, <LLIL_IF>]'
p3568
aS'SSA form: if (eax#39 == 5) then 98 @ 0x1fc2 else 104 @ 0x1f82'
p3569
aS'Non-SSA form: if (eax == 5) then 90 @ 0x1fc2 else 95 @ 0x1f82'
p3570
aS'MLIL: 0x1ff4()'
p3571
aS'Mapped MLIL: call(0x1ff4, stack = &arg_0)'
p3572
aS'Value: <undetermined>'
p3573
aS'Possible Values: <undetermined>'
p3574
aS'Prefix operands: [<LLIL_CALL_STACK_ADJUST>, <LLIL_CONST_PTR 4>, 8180L, 0L, {}]'
p3575
aS'Postfix operands: [8180L, <LLIL_CONST_PTR 4>, 0L, {}, <LLIL_CALL_STACK_ADJUST>]'
p3576
aS'SSA form: mem#26 = call(0x1ff4, stack = esp#9 @ mem#20)'
p3577
aS'Non-SSA form: call(0x1ff4)'
p3578
aS'MLIL: None'
p3579
aS'Mapped MLIL: noreturn'
p3580
aS'Value: <undetermined>'
p3581
aS'Possible Values: <undetermined>'
p3582
aS'Prefix operands: [<LLIL_NORET>]'
p3583
aS'Postfix operands: [<LLIL_NORET>]'
p3584
aS'SSA form: noreturn'
p3585
aS'Non-SSA form: noreturn'
p3586
aS'MLIL: [0x2000].d = eax_34'
p3587
aS'Mapped MLIL: [0x2000].d = eax'
p3588
aS'Value: <undetermined>'
p3589
aS'Possible Values: <undetermined>'
p3590
aS'Prefix operands: [<LLIL_STORE 4>, <LLIL_CONST_PTR 4>, 8192L, <LLIL_REG 4>, eax]'
p3591
aS'Postfix operands: [8192L, <LLIL_CONST_PTR 4>, eax, <LLIL_REG 4>, <LLIL_STORE 4>]'
p3592
aS'SSA form: [0x2000].d = eax#40 @ mem#20 -> mem#21'
p3593
aS'Non-SSA form: [0x2000].d = eax'
p3594
aS'MLIL: temp3 = eax_34'
p3595
aS'Mapped MLIL: temp3 = eax'
p3596
aS'Value: <undetermined>'
p3597
aS'Possible Values: <undetermined>'
p3598
aS'Prefix operands: [<LLIL_SET_REG 4>, temp3, <LLIL_REG 4>, eax]'
p3599
aS'Postfix operands: [temp3, eax, <LLIL_REG 4>, <LLIL_SET_REG 4>]'
p3600
aS'SSA form: temp3#1.d = eax#40'
p3601
aS'Non-SSA form: temp3.d = eax'
p3602
aS'MLIL: eax_35 = temp3 + 8'
p3603
aS'Mapped MLIL: eax = temp3 + 8'
p3604
aS'Value: <undetermined>'
p3605
aS'Possible Values: <undetermined>'
p3606
aS'Prefix operands: [<LLIL_SET_REG 4>, eax, <LLIL_ADD 4>, <LLIL_REG 4>, temp3, <LLIL_CONST 4>, 8L]'
p3607
aS'Postfix operands: [eax, temp3, <LLIL_REG 4>, 8L, <LLIL_CONST 4>, <LLIL_ADD 4>, <LLIL_SET_REG 4>]'
p3608
aS'SSA form: eax#41 = temp3#1.d + 8'
p3609
aS'Non-SSA form: eax = temp3.d + 8'
p3610
aS'MLIL: o = add_overflow(temp3, 8)'
p3611
aS'Mapped MLIL: o = add_overflow(temp3, 8)'
p3612
aS'Value: <undetermined>'
p3613
aS'Possible Values: <undetermined>'
p3614
aS'Prefix operands: [<LLIL_SET_FLAG>, o, <LLIL_ADD_OVERFLOW>, <LLIL_REG 4>, temp3, <LLIL_CONST 4>, 8L]'
p3615
aS'Postfix operands: [o, temp3, <LLIL_REG 4>, 8L, <LLIL_CONST 4>, <LLIL_ADD_OVERFLOW>, <LLIL_SET_FLAG>]'
p3616
aS'SSA form: flag:o#1 = add_overflow(temp3#1.d, 8)'
p3617
aS'Non-SSA form: flag:o = add_overflow(temp3.d, 8)'
p3618
aS'MLIL: None'
p3619
aS'Mapped MLIL: if (not(o)) then 104 @ 0x1fd0 else 107 @ 0x1fce'
p3620
aS'Value: <undetermined>'
p3621
aS'Possible Values: <undetermined>'
p3622
aS'Prefix operands: [<LLIL_IF>, <LLIL_NOT>, <LLIL_FLAG>, o, 96L, 99L]'
p3623
aS'Postfix operands: [o, <LLIL_FLAG>, <LLIL_NOT>, 96L, 99L, <LLIL_IF>]'
p3624
aS'SSA form: if (not(flag:o#1)) then 105 @ 0x1fd0 else 108 @ 0x1fce'
p3625
aS'Non-SSA form: if (not(flag:o)) then 96 @ 0x1fd0 else 99 @ 0x1fce'
p3626
aS'MLIL: None'
p3627
aS'Mapped MLIL: if (eax != 8) then 108 @ 0x1f8e else 109 @ 0x1f84'
p3628
aS'Value: <undetermined>'
p3629
aS'Possible Values: <undetermined>'
p3630
aS'Prefix operands: [<LLIL_IF>, <LLIL_CMP_NE 4>, <LLIL_REG 4>, eax, <LLIL_CONST 4>, 8L, 100L, 101L]'
p3631
aS'Postfix operands: [eax, <LLIL_REG 4>, 8L, <LLIL_CONST 4>, <LLIL_CMP_NE 4>, 100L, 101L, <LLIL_IF>]'
p3632
aS'SSA form: if (eax#39 != 8) then 109 @ 0x1f8e else 110 @ 0x1f84'
p3633
aS'Non-SSA form: if (eax != 8) then 100 @ 0x1f8e else 101 @ 0x1f84'
p3634
aS'MLIL: [0x2000].d = eax_35'
p3635
aS'Mapped MLIL: [0x2000].d = eax'
p3636
aS'Value: <undetermined>'
p3637
aS'Possible Values: <undetermined>'
p3638
aS'Prefix operands: [<LLIL_STORE 4>, <LLIL_CONST_PTR 4>, 8192L, <LLIL_REG 4>, eax]'
p3639
aS'Postfix operands: [8192L, <LLIL_CONST_PTR 4>, eax, <LLIL_REG 4>, <LLIL_STORE 4>]'
p3640
aS'SSA form: [0x2000].d = eax#41 @ mem#21 -> mem#22'
p3641
aS'Non-SSA form: [0x2000].d = eax'
p3642
aS'MLIL: eax_36 = eax_35 & 1'
p3643
aS'Mapped MLIL: eax = eax & 1'
p3644
aS'Value: <undetermined>'
p3645
aS'Possible Values: <undetermined>'
p3646
aS'Prefix operands: [<LLIL_SET_REG 4>, eax, <LLIL_AND 4>, <LLIL_REG 4>, eax, <LLIL_CONST 4>, 1L]'
p3647
aS'Postfix operands: [eax, eax, <LLIL_REG 4>, 1L, <LLIL_CONST 4>, <LLIL_AND 4>, <LLIL_SET_REG 4>]'
p3648
aS'SSA form: eax#42 = eax#41 & 0x1'
p3649
aS'Non-SSA form: eax = eax & 0x1'
p3650
aS'MLIL: None'
p3651
aS'Mapped MLIL: if (eax == 0) then 110 @ 0x1fdf else 117 @ 0x1fdc'
p3652
aS'Value: <undetermined>'
p3653
aS'Possible Values: <undetermined>'
p3654
aS'Prefix operands: [<LLIL_IF>, <LLIL_CMP_E 4>, <LLIL_REG 4>, eax, <LLIL_CONST 4>, 0L, 102L, 107L]'
p3655
aS'Postfix operands: [eax, <LLIL_REG 4>, 0L, <LLIL_CONST 4>, <LLIL_CMP_E 4>, 102L, 107L, <LLIL_IF>]'
p3656
aS'SSA form: if (eax#42 == 0) then 111 @ 0x1fdf else 118 @ 0x1fdc'
p3657
aS'Non-SSA form: if (eax == 0) then 102 @ 0x1fdf else 107 @ 0x1fdc'
p3658
aS'MLIL: None'
p3659
aS'Mapped MLIL: trap(6)'
p3660
aS'Value: <undetermined>'
p3661
aS'Possible Values: <undetermined>'
p3662
aS'Prefix operands: [<LLIL_TRAP>, 6L]'
p3663
aS'Postfix operands: [6L, <LLIL_TRAP>]'
p3664
aS'SSA form: trap(6)'
p3665
aS'Non-SSA form: trap(6)'
p3666
aS'MLIL: None'
p3667
aS'Mapped MLIL: if (eax s< 0xc) then 98 @ 0x1fc2 else 119 @ 0x1f95'
p3668
aS'Value: <undetermined>'
p3669
aS'Possible Values: <undetermined>'
p3670
aS'Prefix operands: [<LLIL_IF>, <LLIL_CMP_SLT 4>, <LLIL_REG 4>, eax, <LLIL_CONST 4>, 12L, 90L, 109L]'
p3671
aS'Postfix operands: [eax, <LLIL_REG 4>, 12L, <LLIL_CONST 4>, <LLIL_CMP_SLT 4>, 90L, 109L, <LLIL_IF>]'
p3672
aS'SSA form: if (eax#39 s< 0xc) then 98 @ 0x1fc2 else 120 @ 0x1f95'
p3673
aS'Non-SSA form: if (eax s< 0xc) then 90 @ 0x1fc2 else 109 @ 0x1f95'
p3674
aS'MLIL: None'
p3675
aS'Mapped MLIL: goto 98 @ 0x1fc2'
p3676
aS'Value: <undetermined>'
p3677
aS'Possible Values: <undetermined>'
p3678
aS'Prefix operands: [<LLIL_GOTO>, 90L]'
p3679
aS'Postfix operands: [90L, <LLIL_GOTO>]'
p3680
aS'SSA form: goto 98 @ 0x1fc2'
p3681
aS'Non-SSA form: goto 90 @ 0x1fc2'
p3682
aS'MLIL: None'
p3683
aS'Mapped MLIL: eax = 1'
p3684
aS'Value: <undetermined>'
p3685
aS'Possible Values: <undetermined>'
p3686
aS'Prefix operands: [<LLIL_SET_REG 4>, eax, <LLIL_CONST 4>, 1L]'
p3687
aS'Postfix operands: [eax, 1L, <LLIL_CONST 4>, <LLIL_SET_REG 4>]'
p3688
aS'SSA form: eax#43 = 1'
p3689
aS'Non-SSA form: eax = 1'
p3690
aS'MLIL: None'
p3691
aS'Mapped MLIL: var_4 = 0'
p3692
aS'Value: <undetermined>'
p3693
aS'Possible Values: <undetermined>'
p3694
aS'Prefix operands: [<LLIL_PUSH 4>, <LLIL_CONST 4>, 0L]'
p3695
aS'Postfix operands: [0L, <LLIL_CONST 4>, <LLIL_PUSH 4>]'
p3696
aS'SSA form: [esp#9 - 4].d = 0 @ mem#22 -> mem#23'
p3697
aS'Non-SSA form: push(0)'
p3698
aS'MLIL: None'
p3699
aS'Mapped MLIL: var_8 = 1'
p3700
aS'Value: <undetermined>'
p3701
aS'Possible Values: <undetermined>'
p3702
aS'Prefix operands: [<LLIL_PUSH 4>, <LLIL_REG 4>, eax]'
p3703
aS'Postfix operands: [eax, <LLIL_REG 4>, <LLIL_PUSH 4>]'
p3704
aS'SSA form: [esp#10 - 4].d = eax#43 @ mem#23 -> mem#24'
p3705
aS'Non-SSA form: push(eax)'
p3706
aS'MLIL: eax_38 = syscall(1, 0)'
p3707
aS'Mapped MLIL: eax, edx, ecx = syscall(stack = &var_8)'
p3708
aS'Value: <undetermined>'
p3709
aS'Possible Values: <undetermined>'
p3710
aS'Prefix operands: [<LLIL_SYSCALL>]'
p3711
aS'Postfix operands: [<LLIL_SYSCALL>]'
p3712
aS'SSA form: eax#44, edx#8, ecx#7, mem#25 = syscall(stack = esp#11 @ mem#24)'
p3713
aS'Non-SSA form: syscall'
p3714
aS'MLIL: None'
p3715
aS'Mapped MLIL: return '
p3716
aS'Value: <undetermined>'
p3717
aS'Possible Values: <undetermined>'
p3718
aS'Prefix operands: [<LLIL_RET>, <LLIL_POP 4>]'
p3719
aS'Postfix operands: [<LLIL_POP 4>, <LLIL_RET>]'
p3720
aS'SSA form: <return> jump([esp#11].d @ mem#25)'
p3721
aS'Non-SSA form: <return> jump(pop)'
p3722
aS'MLIL: eax_37 = 0'
p3723
aS'Mapped MLIL: eax = 0'
p3724
aS'Value: <undetermined>'
p3725
aS'Possible Values: <undetermined>'
p3726
aS'Prefix operands: [<LLIL_SET_REG 4>, eax, <LLIL_CONST 4>, 0L]'
p3727
aS'Postfix operands: [eax, 0L, <LLIL_CONST 4>, <LLIL_SET_REG 4>]'
p3728
aS'SSA form: eax#45 = 0'
p3729
aS'Non-SSA form: eax = 0'
p3730
aS'MLIL: None'
p3731
aS'Mapped MLIL: return '
p3732
aS'Value: <undetermined>'
p3733
aS'Possible Values: <undetermined>'
p3734
aS'Prefix operands: [<LLIL_RET>, <LLIL_POP 4>]'
p3735
aS'Postfix operands: [<LLIL_POP 4>, <LLIL_RET>]'
p3736
aS'SSA form: <return> jump([esp#9].d @ mem#22)'
p3737
aS'Non-SSA form: <return> jump(pop)'
p3738
aS'MLIL: None'
p3739
aS'Mapped MLIL: if (eax u< 0xe) then 98 @ 0x1fc2 else 120 @ 0x1f9c'
p3740
aS'Value: <undetermined>'
p3741
aS'Possible Values: <undetermined>'
p3742
aS'Prefix operands: [<LLIL_IF>, <LLIL_CMP_ULT 4>, <LLIL_REG 4>, eax, <LLIL_CONST 4>, 14L, 90L, 110L]'
p3743
aS'Postfix operands: [eax, <LLIL_REG 4>, 14L, <LLIL_CONST 4>, <LLIL_CMP_ULT 4>, 90L, 110L, <LLIL_IF>]'
p3744
aS'SSA form: if (eax#39 u< 0xe) then 98 @ 0x1fc2 else 121 @ 0x1f9c'
p3745
aS'Non-SSA form: if (eax u< 0xe) then 90 @ 0x1fc2 else 110 @ 0x1f9c'
p3746
aS'MLIL: None'
p3747
aS'Mapped MLIL: if (eax s<= 0x12) then 98 @ 0x1fc2 else 121 @ 0x1fa3'
p3748
aS'Value: <undetermined>'
p3749
aS'Possible Values: <undetermined>'
p3750
aS'Prefix operands: [<LLIL_IF>, <LLIL_CMP_SLE 4>, <LLIL_REG 4>, eax, <LLIL_CONST 4>, 18L, 90L, 111L]'
p3751
aS'Postfix operands: [eax, <LLIL_REG 4>, 18L, <LLIL_CONST 4>, <LLIL_CMP_SLE 4>, 90L, 111L, <LLIL_IF>]'
p3752
aS'SSA form: if (eax#39 s<= 0x12) then 98 @ 0x1fc2 else 122 @ 0x1fa3'
p3753
aS'Non-SSA form: if (eax s<= 0x12) then 90 @ 0x1fc2 else 111 @ 0x1fa3'
p3754
aS'MLIL: None'
p3755
aS'Mapped MLIL: if (eax u<= 0x16) then 98 @ 0x1fc2 else 122 @ 0x1faa'
p3756
aS'Value: <undetermined>'
p3757
aS'Possible Values: <undetermined>'
p3758
aS'Prefix operands: [<LLIL_IF>, <LLIL_CMP_ULE 4>, <LLIL_REG 4>, eax, <LLIL_CONST 4>, 22L, 90L, 112L]'
p3759
aS'Postfix operands: [eax, <LLIL_REG 4>, 22L, <LLIL_CONST 4>, <LLIL_CMP_ULE 4>, 90L, 112L, <LLIL_IF>]'
p3760
aS'SSA form: if (eax#39 u<= 0x16) then 98 @ 0x1fc2 else 123 @ 0x1faa'
p3761
aS'Non-SSA form: if (eax u<= 0x16) then 90 @ 0x1fc2 else 112 @ 0x1faa'
p3762
aS'MLIL: None'
p3763
aS'Mapped MLIL: if (eax s>= 0x28) then 98 @ 0x1fc2 else 123 @ 0x1fb1'
p3764
aS'Value: <undetermined>'
p3765
aS'Possible Values: <undetermined>'
p3766
aS'Prefix operands: [<LLIL_IF>, <LLIL_CMP_SGE 4>, <LLIL_REG 4>, eax, <LLIL_CONST 4>, 40L, 90L, 113L]'
p3767
aS'Postfix operands: [eax, <LLIL_REG 4>, 40L, <LLIL_CONST 4>, <LLIL_CMP_SGE 4>, 90L, 113L, <LLIL_IF>]'
p3768
aS'SSA form: if (eax#39 s>= 0x28) then 98 @ 0x1fc2 else 124 @ 0x1fb1'
p3769
aS'Non-SSA form: if (eax s>= 0x28) then 90 @ 0x1fc2 else 113 @ 0x1fb1'
p3770
aS'MLIL: None'
p3771
aS'Mapped MLIL: if (eax u>= 0x24) then 98 @ 0x1fc2 else 124 @ 0x1fb8'
p3772
aS'Value: <undetermined>'
p3773
aS'Possible Values: <undetermined>'
p3774
aS'Prefix operands: [<LLIL_IF>, <LLIL_CMP_UGE 4>, <LLIL_REG 4>, eax, <LLIL_CONST 4>, 36L, 90L, 114L]'
p3775
aS'Postfix operands: [eax, <LLIL_REG 4>, 36L, <LLIL_CONST 4>, <LLIL_CMP_UGE 4>, 90L, 114L, <LLIL_IF>]'
p3776
aS'SSA form: if (eax#39 u>= 0x24) then 98 @ 0x1fc2 else 125 @ 0x1fb8'
p3777
aS'Non-SSA form: if (eax u>= 0x24) then 90 @ 0x1fc2 else 114 @ 0x1fb8'
p3778
aS'MLIL: None'
p3779
aS'Mapped MLIL: if (eax s> 0x20) then 98 @ 0x1fc2 else 125 @ 0x1fbf'
p3780
aS'Value: <undetermined>'
p3781
aS'Possible Values: <undetermined>'
p3782
aS'Prefix operands: [<LLIL_IF>, <LLIL_CMP_SGT 4>, <LLIL_REG 4>, eax, <LLIL_CONST 4>, 32L, 90L, 115L]'
p3783
aS'Postfix operands: [eax, <LLIL_REG 4>, 32L, <LLIL_CONST 4>, <LLIL_CMP_SGT 4>, 90L, 115L, <LLIL_IF>]'
p3784
aS'SSA form: if (eax#39 s> 0x20) then 98 @ 0x1fc2 else 126 @ 0x1fbf'
p3785
aS'Non-SSA form: if (eax s> 0x20) then 90 @ 0x1fc2 else 115 @ 0x1fbf'
p3786
aS'MLIL: None'
p3787
aS'Mapped MLIL: if (eax u> 0x1b) then 98 @ 0x1fc2 else 126 @ 0x1fc1'
p3788
aS'Value: <undetermined>'
p3789
aS'Possible Values: <undetermined>'
p3790
aS'Prefix operands: [<LLIL_IF>, <LLIL_CMP_UGT 4>, <LLIL_REG 4>, eax, <LLIL_CONST 4>, 27L, 90L, 116L]'
p3791
aS'Postfix operands: [eax, <LLIL_REG 4>, 27L, <LLIL_CONST 4>, <LLIL_CMP_UGT 4>, 90L, 116L, <LLIL_IF>]'
p3792
aS'SSA form: if (eax#39 u> 0x1b) then 98 @ 0x1fc2 else 127 @ 0x1fc1'
p3793
aS'Non-SSA form: if (eax u> 0x1b) then 90 @ 0x1fc2 else 116 @ 0x1fc1'
p3794
aS'MLIL: eax_34 = eax_34 + 1'
p3795
aS'Mapped MLIL: eax = eax + 1'
p3796
aS'Value: <undetermined>'
p3797
aS'Possible Values: <undetermined>'
p3798
aS'Prefix operands: [<LLIL_SET_REG 4>, eax, <LLIL_ADD 4>, <LLIL_REG 4>, eax, <LLIL_CONST 4>, 1L]'
p3799
aS'Postfix operands: [eax, eax, <LLIL_REG 4>, 1L, <LLIL_CONST 4>, <LLIL_ADD 4>, <LLIL_SET_REG 4>]'
p3800
aS'SSA form: eax#46 = eax#39 + 1'
p3801
aS'Non-SSA form: eax = eax + 1'
p3802
aS'MLIL: None'
p3803
aS'Mapped MLIL: goto 98 @ 0x1fc2'
p3804
aS'Value: <undetermined>'
p3805
aS'Possible Values: <undetermined>'
p3806
aS'Prefix operands: [<LLIL_GOTO>, 90L]'
p3807
aS'Postfix operands: [90L, <LLIL_GOTO>]'
p3808
aS'SSA form: goto 98 @ 0x1fc2'
p3809
aS'Non-SSA form: goto 90 @ 0x1fc2'
p3810
aS'MLIL: None'
p3811
aS'Mapped MLIL: breakpoint'
p3812
aS'Value: <undetermined>'
p3813
aS'Possible Values: <undetermined>'
p3814
aS'Prefix operands: [<LLIL_BP>]'
p3815
aS'Postfix operands: [<LLIL_BP>]'
p3816
aS'SSA form: breakpoint'
p3817
aS'Non-SSA form: breakpoint'
p3818
aS'MLIL: eax_1 = testautovar'
p3819
aS'Mapped MLIL: eax = testautovar'
p3820
aS'Value: <undetermined>'
p3821
aS'Possible Values: <undetermined>'
p3822
aS'Prefix operands: [<LLIL_SET_REG 4>, eax, <LLIL_LOAD 4>, <LLIL_ADD 4>, <LLIL_REG 4>, esp, <LLIL_CONST 4>, 4L]'
p3823
aS'Postfix operands: [eax, esp, <LLIL_REG 4>, 4L, <LLIL_CONST 4>, <LLIL_ADD 4>, <LLIL_LOAD 4>, <LLIL_SET_REG 4>]'
p3824
aS'SSA form: eax#1 = [esp#0 + 4].d @ mem#0'
p3825
aS'Non-SSA form: eax = [esp + 4].d'
p3826
aS'MLIL: eax = eax_1 + arg2'
p3827
aS'Mapped MLIL: eax = eax + arg2'
p3828
aS'Value: <undetermined>'
p3829
aS'Possible Values: <undetermined>'
p3830
aS'Prefix operands: [<LLIL_SET_REG 4>, eax, <LLIL_ADD 4>, <LLIL_REG 4>, eax, <LLIL_LOAD 4>, <LLIL_ADD 4>, <LLIL_REG 4>, esp, <LLIL_CONST 4>, 8L]'
p3831
aS'Postfix operands: [eax, eax, <LLIL_REG 4>, esp, <LLIL_REG 4>, 8L, <LLIL_CONST 4>, <LLIL_ADD 4>, <LLIL_LOAD 4>, <LLIL_ADD 4>, <LLIL_SET_REG 4>]'
p3832
aS'SSA form: eax#2 = eax#1 + [esp#0 + 8].d @ mem#0'
p3833
aS'Non-SSA form: eax = eax + [esp + 8].d'
p3834
aS'MLIL: None'
p3835
aS'Mapped MLIL: return '
p3836
aS'Value: <undetermined>'
p3837
aS'Possible Values: <undetermined>'
p3838
aS'Prefix operands: [<LLIL_RET>, <LLIL_POP 4>]'
p3839
aS'Postfix operands: [<LLIL_POP 4>, <LLIL_RET>]'
p3840
aS'SSA form: <return> jump([esp#0].d @ mem#0)'
p3841
aS'Non-SSA form: <return> jump(pop)'
p3842
asS'test_med_il_vars'
p3843
(lp3844
S'SSA var definition: None'
p3845
aS'SSA var uses: [0L]'
p3846
aS'SSA var value: <undetermined>'
p3847
aS'SSA var possible values: <undetermined>'
p3848
aS'SSA var version: <bound method MediumLevelILInstruction.get_ssa_var_version of <il: eax_40#1 = testautovar#0>>'
p3849
aS'SSA var definition: 0'
p3850
aS'SSA var uses: [1L]'
p3851
aS'SSA var value: <undetermined>'
p3852
aS'SSA var possible values: <undetermined>'
p3853
aS'SSA var version: <bound method MediumLevelILInstruction.get_ssa_var_version of <il: eax_40#1 = testautovar#0>>'
p3854
aS'SSA var definition: 0'
p3855
aS'SSA var uses: [1L]'
p3856
aS'SSA var value: <undetermined>'
p3857
aS'SSA var possible values: <undetermined>'
p3858
aS'SSA var version: <bound method MediumLevelILInstruction.get_ssa_var_version of <il: edx#1:eax#2 = sx.q(eax_40#1)>>'
p3859
aS'SSA var definition: 1'
p3860
aS'SSA var uses: []'
p3861
aS'SSA var value: <undetermined>'
p3862
aS'SSA var possible values: <undetermined>'
p3863
aS'SSA var version: <bound method MediumLevelILInstruction.get_ssa_var_version of <il: edx#1:eax#2 = sx.q(eax_40#1)>>'
p3864
aS'SSA var definition: 1'
p3865
aS'SSA var uses: []'
p3866
aS'SSA var value: <undetermined>'
p3867
aS'SSA var possible values: <undetermined>'
p3868
aS'SSA var version: <bound method MediumLevelILInstruction.get_ssa_var_version of <il: edx#1:eax#2 = sx.q(eax_40#1)>>'
p3869
aS'SSA var definition: 2'
p3870
aS'SSA var uses: [3L]'
p3871
aS'SSA var value: <undetermined>'
p3872
aS'SSA var possible values: <undetermined>'
p3873
aS'SSA var version: <bound method MediumLevelILInstruction.get_ssa_var_version of <il: ecx#1 = [0x2000].d @ mem#0>>'
p3874
aS'SSA var definition: 2'
p3875
aS'SSA var uses: [3L]'
p3876
aS'SSA var value: <undetermined>'
p3877
aS'SSA var possible values: <undetermined>'
p3878
aS'SSA var version: <bound method MediumLevelILInstruction.get_ssa_var_version of <il: ecx_1#2 = ecx#1 + 1>>'
p3879
aS'SSA var definition: 3'
p3880
aS'SSA var uses: [4L, 5L]'
p3881
aS'SSA var value: <undetermined>'
p3882
aS'SSA var possible values: <undetermined>'
p3883
aS'SSA var version: <bound method MediumLevelILInstruction.get_ssa_var_version of <il: ecx_1#2 = ecx#1 + 1>>'
p3884
aS'SSA var definition: 3'
p3885
aS'SSA var uses: [4L, 5L]'
p3886
aS'SSA var value: <undetermined>'
p3887
aS'SSA var possible values: <undetermined>'
p3888
aS'SSA var version: <bound method MediumLevelILInstruction.get_ssa_var_version of <il: [0x2000].d = ecx_1#2 @ mem#0 -> mem#1>>'
p3889
aS'SSA var definition: 3'
p3890
aS'SSA var uses: [4L, 5L]'
p3891
aS'SSA var value: <undetermined>'
p3892
aS'SSA var possible values: <undetermined>'
p3893
aS'SSA var version: <bound method MediumLevelILInstruction.get_ssa_var_version of <il: var_4#1 = ecx_1#2>>'
p3894
aS'SSA var definition: 5'
p3895
aS'SSA var uses: [6L]'
p3896
aS'SSA var value: <undetermined>'
p3897
aS'SSA var possible values: <undetermined>'
p3898
aS'SSA var version: <bound method MediumLevelILInstruction.get_ssa_var_version of <il: var_4#1 = ecx_1#2>>'
p3899
aS'SSA var definition: 5'
p3900
aS'SSA var uses: [6L]'
p3901
aS'SSA var value: <undetermined>'
p3902
aS'SSA var possible values: <undetermined>'
p3903
aS'SSA var version: <bound method MediumLevelILInstruction.get_ssa_var_version of <il: eax_1#3 = var_4#1>>'
p3904
aS'SSA var definition: 6'
p3905
aS'SSA var uses: [7L]'
p3906
aS'SSA var value: <undetermined>'
p3907
aS'SSA var possible values: <undetermined>'
p3908
aS'SSA var version: <bound method MediumLevelILInstruction.get_ssa_var_version of <il: eax_1#3 = var_4#1>>'
p3909
aS'SSA var definition: 6'
p3910
aS'SSA var uses: [7L]'
p3911
aS'SSA var value: <undetermined>'
p3912
aS'SSA var possible values: <undetermined>'
p3913
aS'SSA var version: <bound method MediumLevelILInstruction.get_ssa_var_version of <il: eax_2#4 = eax_1#3 + 0xa>>'
p3914
aS'SSA var definition: 7'
p3915
aS'SSA var uses: [8L, 9L]'
p3916
aS'SSA var value: <undetermined>'
p3917
aS'SSA var possible values: <undetermined>'
p3918
aS'SSA var version: <bound method MediumLevelILInstruction.get_ssa_var_version of <il: eax_2#4 = eax_1#3 + 0xa>>'
p3919
aS'SSA var definition: 7'
p3920
aS'SSA var uses: [8L, 9L]'
p3921
aS'SSA var value: <undetermined>'
p3922
aS'SSA var possible values: <undetermined>'
p3923
aS'SSA var version: <bound method MediumLevelILInstruction.get_ssa_var_version of <il: [0x2000].d = [0x2000].d @ mem#1 + eax_2#4 @ mem#1 -> mem#2>>'
p3924
aS'SSA var definition: 7'
p3925
aS'SSA var uses: [8L, 9L]'
p3926
aS'SSA var value: <undetermined>'
p3927
aS'SSA var possible values: <undetermined>'
p3928
aS'SSA var version: <bound method MediumLevelILInstruction.get_ssa_var_version of <il: temp2#1 = eax_2#4>>'
p3929
aS'SSA var definition: 9'
p3930
aS'SSA var uses: [10L]'
p3931
aS'SSA var value: <undetermined>'
p3932
aS'SSA var possible values: <undetermined>'
p3933
aS'SSA var version: <bound method MediumLevelILInstruction.get_ssa_var_version of <il: temp2#1 = eax_2#4>>'
p3934
aS'SSA var definition: 9'
p3935
aS'SSA var uses: [10L]'
p3936
aS'SSA var value: <undetermined>'
p3937
aS'SSA var possible values: <undetermined>'
p3938
aS'SSA var version: <bound method MediumLevelILInstruction.get_ssa_var_version of <il: eax_3#5 = temp2#1 + 0x1e80>>'
p3939
aS'SSA var definition: 10'
p3940
aS'SSA var uses: []'
p3941
aS'SSA var value: <undetermined>'
p3942
aS'SSA var possible values: <undetermined>'
p3943
aS'SSA var version: <bound method MediumLevelILInstruction.get_ssa_var_version of <il: eax_3#5 = temp2#1 + 0x1e80>>'
p3944
aS'SSA var definition: None'
p3945
aS'SSA var uses: [11L]'
p3946
aS'SSA var value: <undetermined>'
p3947
aS'SSA var possible values: <undetermined>'
p3948
aS'SSA var version: <bound method MediumLevelILInstruction.get_ssa_var_version of <il: var_4_1#2 = (flag63#0 ? 1 : 0 << 0xb) | ((flag60#0 ? 1 : 0 << 0xa) | ((flag57#0 ? 1 : 0 << 7) | ((flag54#0 ? 1 : 0 << 6) | ((flag51#0 ? 1 : 0 << 4) | ((flag48#0 ? 1 : 0 << 2) | (flag46#0 ? 1 : 0 << 0))))))>>'
p3949
aS'SSA var definition: None'
p3950
aS'SSA var uses: [11L]'
p3951
aS'SSA var value: <undetermined>'
p3952
aS'SSA var possible values: <undetermined>'
p3953
aS'SSA var version: <bound method MediumLevelILInstruction.get_ssa_var_version of <il: var_4_1#2 = (flag63#0 ? 1 : 0 << 0xb) | ((flag60#0 ? 1 : 0 << 0xa) | ((flag57#0 ? 1 : 0 << 7) | ((flag54#0 ? 1 : 0 << 6) | ((flag51#0 ? 1 : 0 << 4) | ((flag48#0 ? 1 : 0 << 2) | (flag46#0 ? 1 : 0 << 0))))))>>'
p3954
aS'SSA var definition: None'
p3955
aS'SSA var uses: [11L]'
p3956
aS'SSA var value: <undetermined>'
p3957
aS'SSA var possible values: <undetermined>'
p3958
aS'SSA var version: <bound method MediumLevelILInstruction.get_ssa_var_version of <il: var_4_1#2 = (flag63#0 ? 1 : 0 << 0xb) | ((flag60#0 ? 1 : 0 << 0xa) | ((flag57#0 ? 1 : 0 << 7) | ((flag54#0 ? 1 : 0 << 6) | ((flag51#0 ? 1 : 0 << 4) | ((flag48#0 ? 1 : 0 << 2) | (flag46#0 ? 1 : 0 << 0))))))>>'
p3959
aS'SSA var definition: None'
p3960
aS'SSA var uses: [11L]'
p3961
aS'SSA var value: <undetermined>'
p3962
aS'SSA var possible values: <undetermined>'
p3963
aS'SSA var version: <bound method MediumLevelILInstruction.get_ssa_var_version of <il: var_4_1#2 = (flag63#0 ? 1 : 0 << 0xb) | ((flag60#0 ? 1 : 0 << 0xa) | ((flag57#0 ? 1 : 0 << 7) | ((flag54#0 ? 1 : 0 << 6) | ((flag51#0 ? 1 : 0 << 4) | ((flag48#0 ? 1 : 0 << 2) | (flag46#0 ? 1 : 0 << 0))))))>>'
p3964
aS'SSA var definition: None'
p3965
aS'SSA var uses: [11L]'
p3966
aS'SSA var value: <undetermined>'
p3967
aS'SSA var possible values: <undetermined>'
p3968
aS'SSA var version: <bound method MediumLevelILInstruction.get_ssa_var_version of <il: var_4_1#2 = (flag63#0 ? 1 : 0 << 0xb) | ((flag60#0 ? 1 : 0 << 0xa) | ((flag57#0 ? 1 : 0 << 7) | ((flag54#0 ? 1 : 0 << 6) | ((flag51#0 ? 1 : 0 << 4) | ((flag48#0 ? 1 : 0 << 2) | (flag46#0 ? 1 : 0 << 0))))))>>'
p3969
aS'SSA var definition: None'
p3970
aS'SSA var uses: [11L]'
p3971
aS'SSA var value: <undetermined>'
p3972
aS'SSA var possible values: <undetermined>'
p3973
aS'SSA var version: <bound method MediumLevelILInstruction.get_ssa_var_version of <il: var_4_1#2 = (flag63#0 ? 1 : 0 << 0xb) | ((flag60#0 ? 1 : 0 << 0xa) | ((flag57#0 ? 1 : 0 << 7) | ((flag54#0 ? 1 : 0 << 6) | ((flag51#0 ? 1 : 0 << 4) | ((flag48#0 ? 1 : 0 << 2) | (flag46#0 ? 1 : 0 << 0))))))>>'
p3974
aS'SSA var definition: None'
p3975
aS'SSA var uses: [11L]'
p3976
aS'SSA var value: <undetermined>'
p3977
aS'SSA var possible values: <undetermined>'
p3978
aS'SSA var version: <bound method MediumLevelILInstruction.get_ssa_var_version of <il: var_4_1#2 = (flag63#0 ? 1 : 0 << 0xb) | ((flag60#0 ? 1 : 0 << 0xa) | ((flag57#0 ? 1 : 0 << 7) | ((flag54#0 ? 1 : 0 << 6) | ((flag51#0 ? 1 : 0 << 4) | ((flag48#0 ? 1 : 0 << 2) | (flag46#0 ? 1 : 0 << 0))))))>>'
p3979
aS'SSA var definition: 11'
p3980
aS'SSA var uses: [12L]'
p3981
aS'SSA var value: <undetermined>'
p3982
aS'SSA var possible values: <undetermined>'
p3983
aS'SSA var version: <bound method MediumLevelILInstruction.get_ssa_var_version of <il: var_4_1#2 = (flag63#0 ? 1 : 0 << 0xb) | ((flag60#0 ? 1 : 0 << 0xa) | ((flag57#0 ? 1 : 0 << 7) | ((flag54#0 ? 1 : 0 << 6) | ((flag51#0 ? 1 : 0 << 4) | ((flag48#0 ? 1 : 0 << 2) | (flag46#0 ? 1 : 0 << 0))))))>>'
p3984
aS'SSA var definition: 11'
p3985
aS'SSA var uses: [12L]'
p3986
aS'SSA var value: <undetermined>'
p3987
aS'SSA var possible values: <undetermined>'
p3988
aS'SSA var version: <bound method MediumLevelILInstruction.get_ssa_var_version of <il: eax_4#6 = var_4_1#2>>'
p3989
aS'SSA var definition: 12'
p3990
aS'SSA var uses: [13L, 14L]'
p3991
aS'SSA var value: <undetermined>'
p3992
aS'SSA var possible values: <undetermined>'
p3993
aS'SSA var version: <bound method MediumLevelILInstruction.get_ssa_var_version of <il: eax_4#6 = var_4_1#2>>'
p3994
aS'SSA var definition: 12'
p3995
aS'SSA var uses: [13L, 14L]'
p3996
aS'SSA var value: <undetermined>'
p3997
aS'SSA var possible values: <undetermined>'
p3998
aS'SSA var version: <bound method MediumLevelILInstruction.get_ssa_var_version of <il: [0x2000].d = [0x2000].d @ mem#2 + eax_4#6 @ mem#2 -> mem#3>>'
p3999
aS'SSA var definition: 12'
p4000
aS'SSA var uses: [13L, 14L]'
p4001
aS'SSA var value: <undetermined>'
p4002
aS'SSA var possible values: <undetermined>'
p4003
aS'SSA var version: <bound method MediumLevelILInstruction.get_ssa_var_version of <il: eax_5#7 = adc.d(eax_4#6, eax_4#6, true)>>'
p4004
aS'SSA var definition: 12'
p4005
aS'SSA var uses: [13L, 14L]'
p4006
aS'SSA var value: <undetermined>'
p4007
aS'SSA var possible values: <undetermined>'
p4008
aS'SSA var version: <bound method MediumLevelILInstruction.get_ssa_var_version of <il: eax_5#7 = adc.d(eax_4#6, eax_4#6, true)>>'
p4009
aS'SSA var definition: 14'
p4010
aS'SSA var uses: [15L, 16L]'
p4011
aS'SSA var value: <undetermined>'
p4012
aS'SSA var possible values: <undetermined>'
p4013
aS'SSA var version: <bound method MediumLevelILInstruction.get_ssa_var_version of <il: eax_5#7 = adc.d(eax_4#6, eax_4#6, true)>>'
p4014
aS'SSA var definition: 14'
p4015
aS'SSA var uses: [15L, 16L]'
p4016
aS'SSA var value: <undetermined>'
p4017
aS'SSA var possible values: <undetermined>'
p4018
aS'SSA var version: <bound method MediumLevelILInstruction.get_ssa_var_version of <il: ebx#1 = eax_5#7>>'
p4019
aS'SSA var definition: 15'
p4020
aS'SSA var uses: [17L]'
p4021
aS'SSA var value: <undetermined>'
p4022
aS'SSA var possible values: <undetermined>'
p4023
aS'SSA var version: <bound method MediumLevelILInstruction.get_ssa_var_version of <il: ebx#1 = eax_5#7>>'
p4024
aS'SSA var definition: 14'
p4025
aS'SSA var uses: [15L, 16L]'
p4026
aS'SSA var value: <undetermined>'
p4027
aS'SSA var possible values: <undetermined>'
p4028
aS'SSA var version: <bound method MediumLevelILInstruction.get_ssa_var_version of <il: eax_6#8 = sbb.d(eax_5#7, eax_5#7, true)>>'
p4029
aS'SSA var definition: 14'
p4030
aS'SSA var uses: [15L, 16L]'
p4031
aS'SSA var value: <undetermined>'
p4032
aS'SSA var possible values: <undetermined>'
p4033
aS'SSA var version: <bound method MediumLevelILInstruction.get_ssa_var_version of <il: eax_6#8 = sbb.d(eax_5#7, eax_5#7, true)>>'
p4034
aS'SSA var definition: 16'
p4035
aS'SSA var uses: [17L]'
p4036
aS'SSA var value: <undetermined>'
p4037
aS'SSA var possible values: <undetermined>'
p4038
aS'SSA var version: <bound method MediumLevelILInstruction.get_ssa_var_version of <il: eax_6#8 = sbb.d(eax_5#7, eax_5#7, true)>>'
p4039
aS'SSA var definition: 16'
p4040
aS'SSA var uses: [17L]'
p4041
aS'SSA var value: <undetermined>'
p4042
aS'SSA var possible values: <undetermined>'
p4043
aS'SSA var version: <bound method MediumLevelILInstruction.get_ssa_var_version of <il: eax_7#9 = eax_6#8 - ebx#1>>'
p4044
aS'SSA var definition: 15'
p4045
aS'SSA var uses: [17L]'
p4046
aS'SSA var value: <undetermined>'
p4047
aS'SSA var possible values: <undetermined>'
p4048
aS'SSA var version: <bound method MediumLevelILInstruction.get_ssa_var_version of <il: eax_7#9 = eax_6#8 - ebx#1>>'
p4049
aS'SSA var definition: 17'
p4050
aS'SSA var uses: [18L]'
p4051
aS'SSA var value: <undetermined>'
p4052
aS'SSA var possible values: <undetermined>'
p4053
aS'SSA var version: <bound method MediumLevelILInstruction.get_ssa_var_version of <il: eax_7#9 = eax_6#8 - ebx#1>>'
p4054
aS'SSA var definition: 17'
p4055
aS'SSA var uses: [18L]'
p4056
aS'SSA var value: <undetermined>'
p4057
aS'SSA var possible values: <undetermined>'
p4058
aS'SSA var version: <bound method MediumLevelILInstruction.get_ssa_var_version of <il: eax_8#10 = eax_7#9 & 0xffff>>'
p4059
aS'SSA var definition: 18'
p4060
aS'SSA var uses: [19L]'
p4061
aS'SSA var value: <undetermined>'
p4062
aS'SSA var possible values: <unsigned ranges: [<range: 0x0 to 0xffff>]>'
p4063
aS'SSA var version: <bound method MediumLevelILInstruction.get_ssa_var_version of <il: eax_8#10 = eax_7#9 & 0xffff>>'
p4064
aS'SSA var definition: 18'
p4065
aS'SSA var uses: [19L]'
p4066
aS'SSA var value: <undetermined>'
p4067
aS'SSA var possible values: <unsigned ranges: [<range: 0x0 to 0xffff>]>'
p4068
aS'SSA var version: <bound method MediumLevelILInstruction.get_ssa_var_version of <il: eax_9#11 = eax_8#10 | 0x5555>>'
p4069
aS'SSA var definition: 19'
p4070
aS'SSA var uses: [20L]'
p4071
aS'SSA var value: <undetermined>'
p4072
aS'SSA var possible values: <undetermined>'
p4073
aS'SSA var version: <bound method MediumLevelILInstruction.get_ssa_var_version of <il: eax_9#11 = eax_8#10 | 0x5555>>'
p4074
aS'SSA var definition: 19'
p4075
aS'SSA var uses: [20L]'
p4076
aS'SSA var value: <undetermined>'
p4077
aS'SSA var possible values: <undetermined>'
p4078
aS'SSA var version: <bound method MediumLevelILInstruction.get_ssa_var_version of <il: eax_10#12 = eax_9#11 ^ 0x8888>>'
p4079
aS'SSA var definition: 20'
p4080
aS'SSA var uses: [21L]'
p4081
aS'SSA var value: <undetermined>'
p4082
aS'SSA var possible values: <undetermined>'
p4083
aS'SSA var version: <bound method MediumLevelILInstruction.get_ssa_var_version of <il: eax_10#12 = eax_9#11 ^ 0x8888>>'
p4084
aS'SSA var definition: 20'
p4085
aS'SSA var uses: [21L]'
p4086
aS'SSA var value: <undetermined>'
p4087
aS'SSA var possible values: <undetermined>'
p4088
aS'SSA var version: <bound method MediumLevelILInstruction.get_ssa_var_version of <il: eax_11#13 = eax_10#12 << 0x10>>'
p4089
aS'SSA var definition: 21'
p4090
aS'SSA var uses: [22L, 23L]'
p4091
aS'SSA var value: <undetermined>'
p4092
aS'SSA var possible values: <undetermined>'
p4093
aS'SSA var version: <bound method MediumLevelILInstruction.get_ssa_var_version of <il: eax_11#13 = eax_10#12 << 0x10>>'
p4094
aS'SSA var definition: 21'
p4095
aS'SSA var uses: [22L, 23L]'
p4096
aS'SSA var value: <undetermined>'
p4097
aS'SSA var possible values: <undetermined>'
p4098
aS'SSA var version: <bound method MediumLevelILInstruction.get_ssa_var_version of <il: [0x2000].d = [0x2000].d @ mem#3 + eax_11#13 @ mem#3 -> mem#4>>'
p4099
aS'SSA var definition: 21'
p4100
aS'SSA var uses: [22L, 23L]'
p4101
aS'SSA var value: <undetermined>'
p4102
aS'SSA var possible values: <undetermined>'
p4103
aS'SSA var version: <bound method MediumLevelILInstruction.get_ssa_var_version of <il: eax_12#14 = eax_11#13 s>> 4>>'
p4104
aS'SSA var definition: 23'
p4105
aS'SSA var uses: [24L]'
p4106
aS'SSA var value: <undetermined>'
p4107
aS'SSA var possible values: <undetermined>'
p4108
aS'SSA var version: <bound method MediumLevelILInstruction.get_ssa_var_version of <il: eax_12#14 = eax_11#13 s>> 4>>'
p4109
aS'SSA var definition: 23'
p4110
aS'SSA var uses: [24L]'
p4111
aS'SSA var value: <undetermined>'
p4112
aS'SSA var possible values: <undetermined>'
p4113
aS'SSA var version: <bound method MediumLevelILInstruction.get_ssa_var_version of <il: eax_13#15 = eax_12#14 u>> 8>>'
p4114
aS'SSA var definition: 24'
p4115
aS'SSA var uses: [25L]'
p4116
aS'SSA var value: <undetermined>'
p4117
aS'SSA var possible values: <unsigned ranges: [<range: 0x0 to 0xffffff>]>'
p4118
aS'SSA var version: <bound method MediumLevelILInstruction.get_ssa_var_version of <il: eax_13#15 = eax_12#14 u>> 8>>'
p4119
aS'SSA var definition: 24'
p4120
aS'SSA var uses: [25L]'
p4121
aS'SSA var value: <undetermined>'
p4122
aS'SSA var possible values: <unsigned ranges: [<range: 0x0 to 0xffffff>]>'
p4123
aS'SSA var version: <bound method MediumLevelILInstruction.get_ssa_var_version of <il: eax_14#16 = rol.d(eax_13#15, 0x10)>>'
p4124
aS'SSA var definition: 25'
p4125
aS'SSA var uses: [26L, 27L]'
p4126
aS'SSA var value: <undetermined>'
p4127
aS'SSA var possible values: <undetermined>'
p4128
aS'SSA var version: <bound method MediumLevelILInstruction.get_ssa_var_version of <il: eax_14#16 = rol.d(eax_13#15, 0x10)>>'
p4129
aS'SSA var definition: 25'
p4130
aS'SSA var uses: [26L, 27L]'
p4131
aS'SSA var value: <undetermined>'
p4132
aS'SSA var possible values: <undetermined>'
p4133
aS'SSA var version: <bound method MediumLevelILInstruction.get_ssa_var_version of <il: [0x2000].d = [0x2000].d @ mem#4 + eax_14#16 @ mem#4 -> mem#5>>'
p4134
aS'SSA var definition: 25'
p4135
aS'SSA var uses: [26L, 27L]'
p4136
aS'SSA var value: <undetermined>'
p4137
aS'SSA var possible values: <undetermined>'
p4138
aS'SSA var version: <bound method MediumLevelILInstruction.get_ssa_var_version of <il: eax_15#17 = ror.d(eax_14#16, 8)>>'
p4139
aS'SSA var definition: 27'
p4140
aS'SSA var uses: [28L]'
p4141
aS'SSA var value: <undetermined>'
p4142
aS'SSA var possible values: <undetermined>'
p4143
aS'SSA var version: <bound method MediumLevelILInstruction.get_ssa_var_version of <il: eax_15#17 = ror.d(eax_14#16, 8)>>'
p4144
aS'SSA var definition: 27'
p4145
aS'SSA var uses: [28L]'
p4146
aS'SSA var value: <undetermined>'
p4147
aS'SSA var possible values: <undetermined>'
p4148
aS'SSA var version: <bound method MediumLevelILInstruction.get_ssa_var_version of <il: eax_16#18 = rrc.d(eax_15#17, 1, false)>>'
p4149
aS'SSA var definition: 28'
p4150
aS'SSA var uses: [29L]'
p4151
aS'SSA var value: <undetermined>'
p4152
aS'SSA var possible values: <undetermined>'
p4153
aS'SSA var version: <bound method MediumLevelILInstruction.get_ssa_var_version of <il: eax_16#18 = rrc.d(eax_15#17, 1, false)>>'
p4154
aS'SSA var definition: 28'
p4155
aS'SSA var uses: [29L]'
p4156
aS'SSA var value: <undetermined>'
p4157
aS'SSA var possible values: <undetermined>'
p4158
aS'SSA var version: <bound method MediumLevelILInstruction.get_ssa_var_version of <il: eax_17#19 = rrc.d(eax_16#18, 1, true)>>'
p4159
aS'SSA var definition: 29'
p4160
aS'SSA var uses: [30L, 31L]'
p4161
aS'SSA var value: <undetermined>'
p4162
aS'SSA var possible values: <undetermined>'
p4163
aS'SSA var version: <bound method MediumLevelILInstruction.get_ssa_var_version of <il: eax_17#19 = rrc.d(eax_16#18, 1, true)>>'
p4164
aS'SSA var definition: 29'
p4165
aS'SSA var uses: [30L, 31L]'
p4166
aS'SSA var value: <undetermined>'
p4167
aS'SSA var possible values: <undetermined>'
p4168
aS'SSA var version: <bound method MediumLevelILInstruction.get_ssa_var_version of <il: [0x2000].d = [0x2000].d @ mem#5 + eax_17#19 @ mem#5 -> mem#6>>'
p4169
aS'SSA var definition: 29'
p4170
aS'SSA var uses: [30L, 31L]'
p4171
aS'SSA var value: <undetermined>'
p4172
aS'SSA var possible values: <undetermined>'
p4173
aS'SSA var version: <bound method MediumLevelILInstruction.get_ssa_var_version of <il: eax_17#20.al = 0x10 @ eax_17#19>>'
p4174
aS'SSA var definition: 31'
p4175
aS'SSA var uses: [32L]'
p4176
aS'SSA var value: <undetermined>'
p4177
aS'SSA var possible values: <const 0x10>'
p4178
aS'SSA var version: <bound method MediumLevelILInstruction.get_ssa_var_version of <il: eax_17#20.al = 0x10 @ eax_17#19>>'
p4179
aS'SSA var definition: 31'
p4180
aS'SSA var uses: [32L]'
p4181
aS'SSA var value: <undetermined>'
p4182
aS'SSA var possible values: <const 0x10>'
p4183
aS'SSA var version: <bound method MediumLevelILInstruction.get_ssa_var_version of <il: eax_17#21.al = eax_17#20.al + eax_17#20.ah @ eax_17#20>>'
p4184
aS'SSA var definition: 31'
p4185
aS'SSA var uses: [32L]'
p4186
aS'SSA var value: <undetermined>'
p4187
aS'SSA var possible values: <const 0x10>'
p4188
aS'SSA var version: <bound method MediumLevelILInstruction.get_ssa_var_version of <il: eax_17#21.al = eax_17#20.al + eax_17#20.ah @ eax_17#20>>'
p4189
aS'SSA var definition: 31'
p4190
aS'SSA var uses: [32L]'
p4191
aS'SSA var value: <undetermined>'
p4192
aS'SSA var possible values: <const 0x10>'
p4193
aS'SSA var version: <bound method MediumLevelILInstruction.get_ssa_var_version of <il: eax_17#21.al = eax_17#20.al + eax_17#20.ah @ eax_17#20>>'
p4194
aS'SSA var definition: 32'
p4195
aS'SSA var uses: [33L, 34L]'
p4196
aS'SSA var value: <undetermined>'
p4197
aS'SSA var possible values: <undetermined>'
p4198
aS'SSA var version: <bound method MediumLevelILInstruction.get_ssa_var_version of <il: eax_17#21.al = eax_17#20.al + eax_17#20.ah @ eax_17#20>>'
p4199
aS'SSA var definition: 32'
p4200
aS'SSA var uses: [33L, 34L]'
p4201
aS'SSA var value: <undetermined>'
p4202
aS'SSA var possible values: <undetermined>'
p4203
aS'SSA var version: <bound method MediumLevelILInstruction.get_ssa_var_version of <il: [0x2000].d = [0x2000].d @ mem#6 + eax_17#21 @ mem#6 -> mem#7>>'
p4204
aS'SSA var definition: 32'
p4205
aS'SSA var uses: [33L, 34L]'
p4206
aS'SSA var value: <undetermined>'
p4207
aS'SSA var possible values: <undetermined>'
p4208
aS'SSA var version: <bound method MediumLevelILInstruction.get_ssa_var_version of <il: eax_18#22 = eax_17#21 * eax_17#21>>'
p4209
aS'SSA var definition: 32'
p4210
aS'SSA var uses: [33L, 34L]'
p4211
aS'SSA var value: <undetermined>'
p4212
aS'SSA var possible values: <undetermined>'
p4213
aS'SSA var version: <bound method MediumLevelILInstruction.get_ssa_var_version of <il: eax_18#22 = eax_17#21 * eax_17#21>>'
p4214
aS'SSA var definition: 34'
p4215
aS'SSA var uses: [35L]'
p4216
aS'SSA var value: <undetermined>'
p4217
aS'SSA var possible values: <undetermined>'
p4218
aS'SSA var version: <bound method MediumLevelILInstruction.get_ssa_var_version of <il: eax_18#22 = eax_17#21 * eax_17#21>>'
p4219
aS'SSA var definition: 34'
p4220
aS'SSA var uses: [35L]'
p4221
aS'SSA var value: <undetermined>'
p4222
aS'SSA var possible values: <undetermined>'
p4223
aS'SSA var version: <bound method MediumLevelILInstruction.get_ssa_var_version of <il: edx_1#2:eax_19#23 = mulu.dp.d(eax_18#22, 5)>>'
p4224
aS'SSA var definition: 35'
p4225
aS'SSA var uses: [36L]'
p4226
aS'SSA var value: <undetermined>'
p4227
aS'SSA var possible values: <undetermined>'
p4228
aS'SSA var version: <bound method MediumLevelILInstruction.get_ssa_var_version of <il: edx_1#2:eax_19#23 = mulu.dp.d(eax_18#22, 5)>>'
p4229
aS'SSA var definition: 35'
p4230
aS'SSA var uses: [37L]'
p4231
aS'SSA var value: <undetermined>'
p4232
aS'SSA var possible values: <undetermined>'
p4233
aS'SSA var version: <bound method MediumLevelILInstruction.get_ssa_var_version of <il: edx_1#2:eax_19#23 = mulu.dp.d(eax_18#22, 5)>>'
p4234
aS'SSA var definition: 35'
p4235
aS'SSA var uses: [36L]'
p4236
aS'SSA var value: <undetermined>'
p4237
aS'SSA var possible values: <undetermined>'
p4238
aS'SSA var version: <bound method MediumLevelILInstruction.get_ssa_var_version of <il: ecx_2#3 = edx_1#2>>'
p4239
aS'SSA var definition: 36'
p4240
aS'SSA var uses: [37L]'
p4241
aS'SSA var value: <undetermined>'
p4242
aS'SSA var possible values: <undetermined>'
p4243
aS'SSA var version: <bound method MediumLevelILInstruction.get_ssa_var_version of <il: ecx_2#3 = edx_1#2>>'
p4244
aS'SSA var definition: 35'
p4245
aS'SSA var uses: [37L]'
p4246
aS'SSA var value: <undetermined>'
p4247
aS'SSA var possible values: <undetermined>'
p4248
aS'SSA var version: <bound method MediumLevelILInstruction.get_ssa_var_version of <il: edx_2#3:eax_20#24 = muls.dp.d(eax_19#23, ecx_2#3)>>'
p4249
aS'SSA var definition: 36'
p4250
aS'SSA var uses: [37L]'
p4251
aS'SSA var value: <undetermined>'
p4252
aS'SSA var possible values: <undetermined>'
p4253
aS'SSA var version: <bound method MediumLevelILInstruction.get_ssa_var_version of <il: edx_2#3:eax_20#24 = muls.dp.d(eax_19#23, ecx_2#3)>>'
p4254
aS'SSA var definition: 37'
p4255
aS'SSA var uses: [38L, 39L]'
p4256
aS'SSA var value: <undetermined>'
p4257
aS'SSA var possible values: <undetermined>'
p4258
aS'SSA var version: <bound method MediumLevelILInstruction.get_ssa_var_version of <il: edx_2#3:eax_20#24 = muls.dp.d(eax_19#23, ecx_2#3)>>'
p4259
aS'SSA var definition: 37'
p4260
aS'SSA var uses: [38L, 39L]'
p4261
aS'SSA var value: <undetermined>'
p4262
aS'SSA var possible values: <undetermined>'
p4263
aS'SSA var version: <bound method MediumLevelILInstruction.get_ssa_var_version of <il: edx_2#3:eax_20#24 = muls.dp.d(eax_19#23, ecx_2#3)>>'
p4264
aS'SSA var definition: 37'
p4265
aS'SSA var uses: [38L, 39L]'
p4266
aS'SSA var value: <undetermined>'
p4267
aS'SSA var possible values: <undetermined>'
p4268
aS'SSA var version: <bound method MediumLevelILInstruction.get_ssa_var_version of <il: temp0#1 = divs.dp.d(edx_2#3:eax_20#24, 9)>>'
p4269
aS'SSA var definition: 37'
p4270
aS'SSA var uses: [38L, 39L]'
p4271
aS'SSA var value: <undetermined>'
p4272
aS'SSA var possible values: <undetermined>'
p4273
aS'SSA var version: <bound method MediumLevelILInstruction.get_ssa_var_version of <il: temp0#1 = divs.dp.d(edx_2#3:eax_20#24, 9)>>'
p4274
aS'SSA var definition: 38'
p4275
aS'SSA var uses: [40L]'
p4276
aS'SSA var value: <undetermined>'
p4277
aS'SSA var possible values: <undetermined>'
p4278
aS'SSA var version: <bound method MediumLevelILInstruction.get_ssa_var_version of <il: temp0#1 = divs.dp.d(edx_2#3:eax_20#24, 9)>>'
p4279
aS'SSA var definition: 37'
p4280
aS'SSA var uses: [38L, 39L]'
p4281
aS'SSA var value: <undetermined>'
p4282
aS'SSA var possible values: <undetermined>'
p4283
aS'SSA var version: <bound method MediumLevelILInstruction.get_ssa_var_version of <il: temp1#1 = mods.dp.d(edx_2#3:eax_20#24, 9)>>'
p4284
aS'SSA var definition: 37'
p4285
aS'SSA var uses: [38L, 39L]'
p4286
aS'SSA var value: <undetermined>'
p4287
aS'SSA var possible values: <undetermined>'
p4288
aS'SSA var version: <bound method MediumLevelILInstruction.get_ssa_var_version of <il: temp1#1 = mods.dp.d(edx_2#3:eax_20#24, 9)>>'
p4289
aS'SSA var definition: 39'
p4290
aS'SSA var uses: [41L]'
p4291
aS'SSA var value: <undetermined>'
p4292
aS'SSA var possible values: <undetermined>'
p4293
aS'SSA var version: <bound method MediumLevelILInstruction.get_ssa_var_version of <il: temp1#1 = mods.dp.d(edx_2#3:eax_20#24, 9)>>'
p4294
aS'SSA var definition: 38'
p4295
aS'SSA var uses: [40L]'
p4296
aS'SSA var value: <undetermined>'
p4297
aS'SSA var possible values: <undetermined>'
p4298
aS'SSA var version: <bound method MediumLevelILInstruction.get_ssa_var_version of <il: eax_21#25 = temp0#1>>'
p4299
aS'SSA var definition: 40'
p4300
aS'SSA var uses: [43L]'
p4301
aS'SSA var value: <undetermined>'
p4302
aS'SSA var possible values: <undetermined>'
p4303
aS'SSA var version: <bound method MediumLevelILInstruction.get_ssa_var_version of <il: eax_21#25 = temp0#1>>'
p4304
aS'SSA var definition: 39'
p4305
aS'SSA var uses: [41L]'
p4306
aS'SSA var value: <undetermined>'
p4307
aS'SSA var possible values: <undetermined>'
p4308
aS'SSA var version: <bound method MediumLevelILInstruction.get_ssa_var_version of <il: edx_3#4 = temp1#1>>'
p4309
aS'SSA var definition: 41'
p4310
aS'SSA var uses: [42L]'
p4311
aS'SSA var value: <undetermined>'
p4312
aS'SSA var possible values: <undetermined>'
p4313
aS'SSA var version: <bound method MediumLevelILInstruction.get_ssa_var_version of <il: edx_3#4 = temp1#1>>'
p4314
aS'SSA var definition: 41'
p4315
aS'SSA var uses: [42L]'
p4316
aS'SSA var value: <undetermined>'
p4317
aS'SSA var possible values: <undetermined>'
p4318
aS'SSA var version: <bound method MediumLevelILInstruction.get_ssa_var_version of <il: [0x2000].d = [0x2000].d @ mem#7 + edx_3#4 @ mem#7 -> mem#8>>'
p4319
aS'SSA var definition: 40'
p4320
aS'SSA var uses: [43L]'
p4321
aS'SSA var value: <undetermined>'
p4322
aS'SSA var possible values: <undetermined>'
p4323
aS'SSA var version: <bound method MediumLevelILInstruction.get_ssa_var_version of <il: edx_4#5:eax_22#26 = sx.q(eax_21#25)>>'
p4324
aS'SSA var definition: 43'
p4325
aS'SSA var uses: [44L, 45L]'
p4326
aS'SSA var value: <undetermined>'
p4327
aS'SSA var possible values: <undetermined>'
p4328
aS'SSA var version: <bound method MediumLevelILInstruction.get_ssa_var_version of <il: edx_4#5:eax_22#26 = sx.q(eax_21#25)>>'
p4329
aS'SSA var definition: 43'
p4330
aS'SSA var uses: [44L, 45L]'
p4331
aS'SSA var value: <undetermined>'
p4332
aS'SSA var possible values: <undetermined>'
p4333
aS'SSA var version: <bound method MediumLevelILInstruction.get_ssa_var_version of <il: edx_4#5:eax_22#26 = sx.q(eax_21#25)>>'
p4334
aS'SSA var definition: 43'
p4335
aS'SSA var uses: [44L, 45L]'
p4336
aS'SSA var value: <undetermined>'
p4337
aS'SSA var possible values: <undetermined>'
p4338
aS'SSA var version: <bound method MediumLevelILInstruction.get_ssa_var_version of <il: temp0_1#2 = divu.dp.d(edx_4#5:eax_22#26, 3)>>'
p4339
aS'SSA var definition: 43'
p4340
aS'SSA var uses: [44L, 45L]'
p4341
aS'SSA var value: <undetermined>'
p4342
aS'SSA var possible values: <undetermined>'
p4343
aS'SSA var version: <bound method MediumLevelILInstruction.get_ssa_var_version of <il: temp0_1#2 = divu.dp.d(edx_4#5:eax_22#26, 3)>>'
p4344
aS'SSA var definition: 44'
p4345
aS'SSA var uses: [46L]'
p4346
aS'SSA var value: <undetermined>'
p4347
aS'SSA var possible values: <undetermined>'
p4348
aS'SSA var version: <bound method MediumLevelILInstruction.get_ssa_var_version of <il: temp0_1#2 = divu.dp.d(edx_4#5:eax_22#26, 3)>>'
p4349
aS'SSA var definition: 43'
p4350
aS'SSA var uses: [44L, 45L]'
p4351
aS'SSA var value: <undetermined>'
p4352
aS'SSA var possible values: <undetermined>'
p4353
aS'SSA var version: <bound method MediumLevelILInstruction.get_ssa_var_version of <il: temp1_1#2 = modu.dp.d(edx_4#5:eax_22#26, 3)>>'
p4354
aS'SSA var definition: 43'
p4355
aS'SSA var uses: [44L, 45L]'
p4356
aS'SSA var value: <undetermined>'
p4357
aS'SSA var possible values: <undetermined>'
p4358
aS'SSA var version: <bound method MediumLevelILInstruction.get_ssa_var_version of <il: temp1_1#2 = modu.dp.d(edx_4#5:eax_22#26, 3)>>'
p4359
aS'SSA var definition: 45'
p4360
aS'SSA var uses: [47L]'
p4361
aS'SSA var value: <undetermined>'
p4362
aS'SSA var possible values: <unsigned ranges: [<range: 0x0 to 0xffff>]>'
p4363
aS'SSA var version: <bound method MediumLevelILInstruction.get_ssa_var_version of <il: temp1_1#2 = modu.dp.d(edx_4#5:eax_22#26, 3)>>'
p4364
aS'SSA var definition: 44'
p4365
aS'SSA var uses: [46L]'
p4366
aS'SSA var value: <undetermined>'
p4367
aS'SSA var possible values: <undetermined>'
p4368
aS'SSA var version: <bound method MediumLevelILInstruction.get_ssa_var_version of <il: eax_23#27 = temp0_1#2>>'
p4369
aS'SSA var definition: 46'
p4370
aS'SSA var uses: [49L, 50L]'
p4371
aS'SSA var value: <undetermined>'
p4372
aS'SSA var possible values: <undetermined>'
p4373
aS'SSA var version: <bound method MediumLevelILInstruction.get_ssa_var_version of <il: eax_23#27 = temp0_1#2>>'
p4374
aS'SSA var definition: 45'
p4375
aS'SSA var uses: [47L]'
p4376
aS'SSA var value: <undetermined>'
p4377
aS'SSA var possible values: <unsigned ranges: [<range: 0x0 to 0xffff>]>'
p4378
aS'SSA var version: <bound method MediumLevelILInstruction.get_ssa_var_version of <il: edx_5#6 = temp1_1#2>>'
p4379
aS'SSA var definition: 47'
p4380
aS'SSA var uses: [48L, 54L]'
p4381
aS'SSA var value: <undetermined>'
p4382
aS'SSA var possible values: <unsigned ranges: [<range: 0x0 to 0xffff>]>'
p4383
aS'SSA var version: <bound method MediumLevelILInstruction.get_ssa_var_version of <il: edx_5#6 = temp1_1#2>>'
p4384
aS'SSA var definition: 47'
p4385
aS'SSA var uses: [48L, 54L]'
p4386
aS'SSA var value: <undetermined>'
p4387
aS'SSA var possible values: <unsigned ranges: [<range: 0x0 to 0xffff>]>'
p4388
aS'SSA var version: <bound method MediumLevelILInstruction.get_ssa_var_version of <il: [0x2000].d = [0x2000].d @ mem#8 + edx_5#6 @ mem#8 -> mem#9>>'
p4389
aS'SSA var definition: 46'
p4390
aS'SSA var uses: [49L, 50L]'
p4391
aS'SSA var value: <undetermined>'
p4392
aS'SSA var possible values: <undetermined>'
p4393
aS'SSA var version: <bound method MediumLevelILInstruction.get_ssa_var_version of <il: [0x2000].d = [0x2000].d @ mem#9 + eax_23#27 @ mem#9 -> mem#10>>'
p4394
aS'SSA var definition: 46'
p4395
aS'SSA var uses: [49L, 50L]'
p4396
aS'SSA var value: <undetermined>'
p4397
aS'SSA var possible values: <undetermined>'
p4398
aS'SSA var version: <bound method MediumLevelILInstruction.get_ssa_var_version of <il: eax_24#28 = neg.d(eax_23#27)>>'
p4399
aS'SSA var definition: 50'
p4400
aS'SSA var uses: [51L]'
p4401
aS'SSA var value: <undetermined>'
p4402
aS'SSA var possible values: <undetermined>'
p4403
aS'SSA var version: <bound method MediumLevelILInstruction.get_ssa_var_version of <il: eax_24#28 = neg.d(eax_23#27)>>'
p4404
aS'SSA var definition: 50'
p4405
aS'SSA var uses: [51L]'
p4406
aS'SSA var value: <undetermined>'
p4407
aS'SSA var possible values: <undetermined>'
p4408
aS'SSA var version: <bound method MediumLevelILInstruction.get_ssa_var_version of <il: eax_25#29 = not.d(eax_24#28)>>'
p4409
aS'SSA var definition: 51'
p4410
aS'SSA var uses: [52L, 53L]'
p4411
aS'SSA var value: <undetermined>'
p4412
aS'SSA var possible values: <undetermined>'
p4413
aS'SSA var version: <bound method MediumLevelILInstruction.get_ssa_var_version of <il: eax_25#29 = not.d(eax_24#28)>>'
p4414
aS'SSA var definition: 51'
p4415
aS'SSA var uses: [52L, 53L]'
p4416
aS'SSA var value: <undetermined>'
p4417
aS'SSA var possible values: <undetermined>'
p4418
aS'SSA var version: <bound method MediumLevelILInstruction.get_ssa_var_version of <il: [0x2000].d = [0x2000].d @ mem#10 + eax_25#29 @ mem#10 -> mem#11>>'
p4419
aS'SSA var definition: 51'
p4420
aS'SSA var uses: [52L, 53L]'
p4421
aS'SSA var value: <undetermined>'
p4422
aS'SSA var possible values: <undetermined>'
p4423
aS'SSA var version: <bound method MediumLevelILInstruction.get_ssa_var_version of <il: eax_26#30 = sx.d(eax_25#29.ax)>>'
p4424
aS'SSA var definition: 53'
p4425
aS'SSA var uses: [55L]'
p4426
aS'SSA var value: <undetermined>'
p4427
aS'SSA var possible values: <signed ranges: [<range: -0x8000 to 0x7fff>]>'
p4428
aS'SSA var version: <bound method MediumLevelILInstruction.get_ssa_var_version of <il: eax_26#30 = sx.d(eax_25#29.ax)>>'
p4429
aS'SSA var definition: 47'
p4430
aS'SSA var uses: [48L, 54L]'
p4431
aS'SSA var value: <undetermined>'
p4432
aS'SSA var possible values: <unsigned ranges: [<range: 0x0 to 0xffff>]>'
p4433
aS'SSA var version: <bound method MediumLevelILInstruction.get_ssa_var_version of <il: edx_6#7 = zx.d(edx_5#6.dx)>>'
p4434
aS'SSA var definition: 54'
p4435
aS'SSA var uses: [55L]'
p4436
aS'SSA var value: <undetermined>'
p4437
aS'SSA var possible values: <unsigned ranges: [<range: 0x0 to 0xffff>]>'
p4438
aS'SSA var version: <bound method MediumLevelILInstruction.get_ssa_var_version of <il: edx_6#7 = zx.d(edx_5#6.dx)>>'
p4439
aS'SSA var definition: 53'
p4440
aS'SSA var uses: [55L]'
p4441
aS'SSA var value: <undetermined>'
p4442
aS'SSA var possible values: <signed ranges: [<range: -0x8000 to 0x7fff>]>'
p4443
aS'SSA var version: <bound method MediumLevelILInstruction.get_ssa_var_version of <il: eax_27#31 = eax_26#30 + edx_6#7>>'
p4444
aS'SSA var definition: 54'
p4445
aS'SSA var uses: [55L]'
p4446
aS'SSA var value: <undetermined>'
p4447
aS'SSA var possible values: <unsigned ranges: [<range: 0x0 to 0xffff>]>'
p4448
aS'SSA var version: <bound method MediumLevelILInstruction.get_ssa_var_version of <il: eax_27#31 = eax_26#30 + edx_6#7>>'
p4449
aS'SSA var definition: 55'
p4450
aS'SSA var uses: [56L]'
p4451
aS'SSA var value: <undetermined>'
p4452
aS'SSA var possible values: <undetermined>'
p4453
aS'SSA var version: <bound method MediumLevelILInstruction.get_ssa_var_version of <il: eax_27#31 = eax_26#30 + edx_6#7>>'
p4454
aS'SSA var definition: 55'
p4455
aS'SSA var uses: [56L]'
p4456
aS'SSA var value: <undetermined>'
p4457
aS'SSA var possible values: <undetermined>'
p4458
aS'SSA var version: <bound method MediumLevelILInstruction.get_ssa_var_version of <il: [0x2000].d = [0x2000].d @ mem#11 + eax_27#31 @ mem#11 -> mem#12>>'
p4459
aS'SSA var definition: 57'
p4460
aS'SSA var uses: [58L]'
p4461
aS'SSA var value: <undetermined>'
p4462
aS'SSA var possible values: <undetermined>'
p4463
aS'SSA var version: <bound method MediumLevelILInstruction.get_ssa_var_version of <il: eax_28#32 = [0x2000].d @ mem#12>>'
p4464
aS'SSA var definition: 57'
p4465
aS'SSA var uses: [58L]'
p4466
aS'SSA var value: <undetermined>'
p4467
aS'SSA var possible values: <undetermined>'
p4468
aS'SSA var version: <bound method MediumLevelILInstruction.get_ssa_var_version of <il: eax_29#33 = eax_28#32 & 0x10>>'
p4469
aS'SSA var definition: 58'
p4470
aS'SSA var uses: [59L, 62L]'
p4471
aS'SSA var value: <undetermined>'
p4472
aS'SSA var possible values: <unsigned ranges: [<range: 0x0 to 0x10, step 0x10>]>'
p4473
aS'SSA var version: <bound method MediumLevelILInstruction.get_ssa_var_version of <il: eax_29#33 = eax_28#32 & 0x10>>'
p4474
aS'SSA var definition: 58'
p4475
aS'SSA var uses: [59L, 62L]'
p4476
aS'SSA var value: <undetermined>'
p4477
aS'SSA var possible values: <unsigned ranges: [<range: 0x0 to 0x10, step 0x10>]>'
p4478
aS'SSA var version: <bound method MediumLevelILInstruction.get_ssa_var_version of <il: if (eax_29#33 == 0) then 60 @ 0x1fed else 62 @ 0x1f2d>>'
p4479
aS'SSA var definition: 60'
p4480
aS'SSA var uses: [61L]'
p4481
aS'SSA var value: <undetermined>'
p4482
aS'SSA var possible values: <undetermined>'
p4483
aS'SSA var version: <bound method MediumLevelILInstruction.get_ssa_var_version of <il: eax_39#34 = [0x2000].d @ mem#12>>'
p4484
aS'SSA var definition: 60'
p4485
aS'SSA var uses: [61L]'
p4486
aS'SSA var value: <undetermined>'
p4487
aS'SSA var possible values: <undetermined>'
p4488
aS'SSA var version: <bound method MediumLevelILInstruction.get_ssa_var_version of <il: jump(eax_39#34)>>'
p4489
aS'SSA var definition: 58'
p4490
aS'SSA var uses: [59L, 62L]'
p4491
aS'SSA var value: <undetermined>'
p4492
aS'SSA var possible values: <const 0x10>'
p4493
aS'SSA var version: <bound method MediumLevelILInstruction.get_ssa_var_version of <il: eax_30#35 = eax_29#33 & 1>>'
p4494
aS'SSA var definition: 62'
p4495
aS'SSA var uses: [63L]'
p4496
aS'SSA var value: <undetermined>'
p4497
aS'SSA var possible values: <const 0x0>'
p4498
aS'SSA var version: <bound method MediumLevelILInstruction.get_ssa_var_version of <il: eax_30#35 = eax_29#33 & 1>>'
p4499
aS'SSA var definition: 62'
p4500
aS'SSA var uses: [63L]'
p4501
aS'SSA var value: <undetermined>'
p4502
aS'SSA var possible values: <const 0x0>'
p4503
aS'SSA var version: <bound method MediumLevelILInstruction.get_ssa_var_version of <il: eax_31#36 = [(eax_30#35 << 2) + 0x1f3b].d @ mem#12>>'
p4504
aS'SSA var definition: 63'
p4505
aS'SSA var uses: [64L, 65L]'
p4506
aS'SSA var value: <undetermined>'
p4507
aS'SSA var possible values: <const 0x1f43>'
p4508
aS'SSA var version: <bound method MediumLevelILInstruction.get_ssa_var_version of <il: eax_31#36 = [(eax_30#35 << 2) + 0x1f3b].d @ mem#12>>'
p4509
aS'SSA var definition: 63'
p4510
aS'SSA var uses: [64L, 65L]'
p4511
aS'SSA var value: <undetermined>'
p4512
aS'SSA var possible values: <const 0x1f43>'
p4513
aS'SSA var version: <bound method MediumLevelILInstruction.get_ssa_var_version of <il: jump(eax_31#36 => 65 @ 0x1f43)>>'
p4514
aS'SSA var definition: 63'
p4515
aS'SSA var uses: [64L, 65L]'
p4516
aS'SSA var value: <undetermined>'
p4517
aS'SSA var possible values: <const 0x1f43>'
p4518
aS'SSA var version: <bound method MediumLevelILInstruction.get_ssa_var_version of <il: eax_32#37 = eax_31#36 + 1>>'
p4519
aS'SSA var definition: 65'
p4520
aS'SSA var uses: [67L, 68L]'
p4521
aS'SSA var value: <undetermined>'
p4522
aS'SSA var possible values: <const 0x1f44>'
p4523
aS'SSA var version: <bound method MediumLevelILInstruction.get_ssa_var_version of <il: eax_32#37 = eax_31#36 + 1>>'
p4524
aS'SSA var definition: 65'
p4525
aS'SSA var uses: [67L, 68L]'
p4526
aS'SSA var value: <undetermined>'
p4527
aS'SSA var possible values: <const 0x1f44>'
p4528
aS'SSA var version: <bound method MediumLevelILInstruction.get_ssa_var_version of <il: [0x2000].d = eax_32#37 @ mem#12 -> mem#13>>'
p4529
aS'SSA var definition: 65'
p4530
aS'SSA var uses: [67L, 68L]'
p4531
aS'SSA var value: <undetermined>'
p4532
aS'SSA var possible values: <const 0x1f44>'
p4533
aS'SSA var version: <bound method MediumLevelILInstruction.get_ssa_var_version of <il: var_4_2#3 = eax_32#37>>'
p4534
aS'SSA var definition: 68'
p4535
aS'SSA var uses: [69L]'
p4536
aS'SSA var value: <undetermined>'
p4537
aS'SSA var possible values: <const 0x1f44>'
p4538
aS'SSA var version: <bound method MediumLevelILInstruction.get_ssa_var_version of <il: var_4_2#3 = eax_32#37>>'
p4539
aS'SSA var definition: 68'
p4540
aS'SSA var uses: [69L]'
p4541
aS'SSA var value: <undetermined>'
p4542
aS'SSA var possible values: <const 0x1f44>'
p4543
aS'SSA var version: <bound method MediumLevelILInstruction.get_ssa_var_version of <il: eax_33#38, mem#14 = 0x1ff7(5, var_4_2#3) @ mem#13>>'
p4544
aS'SSA var definition: 69'
p4545
aS'SSA var uses: [70L, 71L]'
p4546
aS'SSA var value: <undetermined>'
p4547
aS'SSA var possible values: <undetermined>'
p4548
aS'SSA var version: <bound method MediumLevelILInstruction.get_ssa_var_version of <il: eax_33#38, mem#14 = 0x1ff7(5, var_4_2#3) @ mem#13>>'
p4549
aS'SSA var definition: 69'
p4550
aS'SSA var uses: [70L, 71L]'
p4551
aS'SSA var value: <undetermined>'
p4552
aS'SSA var possible values: <undetermined>'
p4553
aS'SSA var version: <bound method MediumLevelILInstruction.get_ssa_var_version of <il: [0x2000].d = eax_33#38 @ mem#14 -> mem#15>>'
p4554
aS'SSA var definition: 69'
p4555
aS'SSA var uses: [70L, 71L]'
p4556
aS'SSA var value: <undetermined>'
p4557
aS'SSA var possible values: <undetermined>'
p4558
aS'SSA var version: <bound method MediumLevelILInstruction.get_ssa_var_version of <il: eax_34#39 = eax_33#38 & 0x80>>'
p4559
aS'SSA var definition: 71'
p4560
aS'SSA var uses: [72L, 73L, 76L, 81L, 86L, 92L, 93L, 94L, 95L, 96L, 97L, 98L, 99L]'
p4561
aS'SSA var value: <undetermined>'
p4562
aS'SSA var possible values: <unsigned ranges: [<range: 0x0 to 0x80, step 0x80>]>'
p4563
aS'SSA var version: <bound method MediumLevelILInstruction.get_ssa_var_version of <il: eax_34#39 = eax_33#38 & 0x80>>'
p4564
aS'SSA var definition: 71'
p4565
aS'SSA var uses: [72L, 73L, 76L, 81L, 86L, 92L, 93L, 94L, 95L, 96L, 97L, 98L, 99L]'
p4566
aS'SSA var value: <undetermined>'
p4567
aS'SSA var possible values: <unsigned ranges: [<range: 0x0 to 0x80, step 0x80>]>'
p4568
aS'SSA var version: <bound method MediumLevelILInstruction.get_ssa_var_version of <il: if (eax_34#39 != 0) then 73 @ 0x1f7b else 74 @ 0x1f71>>'
p4569
aS'SSA var definition: 71'
p4570
aS'SSA var uses: [72L, 73L, 76L, 81L, 86L, 92L, 93L, 94L, 95L, 96L, 97L, 98L, 99L]'
p4571
aS'SSA var value: <undetermined>'
p4572
aS'SSA var possible values: <const 0x80>'
p4573
aS'SSA var version: <bound method MediumLevelILInstruction.get_ssa_var_version of <il: if (eax_34#39 == 5) then 76 @ 0x0 else 77 @ 0x1f82>>'
p4574
aS'SSA var definition: 76'
p4575
aS'SSA var uses: [76L, 77L]'
p4576
aS'SSA var value: <undetermined>'
p4577
aS'SSA var possible values: <unsigned ranges: [<range: 0x0 to 0x80, step 0x80>, <range: 0x1 to 0x1c>]>'
p4578
aS'SSA var version: <bound method MediumLevelILInstruction.get_ssa_var_version of <il: [0x2000].d = eax_34#41 @ mem#15 -> mem#16>>'
p4579
aS'SSA var definition: 76'
p4580
aS'SSA var uses: [76L, 77L]'
p4581
aS'SSA var value: <undetermined>'
p4582
aS'SSA var possible values: <unsigned ranges: [<range: 0x0 to 0x80, step 0x80>, <range: 0x1 to 0x1c>]>'
p4583
aS'SSA var version: <bound method MediumLevelILInstruction.get_ssa_var_version of <il: temp3#1 = eax_34#41>>'
p4584
aS'SSA var definition: 77'
p4585
aS'SSA var uses: [78L, 79L]'
p4586
aS'SSA var value: <undetermined>'
p4587
aS'SSA var possible values: <unsigned ranges: [<range: 0x0 to 0x80, step 0x80>, <range: 0x1 to 0x1c>]>'
p4588
aS'SSA var version: <bound method MediumLevelILInstruction.get_ssa_var_version of <il: temp3#1 = eax_34#41>>'
p4589
aS'SSA var definition: 77'
p4590
aS'SSA var uses: [78L, 79L]'
p4591
aS'SSA var value: <undetermined>'
p4592
aS'SSA var possible values: <unsigned ranges: [<range: 0x0 to 0x80, step 0x80>, <range: 0x1 to 0x1c>]>'
p4593
aS'SSA var version: <bound method MediumLevelILInstruction.get_ssa_var_version of <il: eax_35#42 = temp3#1 + 8>>'
p4594
aS'SSA var definition: 78'
p4595
aS'SSA var uses: [82L, 83L]'
p4596
aS'SSA var value: <undetermined>'
p4597
aS'SSA var possible values: <unsigned ranges: [<range: 0x8 to 0x88, step 0x80>, <range: 0x9 to 0x24>]>'
p4598
aS'SSA var version: <bound method MediumLevelILInstruction.get_ssa_var_version of <il: eax_35#42 = temp3#1 + 8>>'
p4599
aS'SSA var definition: 77'
p4600
aS'SSA var uses: [78L, 79L]'
p4601
aS'SSA var value: <undetermined>'
p4602
aS'SSA var possible values: <unsigned ranges: [<range: 0x0 to 0x80, step 0x80>, <range: 0x1 to 0x1c>]>'
p4603
aS'SSA var version: <bound method MediumLevelILInstruction.get_ssa_var_version of <il: o#1 = add_overflow(temp3#1, 8)>>'
p4604
aS'SSA var definition: 79'
p4605
aS'SSA var uses: [80L]'
p4606
aS'SSA var value: <undetermined>'
p4607
aS'SSA var possible values: <undetermined>'
p4608
aS'SSA var version: <bound method MediumLevelILInstruction.get_ssa_var_version of <il: o#1 = add_overflow(temp3#1, 8)>>'
p4609
aS'SSA var definition: 79'
p4610
aS'SSA var uses: [80L]'
p4611
aS'SSA var value: <undetermined>'
p4612
aS'SSA var possible values: <undetermined>'
p4613
aS'SSA var version: <bound method MediumLevelILInstruction.get_ssa_var_version of <il: if (not(o#1)) then 86 @ 0x1fd0 else 89 @ 0x1fce>>'
p4614
aS'SSA var definition: 71'
p4615
aS'SSA var uses: [72L, 73L, 76L, 81L, 86L, 92L, 93L, 94L, 95L, 96L, 97L, 98L, 99L]'
p4616
aS'SSA var value: <undetermined>'
p4617
aS'SSA var possible values: <const 0x80>'
p4618
aS'SSA var version: <bound method MediumLevelILInstruction.get_ssa_var_version of <il: if (eax_34#39 != 8) then 84 @ 0x1f8e else 85 @ 0x1f84>>'
p4619
aS'SSA var definition: 78'
p4620
aS'SSA var uses: [82L, 83L]'
p4621
aS'SSA var value: <undetermined>'
p4622
aS'SSA var possible values: <unsigned ranges: [<range: 0x8 to 0x88, step 0x80>, <range: 0x9 to 0x24>]>'
p4623
aS'SSA var version: <bound method MediumLevelILInstruction.get_ssa_var_version of <il: [0x2000].d = eax_35#42 @ mem#16 -> mem#17>>'
p4624
aS'SSA var definition: 78'
p4625
aS'SSA var uses: [82L, 83L]'
p4626
aS'SSA var value: <undetermined>'
p4627
aS'SSA var possible values: <unsigned ranges: [<range: 0x8 to 0x88, step 0x80>, <range: 0x9 to 0x24>]>'
p4628
aS'SSA var version: <bound method MediumLevelILInstruction.get_ssa_var_version of <il: eax_36#43 = eax_35#42 & 1>>'
p4629
aS'SSA var definition: 83'
p4630
aS'SSA var uses: [84L]'
p4631
aS'SSA var value: <undetermined>'
p4632
aS'SSA var possible values: <unsigned ranges: [<range: 0x0 to 0x1, step 0x80>, <range: 0x1 to 0x1>]>'
p4633
aS'SSA var version: <bound method MediumLevelILInstruction.get_ssa_var_version of <il: eax_36#43 = eax_35#42 & 1>>'
p4634
aS'SSA var definition: 83'
p4635
aS'SSA var uses: [84L]'
p4636
aS'SSA var value: <undetermined>'
p4637
aS'SSA var possible values: <unsigned ranges: [<range: 0x0 to 0x1, step 0x80>, <range: 0x1 to 0x1>]>'
p4638
aS'SSA var version: <bound method MediumLevelILInstruction.get_ssa_var_version of <il: if (eax_36#43 == 0) then 92 @ 0x1fea else 94 @ 0x1fdc>>'
p4639
aS'SSA var definition: 71'
p4640
aS'SSA var uses: [72L, 73L, 76L, 81L, 86L, 92L, 93L, 94L, 95L, 96L, 97L, 98L, 99L]'
p4641
aS'SSA var value: <undetermined>'
p4642
aS'SSA var possible values: <const 0x80>'
p4643
aS'SSA var version: <bound method MediumLevelILInstruction.get_ssa_var_version of <il: if (eax_34#39 s< 0xc) then 90 @ 0x0 else 91 @ 0x1f95>>'
p4644
aS'SSA var definition: 88'
p4645
aS'SSA var uses: [89L]'
p4646
aS'SSA var value: <undetermined>'
p4647
aS'SSA var possible values: <undetermined>'
p4648
aS'SSA var version: <bound method MediumLevelILInstruction.get_ssa_var_version of <il: eax_38#44, mem#18 = syscall(1, 0) @ mem#17>>'
p4649
aS'SSA var definition: 90'
p4650
aS'SSA var uses: []'
p4651
aS'SSA var value: <const 0x0>'
p4652
aS'SSA var possible values: <const 0x0>'
p4653
aS'SSA var version: <bound method MediumLevelILInstruction.get_ssa_var_version of <il: eax_37#45 = 0>>'
p4654
aS'SSA var definition: 71'
p4655
aS'SSA var uses: [72L, 73L, 76L, 81L, 86L, 92L, 93L, 94L, 95L, 96L, 97L, 98L, 99L]'
p4656
aS'SSA var value: <undetermined>'
p4657
aS'SSA var possible values: <const 0x80>'
p4658
aS'SSA var version: <bound method MediumLevelILInstruction.get_ssa_var_version of <il: if (eax_34#39 u< 0xe) then 96 @ 0x0 else 97 @ 0x1f9c>>'
p4659
aS'SSA var definition: 71'
p4660
aS'SSA var uses: [72L, 73L, 76L, 81L, 86L, 92L, 93L, 94L, 95L, 96L, 97L, 98L, 99L]'
p4661
aS'SSA var value: <undetermined>'
p4662
aS'SSA var possible values: <const 0x80>'
p4663
aS'SSA var version: <bound method MediumLevelILInstruction.get_ssa_var_version of <il: if (eax_34#39 s<= 0x12) then 98 @ 0x0 else 99 @ 0x1fa3>>'
p4664
aS'SSA var definition: 71'
p4665
aS'SSA var uses: [72L, 73L, 76L, 81L, 86L, 92L, 93L, 94L, 95L, 96L, 97L, 98L, 99L]'
p4666
aS'SSA var value: <undetermined>'
p4667
aS'SSA var possible values: <const 0x80>'
p4668
aS'SSA var version: <bound method MediumLevelILInstruction.get_ssa_var_version of <il: if (eax_34#39 u<= 0x16) then 100 @ 0x0 else 101 @ 0x1faa>>'
p4669
aS'SSA var definition: 71'
p4670
aS'SSA var uses: [72L, 73L, 76L, 81L, 86L, 92L, 93L, 94L, 95L, 96L, 97L, 98L, 99L]'
p4671
aS'SSA var value: <undetermined>'
p4672
aS'SSA var possible values: <const 0x80>'
p4673
aS'SSA var version: <bound method MediumLevelILInstruction.get_ssa_var_version of <il: if (eax_34#39 s>= 0x28) then 102 @ 0x0 else 103 @ 0x1fb1>>'
p4674
aS'SSA var definition: 71'
p4675
aS'SSA var uses: [72L, 73L, 76L, 81L, 86L, 92L, 93L, 94L, 95L, 96L, 97L, 98L, 99L]'
p4676
aS'SSA var value: <undetermined>'
p4677
aS'SSA var possible values: <undetermined>'
p4678
aS'SSA var version: <bound method MediumLevelILInstruction.get_ssa_var_version of <il: if (eax_34#39 u>= 0x24) then 104 @ 0x0 else 105 @ 0x1fb8>>'
p4679
aS'SSA var definition: 71'
p4680
aS'SSA var uses: [72L, 73L, 76L, 81L, 86L, 92L, 93L, 94L, 95L, 96L, 97L, 98L, 99L]'
p4681
aS'SSA var value: <undetermined>'
p4682
aS'SSA var possible values: <unsigned ranges: [<range: 0x0 to 0x23>]>'
p4683
aS'SSA var version: <bound method MediumLevelILInstruction.get_ssa_var_version of <il: if (eax_34#39 s> 0x20) then 106 @ 0x0 else 107 @ 0x1fbf>>'
p4684
aS'SSA var definition: 71'
p4685
aS'SSA var uses: [72L, 73L, 76L, 81L, 86L, 92L, 93L, 94L, 95L, 96L, 97L, 98L, 99L]'
p4686
aS'SSA var value: <undetermined>'
p4687
aS'SSA var possible values: <unsigned ranges: [<range: 0x0 to 0x20>]>'
p4688
aS'SSA var version: <bound method MediumLevelILInstruction.get_ssa_var_version of <il: if (eax_34#39 u> 0x1b) then 108 @ 0x0 else 109 @ 0x1fc1>>'
p4689
aS'SSA var definition: 71'
p4690
aS'SSA var uses: [72L, 73L, 76L, 81L, 86L, 92L, 93L, 94L, 95L, 96L, 97L, 98L, 99L]'
p4691
aS'SSA var value: <undetermined>'
p4692
aS'SSA var possible values: <unsigned ranges: [<range: 0x0 to 0x1b>]>'
p4693
aS'SSA var version: <bound method MediumLevelILInstruction.get_ssa_var_version of <il: eax_34#40 = eax_34#39 + 1>>'
p4694
aS'SSA var definition: 99'
p4695
aS'SSA var uses: [76L]'
p4696
aS'SSA var value: <undetermined>'
p4697
aS'SSA var possible values: <unsigned ranges: [<range: 0x1 to 0x1c>]>'
p4698
aS'SSA var version: <bound method MediumLevelILInstruction.get_ssa_var_version of <il: eax_34#40 = eax_34#39 + 1>>'
p4699
aS'SSA var definition: None'
p4700
aS'SSA var uses: [0L]'
p4701
aS'SSA var value: <undetermined>'
p4702
aS'SSA var possible values: <undetermined>'
p4703
aS'SSA var version: <bound method MediumLevelILInstruction.get_ssa_var_version of <il: eax_1#1 = testautovar#0>>'
p4704
aS'SSA var definition: 0'
p4705
aS'SSA var uses: [1L]'
p4706
aS'SSA var value: <undetermined>'
p4707
aS'SSA var possible values: <undetermined>'
p4708
aS'SSA var version: <bound method MediumLevelILInstruction.get_ssa_var_version of <il: eax_1#1 = testautovar#0>>'
p4709
aS'SSA var definition: 0'
p4710
aS'SSA var uses: [1L]'
p4711
aS'SSA var value: <undetermined>'
p4712
aS'SSA var possible values: <undetermined>'
p4713
aS'SSA var version: <bound method MediumLevelILInstruction.get_ssa_var_version of <il: eax#2 = eax_1#1 + arg2#0>>'
p4714
aS'SSA var definition: None'
p4715
aS'SSA var uses: [1L]'
p4716
aS'SSA var value: <undetermined>'
p4717
aS'SSA var possible values: <undetermined>'
p4718
aS'SSA var version: <bound method MediumLevelILInstruction.get_ssa_var_version of <il: eax#2 = eax_1#1 + arg2#0>>'
p4719
aS'SSA var definition: 1'
p4720
aS'SSA var uses: [2L]'
p4721
aS'SSA var value: <undetermined>'
p4722
aS'SSA var possible values: <undetermined>'
p4723
aS'SSA var version: <bound method MediumLevelILInstruction.get_ssa_var_version of <il: eax#2 = eax_1#1 + arg2#0>>'
p4724
as.